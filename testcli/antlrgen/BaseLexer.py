# Generated from D:/Work/testcli/testcli/antlr\BaseLexer.g4 by ANTLR 4.11.1
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
    from typing import TextIO
else:
    from typing.io import TextIO


def serializedATN():
    return [
        4,0,45,432,6,-1,6,-1,6,-1,6,-1,6,-1,2,0,7,0,2,1,7,1,2,2,7,2,2,3,
        7,3,2,4,7,4,2,5,7,5,2,6,7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,
        11,7,11,2,12,7,12,2,13,7,13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,
        17,2,18,7,18,2,19,7,19,2,20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,
        24,7,24,2,25,7,25,2,26,7,26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,
        30,2,31,7,31,2,32,7,32,2,33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,
        37,7,37,2,38,7,38,2,39,7,39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,
        43,2,44,7,44,2,45,7,45,2,46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,
        50,7,50,2,51,7,51,2,52,7,52,2,53,7,53,1,0,1,0,1,1,1,1,1,2,1,2,1,
        3,1,3,1,4,1,4,1,5,1,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,1,10,
        1,11,1,11,1,12,1,12,1,13,1,13,1,14,4,14,143,8,14,11,14,12,14,144,
        1,14,1,14,1,15,1,15,1,15,1,15,1,15,1,16,1,16,1,16,1,16,1,16,1,17,
        1,17,1,17,1,17,1,18,1,18,1,18,1,18,1,19,1,19,1,19,1,19,1,20,1,20,
        1,20,1,20,1,20,1,20,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,1,21,
        1,21,1,21,1,21,1,21,1,21,1,21,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,1,23,1,23,1,23,1,23,1,23,1,24,1,24,1,24,1,24,1,24,1,24,
        1,25,1,25,1,25,1,25,1,26,1,26,1,26,1,26,1,27,1,27,1,27,1,27,1,27,
        1,27,1,28,1,28,1,28,1,28,1,28,1,28,5,28,232,8,28,10,28,12,28,235,
        9,28,1,28,1,28,3,28,239,8,28,1,28,1,28,1,29,1,29,1,29,1,29,1,29,
        1,29,1,29,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,30,1,31,1,31,
        1,31,1,31,1,31,1,31,1,31,1,31,1,32,4,32,268,8,32,11,32,12,32,269,
        1,33,4,33,273,8,33,11,33,12,33,274,1,33,1,33,4,33,279,8,33,11,33,
        12,33,280,1,34,1,34,1,34,1,34,1,34,1,34,4,34,289,8,34,11,34,12,34,
        290,1,35,1,35,1,35,3,35,296,8,35,1,36,1,36,1,37,1,37,1,37,1,37,1,
        38,1,38,1,39,1,39,1,40,1,40,1,41,1,41,1,42,1,42,1,42,1,42,1,42,3,
        42,317,8,42,5,42,319,8,42,10,42,12,42,322,9,42,1,42,1,42,1,43,1,
        43,1,43,1,43,3,43,330,8,43,1,43,1,43,3,43,334,8,43,5,43,336,8,43,
        10,43,12,43,339,9,43,1,43,1,43,1,44,5,44,344,8,44,10,44,12,44,347,
        9,44,1,44,1,44,1,44,1,44,3,44,353,8,44,1,44,1,44,1,45,5,45,358,8,
        45,10,45,12,45,361,9,45,1,45,1,45,1,45,1,45,1,45,1,45,4,45,369,8,
        45,11,45,12,45,370,1,45,1,45,1,45,1,45,1,45,1,45,1,46,4,46,380,8,
        46,11,46,12,46,381,1,46,1,46,1,47,1,47,1,47,1,48,1,48,1,48,1,49,
        1,49,5,49,394,8,49,10,49,12,49,397,9,49,1,49,1,49,1,49,1,49,1,50,
        4,50,404,8,50,11,50,12,50,405,1,50,1,50,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,425,8,51,
        1,52,1,52,1,53,1,53,1,53,1,53,4,233,345,359,395,0,54,5,1,7,2,9,3,
        11,4,13,5,15,6,17,7,19,8,21,9,23,10,25,11,27,12,29,13,31,14,33,15,
        35,16,37,17,39,18,41,19,43,20,45,21,47,22,49,23,51,24,53,25,55,26,
        57,27,59,28,61,29,63,30,65,31,67,32,69,33,71,34,73,35,75,0,77,0,
        79,0,81,0,83,0,85,0,87,0,89,0,91,0,93,36,95,37,97,38,99,39,101,40,
        103,41,105,42,107,43,109,44,111,45,5,0,1,2,3,4,29,2,0,9,9,32,32,
        2,0,69,69,101,101,2,0,88,88,120,120,2,0,73,73,105,105,2,0,84,84,
        116,116,2,0,81,81,113,113,2,0,85,85,117,117,2,0,83,83,115,115,2,
        0,65,65,97,97,2,0,80,80,112,112,2,0,76,76,108,108,2,0,82,82,114,
        114,2,0,87,87,119,119,2,0,72,72,104,104,2,0,78,78,110,110,2,0,86,
        86,118,118,2,0,79,79,111,111,2,0,67,67,99,99,2,0,68,68,100,100,3,
        0,45,46,95,95,126,126,5,0,33,33,36,36,38,38,40,43,61,61,1,0,48,57,
        2,0,65,90,97,122,3,0,48,57,65,70,97,102,1,0,34,34,1,0,39,39,2,0,
        70,70,102,102,2,0,71,71,103,103,2,0,77,77,109,109,448,0,5,1,0,0,
        0,0,7,1,0,0,0,0,9,1,0,0,0,0,11,1,0,0,0,0,13,1,0,0,0,0,15,1,0,0,0,
        0,17,1,0,0,0,0,19,1,0,0,0,0,21,1,0,0,0,0,23,1,0,0,0,0,25,1,0,0,0,
        0,27,1,0,0,0,0,29,1,0,0,0,0,31,1,0,0,0,0,33,1,0,0,0,0,35,1,0,0,0,
        0,37,1,0,0,0,0,39,1,0,0,0,0,41,1,0,0,0,0,43,1,0,0,0,0,45,1,0,0,0,
        0,47,1,0,0,0,0,49,1,0,0,0,0,51,1,0,0,0,0,53,1,0,0,0,0,55,1,0,0,0,
        0,57,1,0,0,0,0,59,1,0,0,0,0,61,1,0,0,0,0,63,1,0,0,0,0,65,1,0,0,0,
        0,67,1,0,0,0,0,69,1,0,0,0,0,71,1,0,0,0,0,73,1,0,0,0,1,93,1,0,0,0,
        2,95,1,0,0,0,3,97,1,0,0,0,3,99,1,0,0,0,3,101,1,0,0,0,3,103,1,0,0,
        0,4,105,1,0,0,0,4,107,1,0,0,0,4,109,1,0,0,0,4,111,1,0,0,0,5,113,
        1,0,0,0,7,115,1,0,0,0,9,117,1,0,0,0,11,119,1,0,0,0,13,121,1,0,0,
        0,15,123,1,0,0,0,17,125,1,0,0,0,19,127,1,0,0,0,21,129,1,0,0,0,23,
        131,1,0,0,0,25,133,1,0,0,0,27,135,1,0,0,0,29,137,1,0,0,0,31,139,
        1,0,0,0,33,142,1,0,0,0,35,148,1,0,0,0,37,153,1,0,0,0,39,158,1,0,
        0,0,41,162,1,0,0,0,43,166,1,0,0,0,45,170,1,0,0,0,47,176,1,0,0,0,
        49,191,1,0,0,0,51,200,1,0,0,0,53,205,1,0,0,0,55,211,1,0,0,0,57,215,
        1,0,0,0,59,219,1,0,0,0,61,225,1,0,0,0,63,242,1,0,0,0,65,249,1,0,
        0,0,67,258,1,0,0,0,69,267,1,0,0,0,71,272,1,0,0,0,73,288,1,0,0,0,
        75,295,1,0,0,0,77,297,1,0,0,0,79,299,1,0,0,0,81,303,1,0,0,0,83,305,
        1,0,0,0,85,307,1,0,0,0,87,309,1,0,0,0,89,311,1,0,0,0,91,325,1,0,
        0,0,93,345,1,0,0,0,95,359,1,0,0,0,97,379,1,0,0,0,99,385,1,0,0,0,
        101,388,1,0,0,0,103,391,1,0,0,0,105,403,1,0,0,0,107,424,1,0,0,0,
        109,426,1,0,0,0,111,428,1,0,0,0,113,114,5,10,0,0,114,6,1,0,0,0,115,
        116,5,44,0,0,116,8,1,0,0,0,117,118,5,59,0,0,118,10,1,0,0,0,119,120,
        5,58,0,0,120,12,1,0,0,0,121,122,5,64,0,0,122,14,1,0,0,0,123,124,
        5,46,0,0,124,16,1,0,0,0,125,126,5,47,0,0,126,18,1,0,0,0,127,128,
        5,40,0,0,128,20,1,0,0,0,129,130,5,41,0,0,130,22,1,0,0,0,131,132,
        5,91,0,0,132,24,1,0,0,0,133,134,5,93,0,0,134,26,1,0,0,0,135,136,
        5,34,0,0,136,28,1,0,0,0,137,138,5,39,0,0,138,30,1,0,0,0,139,140,
        5,92,0,0,140,32,1,0,0,0,141,143,7,0,0,0,142,141,1,0,0,0,143,144,
        1,0,0,0,144,142,1,0,0,0,144,145,1,0,0,0,145,146,1,0,0,0,146,147,
        6,14,0,0,147,34,1,0,0,0,148,149,7,1,0,0,149,150,7,2,0,0,150,151,
        7,3,0,0,151,152,7,4,0,0,152,36,1,0,0,0,153,154,7,5,0,0,154,155,7,
        6,0,0,155,156,7,3,0,0,156,157,7,4,0,0,157,38,1,0,0,0,158,159,7,6,
        0,0,159,160,7,7,0,0,160,161,7,1,0,0,161,40,1,0,0,0,162,163,7,8,0,
        0,163,164,7,9,0,0,164,165,7,3,0,0,165,42,1,0,0,0,166,167,7,7,0,0,
        167,168,7,5,0,0,168,169,7,10,0,0,169,44,1,0,0,0,170,171,7,7,0,0,
        171,172,7,4,0,0,172,173,7,8,0,0,173,174,7,11,0,0,174,175,7,4,0,0,
        175,46,1,0,0,0,176,177,7,12,0,0,177,178,7,13,0,0,178,179,7,1,0,0,
        179,180,7,14,0,0,180,181,7,1,0,0,181,182,7,15,0,0,182,183,7,1,0,
        0,183,184,7,11,0,0,184,185,5,95,0,0,185,186,7,1,0,0,186,187,7,11,
        0,0,187,188,7,11,0,0,188,189,7,16,0,0,189,190,7,11,0,0,190,48,1,
        0,0,0,191,192,7,17,0,0,192,193,7,16,0,0,193,194,7,14,0,0,194,195,
        7,4,0,0,195,196,7,3,0,0,196,197,7,14,0,0,197,198,7,6,0,0,198,199,
        7,1,0,0,199,50,1,0,0,0,200,201,7,10,0,0,201,202,7,16,0,0,202,203,
        7,16,0,0,203,204,7,9,0,0,204,52,1,0,0,0,205,206,7,7,0,0,206,207,
        7,9,0,0,207,208,7,16,0,0,208,209,7,16,0,0,209,210,7,10,0,0,210,54,
        1,0,0,0,211,212,7,1,0,0,212,213,7,14,0,0,213,214,7,18,0,0,214,56,
        1,0,0,0,215,216,7,7,0,0,216,217,7,1,0,0,217,218,7,4,0,0,218,58,1,
        0,0,0,219,220,7,7,0,0,220,221,7,10,0,0,221,222,7,1,0,0,222,223,7,
        1,0,0,223,224,7,9,0,0,224,60,1,0,0,0,225,226,7,1,0,0,226,227,7,17,
        0,0,227,228,7,13,0,0,228,229,7,16,0,0,229,233,1,0,0,0,230,232,9,
        0,0,0,231,230,1,0,0,0,232,235,1,0,0,0,233,234,1,0,0,0,233,231,1,
        0,0,0,234,238,1,0,0,0,235,233,1,0,0,0,236,239,3,5,0,0,237,239,5,
        0,0,1,238,236,1,0,0,0,238,237,1,0,0,0,239,240,1,0,0,0,240,241,6,
        28,1,0,241,62,1,0,0,0,242,243,5,62,0,0,243,244,5,32,0,0,244,245,
        5,123,0,0,245,246,5,37,0,0,246,247,1,0,0,0,247,248,6,29,2,0,248,
        64,1,0,0,0,249,250,7,8,0,0,250,251,7,7,0,0,251,252,7,7,0,0,252,253,
        7,1,0,0,253,254,7,11,0,0,254,255,7,4,0,0,255,256,1,0,0,0,256,257,
        6,30,3,0,257,66,1,0,0,0,258,259,5,95,0,0,259,260,7,10,0,0,260,261,
        7,16,0,0,261,262,7,8,0,0,262,263,7,18,0,0,263,264,1,0,0,0,264,265,
        6,31,4,0,265,68,1,0,0,0,266,268,3,81,38,0,267,266,1,0,0,0,268,269,
        1,0,0,0,269,267,1,0,0,0,269,270,1,0,0,0,270,70,1,0,0,0,271,273,3,
        81,38,0,272,271,1,0,0,0,273,274,1,0,0,0,274,272,1,0,0,0,274,275,
        1,0,0,0,275,276,1,0,0,0,276,278,5,46,0,0,277,279,3,81,38,0,278,277,
        1,0,0,0,279,280,1,0,0,0,280,278,1,0,0,0,280,281,1,0,0,0,281,72,1,
        0,0,0,282,289,3,87,41,0,283,289,3,75,35,0,284,289,3,77,36,0,285,
        289,3,79,37,0,286,289,3,89,42,0,287,289,3,91,43,0,288,282,1,0,0,
        0,288,283,1,0,0,0,288,284,1,0,0,0,288,285,1,0,0,0,288,286,1,0,0,
        0,288,287,1,0,0,0,289,290,1,0,0,0,290,288,1,0,0,0,290,291,1,0,0,
        0,291,74,1,0,0,0,292,296,3,83,39,0,293,296,3,81,38,0,294,296,7,19,
        0,0,295,292,1,0,0,0,295,293,1,0,0,0,295,294,1,0,0,0,296,76,1,0,0,
        0,297,298,7,20,0,0,298,78,1,0,0,0,299,300,5,37,0,0,300,301,3,85,
        40,0,301,302,3,85,40,0,302,80,1,0,0,0,303,304,7,21,0,0,304,82,1,
        0,0,0,305,306,7,22,0,0,306,84,1,0,0,0,307,308,7,23,0,0,308,86,1,
        0,0,0,309,310,2,255,65535,0,310,88,1,0,0,0,311,320,5,34,0,0,312,
        319,8,24,0,0,313,316,5,92,0,0,314,317,5,10,0,0,315,317,9,0,0,0,316,
        314,1,0,0,0,316,315,1,0,0,0,317,319,1,0,0,0,318,312,1,0,0,0,318,
        313,1,0,0,0,319,322,1,0,0,0,320,318,1,0,0,0,320,321,1,0,0,0,321,
        323,1,0,0,0,322,320,1,0,0,0,323,324,5,34,0,0,324,90,1,0,0,0,325,
        337,5,39,0,0,326,336,8,25,0,0,327,333,5,92,0,0,328,330,5,13,0,0,
        329,328,1,0,0,0,329,330,1,0,0,0,330,331,1,0,0,0,331,334,5,10,0,0,
        332,334,9,0,0,0,333,329,1,0,0,0,333,332,1,0,0,0,334,336,1,0,0,0,
        335,326,1,0,0,0,335,327,1,0,0,0,336,339,1,0,0,0,337,335,1,0,0,0,
        337,338,1,0,0,0,338,340,1,0,0,0,339,337,1,0,0,0,340,341,5,39,0,0,
        341,92,1,0,0,0,342,344,9,0,0,0,343,342,1,0,0,0,344,347,1,0,0,0,345,
        346,1,0,0,0,345,343,1,0,0,0,346,352,1,0,0,0,347,345,1,0,0,0,348,
        349,5,10,0,0,349,350,5,37,0,0,350,353,5,125,0,0,351,353,5,0,0,1,
        352,348,1,0,0,0,352,351,1,0,0,0,353,354,1,0,0,0,354,355,6,44,5,0,
        355,94,1,0,0,0,356,358,9,0,0,0,357,356,1,0,0,0,358,361,1,0,0,0,359,
        360,1,0,0,0,359,357,1,0,0,0,360,362,1,0,0,0,361,359,1,0,0,0,362,
        363,7,1,0,0,363,364,7,17,0,0,364,365,7,13,0,0,365,366,7,16,0,0,366,
        368,1,0,0,0,367,369,7,0,0,0,368,367,1,0,0,0,369,370,1,0,0,0,370,
        368,1,0,0,0,370,371,1,0,0,0,371,372,1,0,0,0,372,373,7,16,0,0,373,
        374,7,26,0,0,374,375,7,26,0,0,375,376,1,0,0,0,376,377,6,45,5,0,377,
        96,1,0,0,0,378,380,7,0,0,0,379,378,1,0,0,0,380,381,1,0,0,0,381,379,
        1,0,0,0,381,382,1,0,0,0,382,383,1,0,0,0,383,384,6,46,0,0,384,98,
        1,0,0,0,385,386,5,123,0,0,386,387,5,37,0,0,387,100,1,0,0,0,388,389,
        5,37,0,0,389,390,5,125,0,0,390,102,1,0,0,0,391,395,3,99,47,0,392,
        394,9,0,0,0,393,392,1,0,0,0,394,397,1,0,0,0,395,396,1,0,0,0,395,
        393,1,0,0,0,396,398,1,0,0,0,397,395,1,0,0,0,398,399,3,101,48,0,399,
        400,1,0,0,0,400,401,6,49,5,0,401,104,1,0,0,0,402,404,7,0,0,0,403,
        402,1,0,0,0,404,405,1,0,0,0,405,403,1,0,0,0,405,406,1,0,0,0,406,
        407,1,0,0,0,407,408,6,50,0,0,408,106,1,0,0,0,409,410,7,9,0,0,410,
        411,7,10,0,0,411,412,7,6,0,0,412,413,7,27,0,0,413,414,7,3,0,0,414,
        425,7,14,0,0,415,416,7,28,0,0,416,417,7,8,0,0,417,425,7,9,0,0,418,
        419,7,18,0,0,419,420,7,11,0,0,420,421,7,3,0,0,421,422,7,15,0,0,422,
        423,7,1,0,0,423,425,7,11,0,0,424,409,1,0,0,0,424,415,1,0,0,0,424,
        418,1,0,0,0,425,108,1,0,0,0,426,427,3,73,34,0,427,110,1,0,0,0,428,
        429,3,5,0,0,429,430,1,0,0,0,430,431,6,53,5,0,431,112,1,0,0,0,29,
        0,1,2,3,4,144,233,238,269,274,280,288,290,295,316,318,320,329,333,
        335,337,345,352,359,370,381,395,405,424,6,0,1,0,5,2,0,5,1,0,5,3,
        0,5,4,0,4,0,0
    ]

class BaseLexer(Lexer):

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    HINT_CHANNEL = 2
    COMMENT_CHANNEL = 3
    SQLSTATEMENT_CHANNEL = 4

    ScriptMode = 1
    EchoMode = 2
    AssertMode = 3
    LoadMode = 4

    CRLF = 1
    COMMA = 2
    SEMICOLON = 3
    COLON = 4
    AT = 5
    DOT = 6
    SLASH = 7
    BRACKET_OPEN = 8
    BRACKET_CLOSE = 9
    SQUARE_OPEN = 10
    SQUARE_CLOSE = 11
    DOUBLE_QUOTE = 12
    SINGLE_QUOTE = 13
    ESCAPE = 14
    SPACE = 15
    EXIT = 16
    QUIT = 17
    USE = 18
    API = 19
    SQL = 20
    START = 21
    WHENEVER_ERROR = 22
    CONTINUE = 23
    LOOP = 24
    SPOOL = 25
    END = 26
    SET = 27
    SLEEP = 28
    ECHO_OPEN = 29
    SCRIPT_OPEN = 30
    ASSERT = 31
    LOAD = 32
    INT = 33
    DECIMAL = 34
    String = 35
    ScriptBlock = 36
    EchoBlock = 37
    ASSERT_SPACE = 38
    ASSERT_OPEN = 39
    ASSERT_CLOSE = 40
    ASSERT_EXPRESSION = 41
    LOAD_SPACE = 42
    LOAD_OPTION = 43
    LOAD_EXPRESSION = 44
    LOAD_CRLF = 45

    channelNames = [ u"DEFAULT_TOKEN_CHANNEL", u"HIDDEN", u"HINT_CHANNEL", 
                                                          u"COMMENT_CHANNEL", 
                                                          u"SQLSTATEMENT_CHANNEL" ]

    modeNames = [ "DEFAULT_MODE", "ScriptMode", "EchoMode", "AssertMode", 
                  "LoadMode" ]

    literalNames = [ "<INVALID>",
            "'\\n'", "','", "';'", "':'", "'@'", "'.'", "'/'", "'('", "')'", 
            "'['", "']'", "'\"'", "'''", "'\\'", "'EXIT'", "'QUIT'", "'USE'", 
            "'API'", "'SQL'", "'START'", "'WHENEVER_ERROR'", "'CONTINUE'", 
            "'LOOP'", "'SPOOL'", "'END'", "'SET'", "'SLEEP'", "'> {%'", 
            "'ASSERT'", "'_LOAD'", "'{%'", "'%}'" ]

    symbolicNames = [ "<INVALID>",
            "CRLF", "COMMA", "SEMICOLON", "COLON", "AT", "DOT", "SLASH", 
            "BRACKET_OPEN", "BRACKET_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", 
            "DOUBLE_QUOTE", "SINGLE_QUOTE", "ESCAPE", "SPACE", "EXIT", "QUIT", 
            "USE", "API", "SQL", "START", "WHENEVER_ERROR", "CONTINUE", 
            "LOOP", "SPOOL", "END", "SET", "SLEEP", "ECHO_OPEN", "SCRIPT_OPEN", 
            "ASSERT", "LOAD", "INT", "DECIMAL", "String", "ScriptBlock", 
            "EchoBlock", "ASSERT_SPACE", "ASSERT_OPEN", "ASSERT_CLOSE", 
            "ASSERT_EXPRESSION", "LOAD_SPACE", "LOAD_OPTION", "LOAD_EXPRESSION", 
            "LOAD_CRLF" ]

    ruleNames = [ "CRLF", "COMMA", "SEMICOLON", "COLON", "AT", "DOT", "SLASH", 
                  "BRACKET_OPEN", "BRACKET_CLOSE", "SQUARE_OPEN", "SQUARE_CLOSE", 
                  "DOUBLE_QUOTE", "SINGLE_QUOTE", "ESCAPE", "SPACE", "EXIT", 
                  "QUIT", "USE", "API", "SQL", "START", "WHENEVER_ERROR", 
                  "CONTINUE", "LOOP", "SPOOL", "END", "SET", "SLEEP", "ECHO_OPEN", 
                  "SCRIPT_OPEN", "ASSERT", "LOAD", "INT", "DECIMAL", "String", 
                  "UNRESERVED", "SUBDELIMS", "PCTENCODED", "DIGIT", "ALPHA", 
                  "HEX", "OBS_TEXT", "DoubleQuoteString", "SingleQuoteString", 
                  "ScriptBlock", "EchoBlock", "ASSERT_SPACE", "ASSERT_OPEN", 
                  "ASSERT_CLOSE", "ASSERT_EXPRESSION", "LOAD_SPACE", "LOAD_OPTION", 
                  "LOAD_EXPRESSION", "LOAD_CRLF" ]

    grammarFileName = "BaseLexer.g4"

    def __init__(self, input=None, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = LexerATNSimulator(self, self.atn, self.decisionsToDFA, PredictionContextCache())
        self._actions = None
        self._predicates = None


