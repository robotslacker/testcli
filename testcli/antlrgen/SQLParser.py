# Generated from SQLParser.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,273,753,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,1,1,3,1,120,
        8,1,1,2,1,2,3,2,124,8,2,1,2,3,2,127,8,2,1,3,1,3,1,3,1,3,1,4,1,4,
        1,4,3,4,136,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,145,8,4,1,4,1,4,
        1,4,3,4,150,8,4,1,4,1,4,3,4,154,8,4,3,4,156,8,4,1,4,1,4,3,4,160,
        8,4,1,5,1,5,1,5,3,5,165,8,5,1,6,1,6,1,7,1,7,1,8,1,8,1,9,1,9,1,10,
        1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,3,13,184,8,13,1,14,1,14,
        1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,18,4,18,199,
        8,18,11,18,12,18,200,3,18,203,8,18,1,19,1,19,1,19,5,19,208,8,19,
        10,19,12,19,211,9,19,1,19,3,19,214,8,19,1,20,1,20,1,20,3,20,219,
        8,20,1,20,3,20,222,8,20,1,20,3,20,225,8,20,1,21,4,21,228,8,21,11,
        21,12,21,229,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,3,
        22,242,8,22,1,23,1,23,1,23,3,23,247,8,23,1,24,1,24,1,24,3,24,252,
        8,24,1,25,1,25,1,25,3,25,257,8,25,1,26,1,26,1,26,3,26,262,8,26,1,
        27,1,27,1,27,3,27,267,8,27,1,28,1,28,1,28,3,28,272,8,28,1,29,1,29,
        1,29,3,29,277,8,29,1,30,1,30,1,30,3,30,282,8,30,1,31,1,31,1,31,3,
        31,287,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,
        32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,3,32,311,
        8,32,1,33,1,33,3,33,315,8,33,1,33,3,33,318,8,33,1,33,3,33,321,8,
        33,1,34,1,34,3,34,325,8,34,1,34,3,34,328,8,34,1,34,3,34,331,8,34,
        1,35,1,35,1,35,3,35,336,8,35,1,35,3,35,339,8,35,1,36,1,36,1,36,3,
        36,344,8,36,1,36,3,36,347,8,36,1,37,1,37,4,37,351,8,37,11,37,12,
        37,352,1,37,3,37,356,8,37,1,37,3,37,359,8,37,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,
        1,38,1,38,1,38,1,38,5,38,382,8,38,10,38,12,38,385,9,38,3,38,387,
        8,38,1,38,3,38,390,8,38,1,38,3,38,393,8,38,1,39,1,39,1,39,3,39,398,
        8,39,1,39,3,39,401,8,39,1,39,3,39,404,8,39,1,39,3,39,407,8,39,1,
        40,1,40,1,40,3,40,412,8,40,1,40,3,40,415,8,40,1,41,1,41,1,41,1,41,
        1,41,1,41,1,41,1,41,3,41,425,8,41,1,41,1,41,1,41,1,41,3,41,431,8,
        41,1,41,3,41,434,8,41,1,41,3,41,437,8,41,1,42,1,42,1,42,3,42,442,
        8,42,1,42,3,42,445,8,42,1,43,1,43,3,43,449,8,43,1,43,3,43,452,8,
        43,1,44,1,44,1,44,1,44,1,44,3,44,459,8,44,1,44,3,44,462,8,44,1,44,
        3,44,465,8,44,1,45,1,45,1,45,3,45,470,8,45,1,45,3,45,473,8,45,1,
        46,1,46,1,46,3,46,478,8,46,1,47,1,47,1,47,3,47,483,8,47,1,48,1,48,
        5,48,487,8,48,10,48,12,48,490,9,48,1,48,3,48,493,8,48,1,48,3,48,
        496,8,48,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,3,49,513,8,49,1,49,1,49,4,49,517,8,49,11,49,
        12,49,518,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,556,
        8,49,3,49,558,8,49,1,49,3,49,561,8,49,1,49,3,49,564,8,49,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,3,50,574,8,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,
        50,1,50,1,50,1,50,1,50,4,50,597,8,50,11,50,12,50,598,1,50,1,50,1,
        50,1,50,1,50,5,50,606,8,50,10,50,12,50,609,9,50,3,50,611,8,50,1,
        50,3,50,614,8,50,1,50,3,50,617,8,50,1,51,1,51,1,51,1,51,5,51,623,
        8,51,10,51,12,51,626,9,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        1,51,1,51,1,51,5,51,639,8,51,10,51,12,51,642,9,51,1,51,1,51,1,51,
        4,51,647,8,51,11,51,12,51,648,1,51,1,51,1,51,1,51,1,51,1,51,1,51,
        3,51,658,8,51,1,51,3,51,661,8,51,1,51,3,51,664,8,51,1,52,1,52,1,
        52,1,52,1,52,1,52,3,52,672,8,52,1,52,1,52,1,52,1,52,1,52,1,52,3,
        52,680,8,52,1,52,1,52,3,52,684,8,52,1,52,1,52,1,52,1,52,1,52,1,52,
        1,52,1,52,1,52,1,52,3,52,696,8,52,3,52,698,8,52,1,52,3,52,701,8,
        52,1,53,1,53,3,53,705,8,53,1,53,3,53,708,8,53,1,53,3,53,711,8,53,
        1,54,1,54,1,54,1,54,1,54,3,54,718,8,54,1,54,1,54,1,54,1,54,1,54,
        3,54,725,8,54,1,54,1,54,1,54,4,54,730,8,54,11,54,12,54,731,1,54,
        1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,745,8,54,
        1,54,3,54,748,8,54,1,54,3,54,751,8,54,1,54,0,0,55,0,2,4,6,8,10,12,
        14,16,18,20,22,24,26,28,30,32,34,36,38,40,42,44,46,48,50,52,54,56,
        58,60,62,64,66,68,70,72,74,76,78,80,82,84,86,88,90,92,94,96,98,100,
        102,104,106,108,0,14,1,0,59,60,2,0,69,70,72,72,1,0,79,83,3,0,20,
        20,22,30,56,56,1,0,11,12,1,0,158,159,2,0,150,150,152,152,1,1,17,
        17,1,0,204,205,2,0,214,215,218,223,1,0,227,228,1,0,225,226,1,0,234,
        235,1,0,232,233,878,0,110,1,0,0,0,2,119,1,0,0,0,4,123,1,0,0,0,6,
        128,1,0,0,0,8,132,1,0,0,0,10,161,1,0,0,0,12,166,1,0,0,0,14,168,1,
        0,0,0,16,170,1,0,0,0,18,172,1,0,0,0,20,174,1,0,0,0,22,176,1,0,0,
        0,24,178,1,0,0,0,26,180,1,0,0,0,28,185,1,0,0,0,30,187,1,0,0,0,32,
        189,1,0,0,0,34,191,1,0,0,0,36,195,1,0,0,0,38,204,1,0,0,0,40,215,
        1,0,0,0,42,227,1,0,0,0,44,241,1,0,0,0,46,243,1,0,0,0,48,248,1,0,
        0,0,50,253,1,0,0,0,52,258,1,0,0,0,54,263,1,0,0,0,56,268,1,0,0,0,
        58,273,1,0,0,0,60,278,1,0,0,0,62,283,1,0,0,0,64,310,1,0,0,0,66,312,
        1,0,0,0,68,322,1,0,0,0,70,332,1,0,0,0,72,340,1,0,0,0,74,348,1,0,
        0,0,76,360,1,0,0,0,78,394,1,0,0,0,80,408,1,0,0,0,82,416,1,0,0,0,
        84,438,1,0,0,0,86,446,1,0,0,0,88,453,1,0,0,0,90,466,1,0,0,0,92,474,
        1,0,0,0,94,479,1,0,0,0,96,484,1,0,0,0,98,497,1,0,0,0,100,565,1,0,
        0,0,102,618,1,0,0,0,104,665,1,0,0,0,106,702,1,0,0,0,108,712,1,0,
        0,0,110,111,3,2,1,0,111,112,5,0,0,1,112,1,1,0,0,0,113,120,3,64,32,
        0,114,120,3,38,19,0,115,120,3,40,20,0,116,120,3,4,2,0,117,120,3,
        44,22,0,118,120,5,0,0,1,119,113,1,0,0,0,119,114,1,0,0,0,119,115,
        1,0,0,0,119,116,1,0,0,0,119,117,1,0,0,0,119,118,1,0,0,0,120,3,1,
        0,0,0,121,124,3,8,4,0,122,124,3,6,3,0,123,121,1,0,0,0,123,122,1,
        0,0,0,124,126,1,0,0,0,125,127,5,67,0,0,126,125,1,0,0,0,126,127,1,
        0,0,0,127,5,1,0,0,0,128,129,5,1,0,0,129,130,5,59,0,0,130,131,3,28,
        14,0,131,7,1,0,0,0,132,133,5,1,0,0,133,135,3,10,5,0,134,136,5,58,
        0,0,135,134,1,0,0,0,135,136,1,0,0,0,136,155,1,0,0,0,137,138,3,12,
        6,0,138,139,5,60,0,0,139,140,3,14,7,0,140,144,5,60,0,0,141,142,3,
        16,8,0,142,143,5,60,0,0,143,145,1,0,0,0,144,141,1,0,0,0,144,145,
        1,0,0,0,145,146,1,0,0,0,146,147,5,64,0,0,147,149,3,18,9,0,148,150,
        3,24,12,0,149,148,1,0,0,0,149,150,1,0,0,0,150,153,1,0,0,0,151,152,
        7,0,0,0,152,154,3,26,13,0,153,151,1,0,0,0,153,154,1,0,0,0,154,156,
        1,0,0,0,155,137,1,0,0,0,155,156,1,0,0,0,156,159,1,0,0,0,157,158,
        5,61,0,0,158,160,3,36,18,0,159,157,1,0,0,0,159,160,1,0,0,0,160,9,
        1,0,0,0,161,164,3,20,10,0,162,163,5,59,0,0,163,165,3,22,11,0,164,
        162,1,0,0,0,164,165,1,0,0,0,165,11,1,0,0,0,166,167,5,68,0,0,167,
        13,1,0,0,0,168,169,5,72,0,0,169,15,1,0,0,0,170,171,5,72,0,0,171,
        17,1,0,0,0,172,173,7,1,0,0,173,19,1,0,0,0,174,175,5,72,0,0,175,21,
        1,0,0,0,176,177,5,72,0,0,177,23,1,0,0,0,178,179,5,71,0,0,179,25,
        1,0,0,0,180,183,5,72,0,0,181,182,5,60,0,0,182,184,5,72,0,0,183,181,
        1,0,0,0,183,184,1,0,0,0,184,27,1,0,0,0,185,186,5,72,0,0,186,29,1,
        0,0,0,187,188,5,72,0,0,188,31,1,0,0,0,189,190,5,72,0,0,190,33,1,
        0,0,0,191,192,3,30,15,0,192,193,5,65,0,0,193,194,3,32,16,0,194,35,
        1,0,0,0,195,202,3,34,17,0,196,197,5,66,0,0,197,199,3,34,17,0,198,
        196,1,0,0,0,199,200,1,0,0,0,200,198,1,0,0,0,200,201,1,0,0,0,201,
        203,1,0,0,0,202,198,1,0,0,0,202,203,1,0,0,0,203,37,1,0,0,0,204,209,
        5,3,0,0,205,208,3,42,21,0,206,208,5,54,0,0,207,205,1,0,0,0,207,206,
        1,0,0,0,208,211,1,0,0,0,209,207,1,0,0,0,209,210,1,0,0,0,210,213,
        1,0,0,0,211,209,1,0,0,0,212,214,5,17,0,0,213,212,1,0,0,0,213,214,
        1,0,0,0,214,39,1,0,0,0,215,216,5,2,0,0,216,218,7,2,0,0,217,219,5,
        84,0,0,218,217,1,0,0,0,218,219,1,0,0,0,219,221,1,0,0,0,220,222,5,
        85,0,0,221,220,1,0,0,0,221,222,1,0,0,0,222,224,1,0,0,0,223,225,5,
        17,0,0,224,223,1,0,0,0,224,225,1,0,0,0,225,41,1,0,0,0,226,228,7,
        3,0,0,227,226,1,0,0,0,228,229,1,0,0,0,229,227,1,0,0,0,229,230,1,
        0,0,0,230,43,1,0,0,0,231,242,3,46,23,0,232,242,3,48,24,0,233,242,
        3,50,25,0,234,242,3,52,26,0,235,242,3,54,27,0,236,242,3,56,28,0,
        237,242,3,60,30,0,238,242,3,58,29,0,239,242,3,62,31,0,240,242,5,
        17,0,0,241,231,1,0,0,0,241,232,1,0,0,0,241,233,1,0,0,0,241,234,1,
        0,0,0,241,235,1,0,0,0,241,236,1,0,0,0,241,237,1,0,0,0,241,238,1,
        0,0,0,241,239,1,0,0,0,241,240,1,0,0,0,242,45,1,0,0,0,243,244,5,5,
        0,0,244,246,5,88,0,0,245,247,5,17,0,0,246,245,1,0,0,0,246,247,1,
        0,0,0,247,47,1,0,0,0,248,249,5,10,0,0,249,251,5,88,0,0,250,252,5,
        17,0,0,251,250,1,0,0,0,251,252,1,0,0,0,252,49,1,0,0,0,253,254,5,
        6,0,0,254,256,5,88,0,0,255,257,5,17,0,0,256,255,1,0,0,0,256,257,
        1,0,0,0,257,51,1,0,0,0,258,259,5,7,0,0,259,261,5,88,0,0,260,262,
        5,17,0,0,261,260,1,0,0,0,261,262,1,0,0,0,262,53,1,0,0,0,263,264,
        5,9,0,0,264,266,5,88,0,0,265,267,5,17,0,0,266,265,1,0,0,0,266,267,
        1,0,0,0,267,55,1,0,0,0,268,269,5,8,0,0,269,271,5,88,0,0,270,272,
        5,17,0,0,271,270,1,0,0,0,271,272,1,0,0,0,272,57,1,0,0,0,273,274,
        5,13,0,0,274,276,5,88,0,0,275,277,5,17,0,0,276,275,1,0,0,0,276,277,
        1,0,0,0,277,59,1,0,0,0,278,279,7,4,0,0,279,281,5,93,0,0,280,282,
        5,17,0,0,281,280,1,0,0,0,281,282,1,0,0,0,282,61,1,0,0,0,283,284,
        5,16,0,0,284,286,5,93,0,0,285,287,5,17,0,0,286,285,1,0,0,0,286,287,
        1,0,0,0,287,63,1,0,0,0,288,311,3,78,39,0,289,311,3,76,38,0,290,311,
        3,80,40,0,291,311,3,74,37,0,292,311,3,82,41,0,293,311,3,84,42,0,
        294,311,3,86,43,0,295,311,3,88,44,0,296,311,3,96,48,0,297,311,3,
        70,35,0,298,311,3,66,33,0,299,311,3,68,34,0,300,311,3,72,36,0,301,
        311,3,90,45,0,302,311,3,94,47,0,303,311,3,92,46,0,304,311,3,98,49,
        0,305,311,3,100,50,0,306,311,3,102,51,0,307,311,3,104,52,0,308,311,
        3,106,53,0,309,311,3,108,54,0,310,288,1,0,0,0,310,289,1,0,0,0,310,
        290,1,0,0,0,310,291,1,0,0,0,310,292,1,0,0,0,310,293,1,0,0,0,310,
        294,1,0,0,0,310,295,1,0,0,0,310,296,1,0,0,0,310,297,1,0,0,0,310,
        298,1,0,0,0,310,299,1,0,0,0,310,300,1,0,0,0,310,301,1,0,0,0,310,
        302,1,0,0,0,310,303,1,0,0,0,310,304,1,0,0,0,310,305,1,0,0,0,310,
        306,1,0,0,0,310,307,1,0,0,0,310,308,1,0,0,0,310,309,1,0,0,0,311,
        65,1,0,0,0,312,314,5,32,0,0,313,315,5,54,0,0,314,313,1,0,0,0,314,
        315,1,0,0,0,315,317,1,0,0,0,316,318,5,19,0,0,317,316,1,0,0,0,317,
        318,1,0,0,0,318,320,1,0,0,0,319,321,5,17,0,0,320,319,1,0,0,0,320,
        321,1,0,0,0,321,67,1,0,0,0,322,324,5,33,0,0,323,325,5,54,0,0,324,
        323,1,0,0,0,324,325,1,0,0,0,325,327,1,0,0,0,326,328,5,19,0,0,327,
        326,1,0,0,0,327,328,1,0,0,0,328,330,1,0,0,0,329,331,5,17,0,0,330,
        329,1,0,0,0,330,331,1,0,0,0,331,69,1,0,0,0,332,333,5,35,0,0,333,
        335,7,5,0,0,334,336,5,161,0,0,335,334,1,0,0,0,335,336,1,0,0,0,336,
        338,1,0,0,0,337,339,5,17,0,0,338,337,1,0,0,0,338,339,1,0,0,0,339,
        71,1,0,0,0,340,341,5,34,0,0,341,343,5,54,0,0,342,344,5,19,0,0,343,
        342,1,0,0,0,343,344,1,0,0,0,344,346,1,0,0,0,345,347,5,17,0,0,346,
        345,1,0,0,0,346,347,1,0,0,0,347,73,1,0,0,0,348,350,5,39,0,0,349,
        351,5,120,0,0,350,349,1,0,0,0,351,352,1,0,0,0,352,350,1,0,0,0,352,
        353,1,0,0,0,353,355,1,0,0,0,354,356,5,19,0,0,355,354,1,0,0,0,355,
        356,1,0,0,0,356,358,1,0,0,0,357,359,5,17,0,0,358,357,1,0,0,0,358,
        359,1,0,0,0,359,75,1,0,0,0,360,386,5,40,0,0,361,362,5,108,0,0,362,
        387,5,116,0,0,363,364,5,109,0,0,364,387,5,116,0,0,365,383,5,110,
        0,0,366,367,5,112,0,0,367,368,5,107,0,0,368,382,5,116,0,0,369,370,
        5,111,0,0,370,371,5,107,0,0,371,382,5,116,0,0,372,373,5,113,0,0,
        373,374,5,107,0,0,374,382,5,116,0,0,375,376,5,114,0,0,376,377,5,
        107,0,0,377,382,5,116,0,0,378,379,5,115,0,0,379,380,5,107,0,0,380,
        382,5,116,0,0,381,366,1,0,0,0,381,369,1,0,0,0,381,372,1,0,0,0,381,
        375,1,0,0,0,381,378,1,0,0,0,382,385,1,0,0,0,383,381,1,0,0,0,383,
        384,1,0,0,0,384,387,1,0,0,0,385,383,1,0,0,0,386,361,1,0,0,0,386,
        363,1,0,0,0,386,365,1,0,0,0,387,389,1,0,0,0,388,390,5,117,0,0,389,
        388,1,0,0,0,389,390,1,0,0,0,390,392,1,0,0,0,391,393,5,17,0,0,392,
        391,1,0,0,0,392,393,1,0,0,0,393,77,1,0,0,0,394,395,5,38,0,0,395,
        400,5,102,0,0,396,398,5,104,0,0,397,396,1,0,0,0,397,398,1,0,0,0,
        398,399,1,0,0,0,399,401,5,103,0,0,400,397,1,0,0,0,400,401,1,0,0,
        0,401,403,1,0,0,0,402,404,5,105,0,0,403,402,1,0,0,0,403,404,1,0,
        0,0,404,406,1,0,0,0,405,407,5,17,0,0,406,405,1,0,0,0,406,407,1,0,
        0,0,407,79,1,0,0,0,408,409,5,41,0,0,409,411,5,123,0,0,410,412,5,
        19,0,0,411,410,1,0,0,0,411,412,1,0,0,0,412,414,1,0,0,0,413,415,5,
        17,0,0,414,413,1,0,0,0,414,415,1,0,0,0,415,81,1,0,0,0,416,430,5,
        47,0,0,417,431,5,137,0,0,418,431,5,138,0,0,419,431,5,139,0,0,420,
        421,5,131,0,0,421,422,5,132,0,0,422,431,5,140,0,0,423,425,5,134,
        0,0,424,423,1,0,0,0,424,425,1,0,0,0,425,426,1,0,0,0,426,427,5,132,
        0,0,427,428,5,140,0,0,428,429,5,133,0,0,429,431,5,134,0,0,430,417,
        1,0,0,0,430,418,1,0,0,0,430,419,1,0,0,0,430,420,1,0,0,0,430,424,
        1,0,0,0,431,433,1,0,0,0,432,434,5,129,0,0,433,432,1,0,0,0,433,434,
        1,0,0,0,434,436,1,0,0,0,435,437,5,17,0,0,436,435,1,0,0,0,436,437,
        1,0,0,0,437,83,1,0,0,0,438,439,5,43,0,0,439,441,5,128,0,0,440,442,
        5,19,0,0,441,440,1,0,0,0,441,442,1,0,0,0,442,444,1,0,0,0,443,445,
        5,17,0,0,444,443,1,0,0,0,444,445,1,0,0,0,445,85,1,0,0,0,446,448,
        5,44,0,0,447,449,5,19,0,0,448,447,1,0,0,0,448,449,1,0,0,0,449,451,
        1,0,0,0,450,452,5,17,0,0,451,450,1,0,0,0,451,452,1,0,0,0,452,87,
        1,0,0,0,453,454,5,48,0,0,454,458,5,144,0,0,455,459,5,146,0,0,456,
        457,5,147,0,0,457,459,5,143,0,0,458,455,1,0,0,0,458,456,1,0,0,0,
        459,461,1,0,0,0,460,462,5,145,0,0,461,460,1,0,0,0,461,462,1,0,0,
        0,462,464,1,0,0,0,463,465,5,17,0,0,464,463,1,0,0,0,464,465,1,0,0,
        0,465,89,1,0,0,0,466,467,5,46,0,0,467,469,7,6,0,0,468,470,5,151,
        0,0,469,468,1,0,0,0,469,470,1,0,0,0,470,472,1,0,0,0,471,473,5,153,
        0,0,472,471,1,0,0,0,472,473,1,0,0,0,473,91,1,0,0,0,474,475,5,36,
        0,0,475,477,5,97,0,0,476,478,7,7,0,0,477,476,1,0,0,0,477,478,1,0,
        0,0,478,93,1,0,0,0,479,480,5,37,0,0,480,482,5,96,0,0,481,483,5,17,
        0,0,482,481,1,0,0,0,482,483,1,0,0,0,483,95,1,0,0,0,484,488,5,45,
        0,0,485,487,5,155,0,0,486,485,1,0,0,0,487,490,1,0,0,0,488,486,1,
        0,0,0,488,489,1,0,0,0,489,492,1,0,0,0,490,488,1,0,0,0,491,493,5,
        156,0,0,492,491,1,0,0,0,492,493,1,0,0,0,493,495,1,0,0,0,494,496,
        5,17,0,0,495,494,1,0,0,0,495,496,1,0,0,0,496,97,1,0,0,0,497,557,
        5,49,0,0,498,499,5,163,0,0,499,500,5,187,0,0,500,501,5,164,0,0,501,
        502,5,165,0,0,502,503,5,187,0,0,503,504,5,166,0,0,504,558,5,187,
        0,0,505,506,5,163,0,0,506,507,5,187,0,0,507,508,5,164,0,0,508,509,
        5,165,0,0,509,512,5,187,0,0,510,511,5,167,0,0,511,513,5,187,0,0,
        512,510,1,0,0,0,512,513,1,0,0,0,513,558,1,0,0,0,514,516,5,168,0,
        0,515,517,5,187,0,0,516,515,1,0,0,0,517,518,1,0,0,0,518,516,1,0,
        0,0,518,519,1,0,0,0,519,558,1,0,0,0,520,558,5,169,0,0,521,522,5,
        170,0,0,522,558,5,187,0,0,523,524,5,171,0,0,524,558,5,187,0,0,525,
        555,5,172,0,0,526,527,5,173,0,0,527,528,5,187,0,0,528,556,5,54,0,
        0,529,556,5,174,0,0,530,531,5,175,0,0,531,556,5,187,0,0,532,533,
        5,176,0,0,533,534,5,187,0,0,534,535,5,54,0,0,535,556,5,54,0,0,536,
        537,5,177,0,0,537,538,5,187,0,0,538,556,5,54,0,0,539,540,5,178,0,
        0,540,541,5,187,0,0,541,556,5,187,0,0,542,543,5,179,0,0,543,544,
        5,187,0,0,544,556,5,187,0,0,545,546,5,180,0,0,546,556,5,187,0,0,
        547,548,5,181,0,0,548,549,5,187,0,0,549,556,5,187,0,0,550,551,5,
        182,0,0,551,556,5,187,0,0,552,553,5,183,0,0,553,554,5,187,0,0,554,
        556,5,54,0,0,555,526,1,0,0,0,555,529,1,0,0,0,555,530,1,0,0,0,555,
        532,1,0,0,0,555,536,1,0,0,0,555,539,1,0,0,0,555,542,1,0,0,0,555,
        545,1,0,0,0,555,547,1,0,0,0,555,550,1,0,0,0,555,552,1,0,0,0,556,
        558,1,0,0,0,557,498,1,0,0,0,557,505,1,0,0,0,557,514,1,0,0,0,557,
        520,1,0,0,0,557,521,1,0,0,0,557,523,1,0,0,0,557,525,1,0,0,0,558,
        560,1,0,0,0,559,561,5,185,0,0,560,559,1,0,0,0,560,561,1,0,0,0,561,
        563,1,0,0,0,562,564,5,17,0,0,563,562,1,0,0,0,563,564,1,0,0,0,564,
        99,1,0,0,0,565,610,5,50,0,0,566,567,5,203,0,0,567,611,7,8,0,0,568,
        569,5,196,0,0,569,573,5,207,0,0,570,571,5,207,0,0,571,572,5,190,
        0,0,572,574,5,207,0,0,573,570,1,0,0,0,573,574,1,0,0,0,574,611,1,
        0,0,0,575,576,5,193,0,0,576,611,5,207,0,0,577,578,5,198,0,0,578,
        611,5,207,0,0,579,580,5,197,0,0,580,611,5,207,0,0,581,582,5,199,
        0,0,582,611,5,207,0,0,583,584,5,195,0,0,584,611,5,207,0,0,585,586,
        5,201,0,0,586,611,5,202,0,0,587,588,5,200,0,0,588,589,5,202,0,0,
        589,590,5,206,0,0,590,611,5,207,0,0,591,592,5,194,0,0,592,596,5,
        207,0,0,593,594,5,207,0,0,594,595,5,190,0,0,595,597,5,207,0,0,596,
        593,1,0,0,0,597,598,1,0,0,0,598,596,1,0,0,0,598,599,1,0,0,0,599,
        611,1,0,0,0,600,601,5,192,0,0,601,607,5,207,0,0,602,603,5,207,0,
        0,603,604,5,190,0,0,604,606,5,207,0,0,605,602,1,0,0,0,606,609,1,
        0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,611,1,0,0,0,609,607,1,
        0,0,0,610,566,1,0,0,0,610,568,1,0,0,0,610,575,1,0,0,0,610,577,1,
        0,0,0,610,579,1,0,0,0,610,581,1,0,0,0,610,583,1,0,0,0,610,585,1,
        0,0,0,610,587,1,0,0,0,610,591,1,0,0,0,610,600,1,0,0,0,611,613,1,
        0,0,0,612,614,5,189,0,0,613,612,1,0,0,0,613,614,1,0,0,0,614,616,
        1,0,0,0,615,617,5,17,0,0,616,615,1,0,0,0,616,617,1,0,0,0,617,101,
        1,0,0,0,618,657,5,51,0,0,619,620,5,236,0,0,620,624,5,236,0,0,621,
        623,7,9,0,0,622,621,1,0,0,0,623,626,1,0,0,0,624,622,1,0,0,0,624,
        625,1,0,0,0,625,658,1,0,0,0,626,624,1,0,0,0,627,628,7,10,0,0,628,
        658,5,236,0,0,629,630,5,216,0,0,630,631,5,236,0,0,631,632,5,210,
        0,0,632,658,5,236,0,0,633,634,5,217,0,0,634,658,5,236,0,0,635,658,
        5,229,0,0,636,640,5,212,0,0,637,639,7,9,0,0,638,637,1,0,0,0,639,
        642,1,0,0,0,640,638,1,0,0,0,640,641,1,0,0,0,641,658,1,0,0,0,642,
        640,1,0,0,0,643,644,5,212,0,0,644,646,5,224,0,0,645,647,7,11,0,0,
        646,645,1,0,0,0,647,648,1,0,0,0,648,646,1,0,0,0,648,649,1,0,0,0,
        649,658,1,0,0,0,650,651,5,212,0,0,651,652,5,230,0,0,652,658,7,12,
        0,0,653,654,5,212,0,0,654,655,7,13,0,0,655,656,5,231,0,0,656,658,
        5,236,0,0,657,619,1,0,0,0,657,627,1,0,0,0,657,629,1,0,0,0,657,633,
        1,0,0,0,657,635,1,0,0,0,657,636,1,0,0,0,657,643,1,0,0,0,657,650,
        1,0,0,0,657,653,1,0,0,0,658,660,1,0,0,0,659,661,5,209,0,0,660,659,
        1,0,0,0,660,661,1,0,0,0,661,663,1,0,0,0,662,664,5,17,0,0,663,662,
        1,0,0,0,663,664,1,0,0,0,664,103,1,0,0,0,665,697,5,52,0,0,666,667,
        5,239,0,0,667,668,5,240,0,0,668,669,5,241,0,0,669,671,5,251,0,0,
        670,672,5,238,0,0,671,670,1,0,0,0,671,672,1,0,0,0,672,698,1,0,0,
        0,673,674,5,242,0,0,674,675,5,244,0,0,675,676,5,243,0,0,676,677,
        5,251,0,0,677,679,5,248,0,0,678,680,5,254,0,0,679,678,1,0,0,0,679,
        680,1,0,0,0,680,683,1,0,0,0,681,682,5,245,0,0,682,684,5,246,0,0,
        683,681,1,0,0,0,683,684,1,0,0,0,684,685,1,0,0,0,685,698,5,238,0,
        0,686,687,5,249,0,0,687,688,5,244,0,0,688,689,5,243,0,0,689,690,
        5,251,0,0,690,691,5,250,0,0,691,692,5,244,0,0,692,693,5,243,0,0,
        693,695,5,251,0,0,694,696,5,238,0,0,695,694,1,0,0,0,695,696,1,0,
        0,0,696,698,1,0,0,0,697,666,1,0,0,0,697,673,1,0,0,0,697,686,1,0,
        0,0,698,700,1,0,0,0,699,701,5,17,0,0,700,699,1,0,0,0,700,701,1,0,
        0,0,701,105,1,0,0,0,702,704,5,42,0,0,703,705,5,256,0,0,704,703,1,
        0,0,0,704,705,1,0,0,0,705,707,1,0,0,0,706,708,5,258,0,0,707,706,
        1,0,0,0,707,708,1,0,0,0,708,710,1,0,0,0,709,711,5,17,0,0,710,709,
        1,0,0,0,710,711,1,0,0,0,711,107,1,0,0,0,712,744,5,53,0,0,713,714,
        5,260,0,0,714,717,5,269,0,0,715,716,5,261,0,0,716,718,5,271,0,0,
        717,715,1,0,0,0,717,718,1,0,0,0,718,745,1,0,0,0,719,720,5,260,0,
        0,720,745,5,270,0,0,721,722,5,262,0,0,722,724,5,263,0,0,723,725,
        5,271,0,0,724,723,1,0,0,0,724,725,1,0,0,0,725,729,1,0,0,0,726,727,
        5,271,0,0,727,728,5,264,0,0,728,730,5,271,0,0,729,726,1,0,0,0,730,
        731,1,0,0,0,731,729,1,0,0,0,731,732,1,0,0,0,732,745,1,0,0,0,733,
        734,5,265,0,0,734,735,5,263,0,0,735,745,5,271,0,0,736,737,5,266,
        0,0,737,738,5,263,0,0,738,745,5,271,0,0,739,740,5,267,0,0,740,741,
        5,263,0,0,741,745,5,271,0,0,742,743,5,268,0,0,743,745,5,263,0,0,
        744,713,1,0,0,0,744,719,1,0,0,0,744,721,1,0,0,0,744,733,1,0,0,0,
        744,736,1,0,0,0,744,739,1,0,0,0,744,742,1,0,0,0,745,747,1,0,0,0,
        746,748,5,273,0,0,747,746,1,0,0,0,747,748,1,0,0,0,748,750,1,0,0,
        0,749,751,5,272,0,0,750,749,1,0,0,0,750,751,1,0,0,0,751,109,1,0,
        0,0,106,119,123,126,135,144,149,153,155,159,164,183,200,202,207,
        209,213,218,221,224,229,241,246,251,256,261,266,271,276,281,286,
        310,314,317,320,324,327,330,335,338,343,346,352,355,358,381,383,
        386,389,392,397,400,403,406,411,414,424,430,433,436,441,444,448,
        451,458,461,464,469,472,477,482,488,492,495,512,518,555,557,560,
        563,573,598,607,610,613,616,624,640,648,657,660,663,671,679,683,
        695,697,700,704,707,710,717,724,731,744,747,750
    ]

class SQLParser ( Parser ):

    grammarFileName = "SQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'_CONNECT'", "'_SESSION'", "'_DISCONNECT'", 
                     "<INVALID>", "<INVALID>", "'INSERT'", "'UPDATE'", "'SELECT'", 
                     "'DELETE'", "'REPLACE'", "'DECLARE'", "<INVALID>", 
                     "'DROP'", "'COMMIT'", "'ROLLBACK'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'.'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'\"'", "'''", "'\\'", "<INVALID>", "'_EXIT'", 
                     "'_QUIT'", "'_SLEEP'", "'_USE'", "<INVALID>", "'> {%'", 
                     "'_ASSERT'", "'_START'", "'_LOAD'", "'_HOST'", "'_HELP'", 
                     "'_IF'", "'_ENDIF'", "'_SET'", "'_SPOOL'", "'_LOOP'", 
                     "'_WHENEVER'", "'_SSH'", "'_JOB'", "'_COMPARE'", "'_DATA'", 
                     "'_MONITOR'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'?'", "'#'", "'|'", "'//'", "<INVALID>", "'&'", "<INVALID>", 
                     "'JDBC'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'HINT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'RELEASE'", "<INVALID>", 
                     "'SAVEURL'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'PLUGIN'", "'MAP'", "'JDBCDRIVER'", 
                     "<INVALID>", "'CLASS'", "'NAME'", "'PROPS'", "'URL'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'UNTIL'", "'INTERVAL'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'BREAK'", "'END'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'ERROR'", "<INVALID>", 
                     "<INVALID>", "'EXIT'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'API'", "'SQL'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'CONNECT'", 
                     "'WITH'", "'USER'", "'KEYFILE'", "'PASSWORD'", "'EXECUTE'", 
                     "'DISCONNECT'", "<INVALID>", "<INVALID>", "'SFTP'", 
                     "'CHMOD'", "'GETCWD'", "'CHDIR'", "'CHOWN'", "'MKDIR'", 
                     "'GET'", "'PUT'", "'REMOVE'", "'RENAME'", "'LISTDIR'", 
                     "'TRUNCATE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'WAIT'", "'SHUTDOWN'", "'ABORT'", "'TIMER'", 
                     "'REGISTER'", "'DEREGISTER'", "'WORKER'", "'JOBMANAGER'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'=>'", "<INVALID>", "<INVALID>", 
                     "'UNSET'", "'MASK'", "'NOMASK'", "'MASKLINE'", "'NOMASKLINE'", 
                     "'CASE'", "'NOCASE'", "'IGBLANK'", "'NOIGBLANK'", "'TRIM'", 
                     "'NOTRIM'", "'OUTPUT'", "'CONSOLE'", "'DIFFFILE'", 
                     "'SKIPLINE'", "'NOSKIPLINE'", "'RESET'", "'ALGORITHM'", 
                     "'ENCODING'", "'WORK'", "'REFERENCE'", "'LCS'", "'MYERS'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'SEEDFILE'", "'DIR'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'ROWS'", "<INVALID>", "<INVALID>", "<INVALID>", "'CONVERT'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'MONITORMANAGER'", "'WORKERS'", 
                     "<INVALID>", "'TASK'", "<INVALID>", "<INVALID>", "'STOP'", 
                     "'REPORT'", "'LIST'" ]

    symbolicNames = [ "<INVALID>", "CONNECT", "SESSION", "DISCONNECT", "MINUS_MINUS_COMMENT", 
                      "SQL_CREATE", "SQL_INSERT", "SQL_UPDATE", "SQL_SELECT", 
                      "SQL_DELETE", "SQL_REPLACE", "SQL_DECLARE", "SQL_BEGIN", 
                      "SQL_DROP", "SQL_COMMIT", "SQL_ROLLBACK", "SQL_CREATE_PROCEDURE", 
                      "CRLF", "COMMA", "SEMICOLON", "COLON", "AT", "DOT", 
                      "SLASH", "BRACKET_OPEN", "BRACKET_CLOSE", "SQUARE_OPEN", 
                      "SQUARE_CLOSE", "DOUBLE_QUOTE", "SINGLE_QUOTE", "ESCAPE", 
                      "SPACE", "EXIT", "QUIT", "SLEEP", "USE", "ECHO", "SCRIPT", 
                      "ASSERT", "START", "LOAD", "HOST", "HELP", "IF", "ENDIF", 
                      "SET", "SPOOL", "LOOP", "WHENEVER", "SSH", "JOB", 
                      "COMPARE", "DATA", "MONITOR", "INT", "DECIMAL", "String", 
                      "CONNECT_SPACE", "CONNECT_AT", "CONNECT_SLASH", "CONNECT_COLON", 
                      "CONNECT_QUESTION", "CONNECT_POUND", "CONNECT_OR", 
                      "CONNECT_DASH", "CONNECT_EQUAL", "CONNECT_PARA_AND", 
                      "CONNECT_SEMICOLON", "JDBC", "IPV4", "IPV6", "CONNECT_PORT", 
                      "CONNECT_STRING", "CommentString", "HINT_SP", "HINT", 
                      "HINT_CLOSE", "HINT_STRING", "SESSION_SPACE", "SESSION_SAVE", 
                      "SESSION_RELEASE", "SESSION_RESTORE", "SESSION_SAVEURL", 
                      "SESSION_SHOW", "SESSION_NAME", "SESSION_END", "SQL_CRLF", 
                      "SQL_SPACE", "SQL_END", "SQL_STRING", "SQL_SINGLE", 
                      "SQL_OTHER", "SQL_PROCEDURE_CRLF", "SQL_SLASH", "SQL_PROCEDURE_SLASH", 
                      "SQLProcedureStatement", "ScriptBlock", "EchoBlock", 
                      "ASSERT_SPACE", "ASSERT_OPEN", "ASSERT_CLOSE", "ASSERT_CRLF", 
                      "ASSERT_EXPRESSION", "ASSERT_NAME", "ASSERT_COMMA", 
                      "ASSERT_SEMICOLON", "LOAD_SPACE", "LOAD_EQUAL", "LOAD_PLUGIN", 
                      "LOAD_MAP", "LOAD_JDBCDRIVER", "LOAD_JDBCFILE", "LOAD_JDBCCLASS", 
                      "LOAD_JDBCNAME", "LOAD_JDBCPROP", "LOAD_JDBCURL", 
                      "LOAD_EXPRESSION", "LOAD_SEMICOLON", "LOAD_CRLF", 
                      "START_SPACE", "START_EXPRESSION", "START_CRLF", "HOST_SPACE", 
                      "HOST_EXPRESSION", "HOST_CRLF", "IF_SPACE", "IF_OPEN", 
                      "IF_CLOSE", "IF_EXPRESSION", "LOOP_SEMICOLON", "LOOP_SPACE", 
                      "LOOP_BEGIN", "LOOP_UNTIL", "LOOP_INTERVAL", "LOOP_INT", 
                      "LOOP_OPEN", "LOOP_CLOSE", "LOOP_BREAK", "LOOP_END", 
                      "LOOP_CONTINUE", "LOOP_EXPRESSION", "LOOP_CRLF", "WHENEVER_SPACE", 
                      "WHENEVER_EXITCODE", "WHENEVER_ERROR", "WHENEVER_SEMICOLON", 
                      "WHENEVER_CONTINUE", "WHENEVER_EXIT", "WHENEVER_CRLF", 
                      "SPOOL_SPACE", "SPOOL_EXPRESSION", "SPOOL_SEMICOLON", 
                      "SPOOL_OFF", "SPOOL_CRLF", "SET_SPACE", "SET_EXPRESSION", 
                      "SET_SEMICOLON", "SET_CRLF", "USE_API", "USE_SQL", 
                      "USE_SPACE", "USE_SEMICOLON", "USE_CRLF", "SSH_CONNECT", 
                      "SSH_WITH", "SSH_USER", "SSH_KEYFILE", "SSH_PASSWORD", 
                      "SSH_EXECUTE", "SSH_DISCONNECT", "SSH_SAVE", "SSH_RESTORE", 
                      "SFTP", "SFTP_CHMOD", "SFTP_GETCWD", "SFTP_CHDIR", 
                      "SFTP_CHOWN", "SFTP_MKDIR", "SFTP_GET", "SFTP_PUT", 
                      "SFTP_REMOVE", "SFTP_RENAME", "SFTP_LISTDIR", "SFTP_TRUNCATE", 
                      "SSH_SPACE", "SSH_SEMICOLON", "SSH_CRLF", "SSH_EXPRESSION", 
                      "JOB_SPACE", "JOB_SEMICOLON", "JOB_EQUAL", "JOB_CRLF", 
                      "JOB_CREATE", "JOB_SHOW", "JOB_SET", "JOB_START", 
                      "JOB_WAIT", "JOB_SHUTDOWN", "JOB_ABORT", "JOB_TIMER", 
                      "JOB_REGISTER", "JOB_DEREGISTER", "JOB_WORKER", "JOB_MANGER", 
                      "JOB_ON", "JOB_OFF", "JOB_TO", "JOB_EXPRESSION", "COMPARE_SPACE", 
                      "COMPARE_SEMICOLON", "COMPARE_EQUAL", "COMPARE_CRLF", 
                      "COMPARE_SET", "COMPARE_UNSET", "COMPARE_MASK", "COMPARE_NOMASK", 
                      "COMPARE_MASKLINE", "COMPARE_NOMASKLINE", "COMPARE_CASE", 
                      "COMPARE_NOCASE", "COMPARE_IGBLANK", "COMPARE_NOIGBLANK", 
                      "COMPARE_TRIM", "COMPARE_NOTRIM", "COMPARE_OUTPUT", 
                      "COMPARE_CONSOLE", "COMPARE_DIFFFILE", "COMPARE_SKIPLINE", 
                      "COMPARE_NOSKIPLINE", "COMPARE_RESET", "COMPARE_ALGORITHM", 
                      "COMPARE_ENCODING", "COMPARE_WORK", "COMPARE_REFERENCE", 
                      "COMPARE_LCS", "COMPARE_MYERS", "COMPARE_EXPRESSION", 
                      "DATA_SPACE", "DATA_SEMICOLON", "DATA_SET", "DATA_SEEDFILE", 
                      "DATA_DIR", "DATA_CREATE", "DATA_FILE", "DATA_FILETYPE", 
                      "DATA_ROWS", "DATA_INT", "DATA_COMMA", "DATACOLUMN_OPEN", 
                      "DATA_CONVERT", "DATA_TO", "DATA_EXPRESSION", "DATACOLUMN_SPACE", 
                      "DATACOLUMN_CLOSE", "DATACOLUMN_CONTENT", "HELP_SPACE", 
                      "HELP_COMMAND", "HELP_CRLF", "HELP_SEMICOLON", "MONITOR_SPACE", 
                      "MONITOR_MANAGER", "MONITOR_WORKERS", "MONITOR_CREATE", 
                      "MONITOR_TASK", "MONITOR_EQUAL", "MONITOR_START", 
                      "MONITOR_STOP", "MONITOR_REPORT", "MONITOR_LIST", 
                      "MONITOR_ON", "MONITOR_OFF", "MONITOR_EXPRESSION", 
                      "MONITOR_CRLF", "MONITOR_SEMICOLON" ]

    RULE_prog = 0
    RULE_command = 1
    RULE_connect = 2
    RULE_connectlocal = 3
    RULE_connectjdbc = 4
    RULE_connectUserInfo = 5
    RULE_connectDriver = 6
    RULE_connectDriverSchema = 7
    RULE_connectDriverType = 8
    RULE_connectHost = 9
    RULE_connectUser = 10
    RULE_connectPassword = 11
    RULE_connectPort = 12
    RULE_connectService = 13
    RULE_connectlocalService = 14
    RULE_connectParameterName = 15
    RULE_connectParameterValue = 16
    RULE_connectParameter = 17
    RULE_connectParameters = 18
    RULE_disconnect = 19
    RULE_session = 20
    RULE_expression = 21
    RULE_sql = 22
    RULE_sqlCreate = 23
    RULE_sqlReplace = 24
    RULE_sqlInsert = 25
    RULE_sqlUpdate = 26
    RULE_sqlDelete = 27
    RULE_sqlSelect = 28
    RULE_sqlDrop = 29
    RULE_sqlDeclare = 30
    RULE_sqlCreateProcedure = 31
    RULE_baseCommand = 32
    RULE_exit = 33
    RULE_quit = 34
    RULE_use = 35
    RULE_sleep = 36
    RULE_start = 37
    RULE_load = 38
    RULE_assert = 39
    RULE_host = 40
    RULE_loop = 41
    RULE_if = 42
    RULE_endif = 43
    RULE_whenever = 44
    RULE_spool = 45
    RULE_echo = 46
    RULE_script = 47
    RULE_set = 48
    RULE_ssh = 49
    RULE_job = 50
    RULE_compare = 51
    RULE_data = 52
    RULE_help = 53
    RULE_monitor = 54

    ruleNames =  [ "prog", "command", "connect", "connectlocal", "connectjdbc", 
                   "connectUserInfo", "connectDriver", "connectDriverSchema", 
                   "connectDriverType", "connectHost", "connectUser", "connectPassword", 
                   "connectPort", "connectService", "connectlocalService", 
                   "connectParameterName", "connectParameterValue", "connectParameter", 
                   "connectParameters", "disconnect", "session", "expression", 
                   "sql", "sqlCreate", "sqlReplace", "sqlInsert", "sqlUpdate", 
                   "sqlDelete", "sqlSelect", "sqlDrop", "sqlDeclare", "sqlCreateProcedure", 
                   "baseCommand", "exit", "quit", "use", "sleep", "start", 
                   "load", "assert", "host", "loop", "if", "endif", "whenever", 
                   "spool", "echo", "script", "set", "ssh", "job", "compare", 
                   "data", "help", "monitor" ]

    EOF = Token.EOF
    CONNECT=1
    SESSION=2
    DISCONNECT=3
    MINUS_MINUS_COMMENT=4
    SQL_CREATE=5
    SQL_INSERT=6
    SQL_UPDATE=7
    SQL_SELECT=8
    SQL_DELETE=9
    SQL_REPLACE=10
    SQL_DECLARE=11
    SQL_BEGIN=12
    SQL_DROP=13
    SQL_COMMIT=14
    SQL_ROLLBACK=15
    SQL_CREATE_PROCEDURE=16
    CRLF=17
    COMMA=18
    SEMICOLON=19
    COLON=20
    AT=21
    DOT=22
    SLASH=23
    BRACKET_OPEN=24
    BRACKET_CLOSE=25
    SQUARE_OPEN=26
    SQUARE_CLOSE=27
    DOUBLE_QUOTE=28
    SINGLE_QUOTE=29
    ESCAPE=30
    SPACE=31
    EXIT=32
    QUIT=33
    SLEEP=34
    USE=35
    ECHO=36
    SCRIPT=37
    ASSERT=38
    START=39
    LOAD=40
    HOST=41
    HELP=42
    IF=43
    ENDIF=44
    SET=45
    SPOOL=46
    LOOP=47
    WHENEVER=48
    SSH=49
    JOB=50
    COMPARE=51
    DATA=52
    MONITOR=53
    INT=54
    DECIMAL=55
    String=56
    CONNECT_SPACE=57
    CONNECT_AT=58
    CONNECT_SLASH=59
    CONNECT_COLON=60
    CONNECT_QUESTION=61
    CONNECT_POUND=62
    CONNECT_OR=63
    CONNECT_DASH=64
    CONNECT_EQUAL=65
    CONNECT_PARA_AND=66
    CONNECT_SEMICOLON=67
    JDBC=68
    IPV4=69
    IPV6=70
    CONNECT_PORT=71
    CONNECT_STRING=72
    CommentString=73
    HINT_SP=74
    HINT=75
    HINT_CLOSE=76
    HINT_STRING=77
    SESSION_SPACE=78
    SESSION_SAVE=79
    SESSION_RELEASE=80
    SESSION_RESTORE=81
    SESSION_SAVEURL=82
    SESSION_SHOW=83
    SESSION_NAME=84
    SESSION_END=85
    SQL_CRLF=86
    SQL_SPACE=87
    SQL_END=88
    SQL_STRING=89
    SQL_SINGLE=90
    SQL_OTHER=91
    SQL_PROCEDURE_CRLF=92
    SQL_SLASH=93
    SQL_PROCEDURE_SLASH=94
    SQLProcedureStatement=95
    ScriptBlock=96
    EchoBlock=97
    ASSERT_SPACE=98
    ASSERT_OPEN=99
    ASSERT_CLOSE=100
    ASSERT_CRLF=101
    ASSERT_EXPRESSION=102
    ASSERT_NAME=103
    ASSERT_COMMA=104
    ASSERT_SEMICOLON=105
    LOAD_SPACE=106
    LOAD_EQUAL=107
    LOAD_PLUGIN=108
    LOAD_MAP=109
    LOAD_JDBCDRIVER=110
    LOAD_JDBCFILE=111
    LOAD_JDBCCLASS=112
    LOAD_JDBCNAME=113
    LOAD_JDBCPROP=114
    LOAD_JDBCURL=115
    LOAD_EXPRESSION=116
    LOAD_SEMICOLON=117
    LOAD_CRLF=118
    START_SPACE=119
    START_EXPRESSION=120
    START_CRLF=121
    HOST_SPACE=122
    HOST_EXPRESSION=123
    HOST_CRLF=124
    IF_SPACE=125
    IF_OPEN=126
    IF_CLOSE=127
    IF_EXPRESSION=128
    LOOP_SEMICOLON=129
    LOOP_SPACE=130
    LOOP_BEGIN=131
    LOOP_UNTIL=132
    LOOP_INTERVAL=133
    LOOP_INT=134
    LOOP_OPEN=135
    LOOP_CLOSE=136
    LOOP_BREAK=137
    LOOP_END=138
    LOOP_CONTINUE=139
    LOOP_EXPRESSION=140
    LOOP_CRLF=141
    WHENEVER_SPACE=142
    WHENEVER_EXITCODE=143
    WHENEVER_ERROR=144
    WHENEVER_SEMICOLON=145
    WHENEVER_CONTINUE=146
    WHENEVER_EXIT=147
    WHENEVER_CRLF=148
    SPOOL_SPACE=149
    SPOOL_EXPRESSION=150
    SPOOL_SEMICOLON=151
    SPOOL_OFF=152
    SPOOL_CRLF=153
    SET_SPACE=154
    SET_EXPRESSION=155
    SET_SEMICOLON=156
    SET_CRLF=157
    USE_API=158
    USE_SQL=159
    USE_SPACE=160
    USE_SEMICOLON=161
    USE_CRLF=162
    SSH_CONNECT=163
    SSH_WITH=164
    SSH_USER=165
    SSH_KEYFILE=166
    SSH_PASSWORD=167
    SSH_EXECUTE=168
    SSH_DISCONNECT=169
    SSH_SAVE=170
    SSH_RESTORE=171
    SFTP=172
    SFTP_CHMOD=173
    SFTP_GETCWD=174
    SFTP_CHDIR=175
    SFTP_CHOWN=176
    SFTP_MKDIR=177
    SFTP_GET=178
    SFTP_PUT=179
    SFTP_REMOVE=180
    SFTP_RENAME=181
    SFTP_LISTDIR=182
    SFTP_TRUNCATE=183
    SSH_SPACE=184
    SSH_SEMICOLON=185
    SSH_CRLF=186
    SSH_EXPRESSION=187
    JOB_SPACE=188
    JOB_SEMICOLON=189
    JOB_EQUAL=190
    JOB_CRLF=191
    JOB_CREATE=192
    JOB_SHOW=193
    JOB_SET=194
    JOB_START=195
    JOB_WAIT=196
    JOB_SHUTDOWN=197
    JOB_ABORT=198
    JOB_TIMER=199
    JOB_REGISTER=200
    JOB_DEREGISTER=201
    JOB_WORKER=202
    JOB_MANGER=203
    JOB_ON=204
    JOB_OFF=205
    JOB_TO=206
    JOB_EXPRESSION=207
    COMPARE_SPACE=208
    COMPARE_SEMICOLON=209
    COMPARE_EQUAL=210
    COMPARE_CRLF=211
    COMPARE_SET=212
    COMPARE_UNSET=213
    COMPARE_MASK=214
    COMPARE_NOMASK=215
    COMPARE_MASKLINE=216
    COMPARE_NOMASKLINE=217
    COMPARE_CASE=218
    COMPARE_NOCASE=219
    COMPARE_IGBLANK=220
    COMPARE_NOIGBLANK=221
    COMPARE_TRIM=222
    COMPARE_NOTRIM=223
    COMPARE_OUTPUT=224
    COMPARE_CONSOLE=225
    COMPARE_DIFFFILE=226
    COMPARE_SKIPLINE=227
    COMPARE_NOSKIPLINE=228
    COMPARE_RESET=229
    COMPARE_ALGORITHM=230
    COMPARE_ENCODING=231
    COMPARE_WORK=232
    COMPARE_REFERENCE=233
    COMPARE_LCS=234
    COMPARE_MYERS=235
    COMPARE_EXPRESSION=236
    DATA_SPACE=237
    DATA_SEMICOLON=238
    DATA_SET=239
    DATA_SEEDFILE=240
    DATA_DIR=241
    DATA_CREATE=242
    DATA_FILE=243
    DATA_FILETYPE=244
    DATA_ROWS=245
    DATA_INT=246
    DATA_COMMA=247
    DATACOLUMN_OPEN=248
    DATA_CONVERT=249
    DATA_TO=250
    DATA_EXPRESSION=251
    DATACOLUMN_SPACE=252
    DATACOLUMN_CLOSE=253
    DATACOLUMN_CONTENT=254
    HELP_SPACE=255
    HELP_COMMAND=256
    HELP_CRLF=257
    HELP_SEMICOLON=258
    MONITOR_SPACE=259
    MONITOR_MANAGER=260
    MONITOR_WORKERS=261
    MONITOR_CREATE=262
    MONITOR_TASK=263
    MONITOR_EQUAL=264
    MONITOR_START=265
    MONITOR_STOP=266
    MONITOR_REPORT=267
    MONITOR_LIST=268
    MONITOR_ON=269
    MONITOR_OFF=270
    MONITOR_EXPRESSION=271
    MONITOR_CRLF=272
    MONITOR_SEMICOLON=273

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def command(self):
            return self.getTypedRuleContext(SQLParser.CommandContext,0)


        def EOF(self):
            return self.getToken(SQLParser.EOF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_prog

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProg" ):
                return visitor.visitProg(self)
            else:
                return visitor.visitChildren(self)




    def prog(self):

        localctx = SQLParser.ProgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_prog)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 110
            self.command()
            self.state = 111
            self.match(SQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseCommand(self):
            return self.getTypedRuleContext(SQLParser.BaseCommandContext,0)


        def disconnect(self):
            return self.getTypedRuleContext(SQLParser.DisconnectContext,0)


        def session(self):
            return self.getTypedRuleContext(SQLParser.SessionContext,0)


        def connect(self):
            return self.getTypedRuleContext(SQLParser.ConnectContext,0)


        def sql(self):
            return self.getTypedRuleContext(SQLParser.SqlContext,0)


        def EOF(self):
            return self.getToken(SQLParser.EOF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_command

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommand" ):
                return visitor.visitCommand(self)
            else:
                return visitor.visitChildren(self)




    def command(self):

        localctx = SQLParser.CommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_command)
        try:
            self.state = 119
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53]:
                self.enterOuterAlt(localctx, 1)
                self.state = 113
                self.baseCommand()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 114
                self.disconnect()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 115
                self.session()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 4)
                self.state = 116
                self.connect()
                pass
            elif token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17]:
                self.enterOuterAlt(localctx, 5)
                self.state = 117
                self.sql()
                pass
            elif token in [-1]:
                self.enterOuterAlt(localctx, 6)
                self.state = 118
                self.match(SQLParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connectjdbc(self):
            return self.getTypedRuleContext(SQLParser.ConnectjdbcContext,0)


        def connectlocal(self):
            return self.getTypedRuleContext(SQLParser.ConnectlocalContext,0)


        def CONNECT_SEMICOLON(self):
            return self.getToken(SQLParser.CONNECT_SEMICOLON, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connect

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnect" ):
                return visitor.visitConnect(self)
            else:
                return visitor.visitChildren(self)




    def connect(self):

        localctx = SQLParser.ConnectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_connect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 123
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 121
                self.connectjdbc()
                pass

            elif la_ == 2:
                self.state = 122
                self.connectlocal()
                pass


            self.state = 126
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 125
                self.match(SQLParser.CONNECT_SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectlocalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT(self):
            return self.getToken(SQLParser.CONNECT, 0)

        def CONNECT_SLASH(self):
            return self.getToken(SQLParser.CONNECT_SLASH, 0)

        def connectlocalService(self):
            return self.getTypedRuleContext(SQLParser.ConnectlocalServiceContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_connectlocal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectlocal" ):
                return visitor.visitConnectlocal(self)
            else:
                return visitor.visitChildren(self)




    def connectlocal(self):

        localctx = SQLParser.ConnectlocalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_connectlocal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 128
            self.match(SQLParser.CONNECT)
            self.state = 129
            self.match(SQLParser.CONNECT_SLASH)
            self.state = 130
            self.connectlocalService()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectjdbcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT(self):
            return self.getToken(SQLParser.CONNECT, 0)

        def connectUserInfo(self):
            return self.getTypedRuleContext(SQLParser.ConnectUserInfoContext,0)


        def connectDriver(self):
            return self.getTypedRuleContext(SQLParser.ConnectDriverContext,0)


        def CONNECT_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.CONNECT_COLON)
            else:
                return self.getToken(SQLParser.CONNECT_COLON, i)

        def connectDriverSchema(self):
            return self.getTypedRuleContext(SQLParser.ConnectDriverSchemaContext,0)


        def CONNECT_DASH(self):
            return self.getToken(SQLParser.CONNECT_DASH, 0)

        def connectHost(self):
            return self.getTypedRuleContext(SQLParser.ConnectHostContext,0)


        def CONNECT_QUESTION(self):
            return self.getToken(SQLParser.CONNECT_QUESTION, 0)

        def connectParameters(self):
            return self.getTypedRuleContext(SQLParser.ConnectParametersContext,0)


        def CONNECT_AT(self):
            return self.getToken(SQLParser.CONNECT_AT, 0)

        def connectDriverType(self):
            return self.getTypedRuleContext(SQLParser.ConnectDriverTypeContext,0)


        def connectPort(self):
            return self.getTypedRuleContext(SQLParser.ConnectPortContext,0)


        def connectService(self):
            return self.getTypedRuleContext(SQLParser.ConnectServiceContext,0)


        def CONNECT_SLASH(self):
            return self.getToken(SQLParser.CONNECT_SLASH, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectjdbc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectjdbc" ):
                return visitor.visitConnectjdbc(self)
            else:
                return visitor.visitChildren(self)




    def connectjdbc(self):

        localctx = SQLParser.ConnectjdbcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_connectjdbc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 132
            self.match(SQLParser.CONNECT)

            self.state = 133
            self.connectUserInfo()
            self.state = 135
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==58:
                self.state = 134
                self.match(SQLParser.CONNECT_AT)


            self.state = 155
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 137
                self.connectDriver()
                self.state = 138
                self.match(SQLParser.CONNECT_COLON)
                self.state = 139
                self.connectDriverSchema()
                self.state = 140
                self.match(SQLParser.CONNECT_COLON)
                self.state = 144
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 141
                    self.connectDriverType()
                    self.state = 142
                    self.match(SQLParser.CONNECT_COLON)


                self.state = 146
                self.match(SQLParser.CONNECT_DASH)
                self.state = 147
                self.connectHost()
                self.state = 149
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==71:
                    self.state = 148
                    self.connectPort()


                self.state = 153
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==59 or _la==60:
                    self.state = 151
                    _la = self._input.LA(1)
                    if not(_la==59 or _la==60):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 152
                    self.connectService()




            self.state = 159
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 157
                self.match(SQLParser.CONNECT_QUESTION)
                self.state = 158
                self.connectParameters()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectUserInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connectUser(self):
            return self.getTypedRuleContext(SQLParser.ConnectUserContext,0)


        def CONNECT_SLASH(self):
            return self.getToken(SQLParser.CONNECT_SLASH, 0)

        def connectPassword(self):
            return self.getTypedRuleContext(SQLParser.ConnectPasswordContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_connectUserInfo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectUserInfo" ):
                return visitor.visitConnectUserInfo(self)
            else:
                return visitor.visitChildren(self)




    def connectUserInfo(self):

        localctx = SQLParser.ConnectUserInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_connectUserInfo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 161
            self.connectUser()
            self.state = 164
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 162
                self.match(SQLParser.CONNECT_SLASH)
                self.state = 163
                self.connectPassword()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectDriverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JDBC(self):
            return self.getToken(SQLParser.JDBC, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectDriver

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectDriver" ):
                return visitor.visitConnectDriver(self)
            else:
                return visitor.visitChildren(self)




    def connectDriver(self):

        localctx = SQLParser.ConnectDriverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_connectDriver)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 166
            self.match(SQLParser.JDBC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectDriverSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectDriverSchema

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectDriverSchema" ):
                return visitor.visitConnectDriverSchema(self)
            else:
                return visitor.visitChildren(self)




    def connectDriverSchema(self):

        localctx = SQLParser.ConnectDriverSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_connectDriverSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 168
            self.match(SQLParser.CONNECT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectDriverTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectDriverType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectDriverType" ):
                return visitor.visitConnectDriverType(self)
            else:
                return visitor.visitChildren(self)




    def connectDriverType(self):

        localctx = SQLParser.ConnectDriverTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_connectDriverType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 170
            self.match(SQLParser.CONNECT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectHostContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IPV4(self):
            return self.getToken(SQLParser.IPV4, 0)

        def IPV6(self):
            return self.getToken(SQLParser.IPV6, 0)

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectHost

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectHost" ):
                return visitor.visitConnectHost(self)
            else:
                return visitor.visitChildren(self)




    def connectHost(self):

        localctx = SQLParser.ConnectHostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_connectHost)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            _la = self._input.LA(1)
            if not((((_la - 69)) & ~0x3f) == 0 and ((1 << (_la - 69)) & 11) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectUser

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectUser" ):
                return visitor.visitConnectUser(self)
            else:
                return visitor.visitChildren(self)




    def connectUser(self):

        localctx = SQLParser.ConnectUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_connectUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            self.match(SQLParser.CONNECT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectPassword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectPassword" ):
                return visitor.visitConnectPassword(self)
            else:
                return visitor.visitChildren(self)




    def connectPassword(self):

        localctx = SQLParser.ConnectPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_connectPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 176
            self.match(SQLParser.CONNECT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectPortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_PORT(self):
            return self.getToken(SQLParser.CONNECT_PORT, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectPort

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectPort" ):
                return visitor.visitConnectPort(self)
            else:
                return visitor.visitChildren(self)




    def connectPort(self):

        localctx = SQLParser.ConnectPortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_connectPort)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 178
            self.match(SQLParser.CONNECT_PORT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.CONNECT_STRING)
            else:
                return self.getToken(SQLParser.CONNECT_STRING, i)

        def CONNECT_COLON(self):
            return self.getToken(SQLParser.CONNECT_COLON, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectService

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectService" ):
                return visitor.visitConnectService(self)
            else:
                return visitor.visitChildren(self)




    def connectService(self):

        localctx = SQLParser.ConnectServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_connectService)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self.match(SQLParser.CONNECT_STRING)
            self.state = 183
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 181
                self.match(SQLParser.CONNECT_COLON)
                self.state = 182
                self.match(SQLParser.CONNECT_STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectlocalServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectlocalService

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectlocalService" ):
                return visitor.visitConnectlocalService(self)
            else:
                return visitor.visitChildren(self)




    def connectlocalService(self):

        localctx = SQLParser.ConnectlocalServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_connectlocalService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 185
            self.match(SQLParser.CONNECT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectParameterNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectParameterName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectParameterName" ):
                return visitor.visitConnectParameterName(self)
            else:
                return visitor.visitChildren(self)




    def connectParameterName(self):

        localctx = SQLParser.ConnectParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_connectParameterName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self.match(SQLParser.CONNECT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectParameterValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectParameterValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectParameterValue" ):
                return visitor.visitConnectParameterValue(self)
            else:
                return visitor.visitChildren(self)




    def connectParameterValue(self):

        localctx = SQLParser.ConnectParameterValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_connectParameterValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.match(SQLParser.CONNECT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connectParameterName(self):
            return self.getTypedRuleContext(SQLParser.ConnectParameterNameContext,0)


        def CONNECT_EQUAL(self):
            return self.getToken(SQLParser.CONNECT_EQUAL, 0)

        def connectParameterValue(self):
            return self.getTypedRuleContext(SQLParser.ConnectParameterValueContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_connectParameter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectParameter" ):
                return visitor.visitConnectParameter(self)
            else:
                return visitor.visitChildren(self)




    def connectParameter(self):

        localctx = SQLParser.ConnectParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_connectParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self.connectParameterName()
            self.state = 192
            self.match(SQLParser.CONNECT_EQUAL)
            self.state = 193
            self.connectParameterValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connectParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ConnectParameterContext)
            else:
                return self.getTypedRuleContext(SQLParser.ConnectParameterContext,i)


        def CONNECT_PARA_AND(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.CONNECT_PARA_AND)
            else:
                return self.getToken(SQLParser.CONNECT_PARA_AND, i)

        def getRuleIndex(self):
            return SQLParser.RULE_connectParameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectParameters" ):
                return visitor.visitConnectParameters(self)
            else:
                return visitor.visitChildren(self)




    def connectParameters(self):

        localctx = SQLParser.ConnectParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_connectParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 195
            self.connectParameter()
            self.state = 202
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==66:
                self.state = 198 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 196
                    self.match(SQLParser.CONNECT_PARA_AND)
                    self.state = 197
                    self.connectParameter()
                    self.state = 200 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==66):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisconnectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCONNECT(self):
            return self.getToken(SQLParser.DISCONNECT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExpressionContext,i)


        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.INT)
            else:
                return self.getToken(SQLParser.INT, i)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_disconnect

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisconnect" ):
                return visitor.visitDisconnect(self)
            else:
                return visitor.visitChildren(self)




    def disconnect(self):

        localctx = SQLParser.DisconnectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_disconnect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 204
            self.match(SQLParser.DISCONNECT)
            self.state = 209
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 90071994691747840) != 0:
                self.state = 207
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 56]:
                    self.state = 205
                    self.expression()
                    pass
                elif token in [54]:
                    self.state = 206
                    self.match(SQLParser.INT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 211
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 213
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 212
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SESSION(self):
            return self.getToken(SQLParser.SESSION, 0)

        def SESSION_SAVE(self):
            return self.getToken(SQLParser.SESSION_SAVE, 0)

        def SESSION_RELEASE(self):
            return self.getToken(SQLParser.SESSION_RELEASE, 0)

        def SESSION_RESTORE(self):
            return self.getToken(SQLParser.SESSION_RESTORE, 0)

        def SESSION_SAVEURL(self):
            return self.getToken(SQLParser.SESSION_SAVEURL, 0)

        def SESSION_SHOW(self):
            return self.getToken(SQLParser.SESSION_SHOW, 0)

        def SESSION_NAME(self):
            return self.getToken(SQLParser.SESSION_NAME, 0)

        def SESSION_END(self):
            return self.getToken(SQLParser.SESSION_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_session

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSession" ):
                return visitor.visitSession(self)
            else:
                return visitor.visitChildren(self)




    def session(self):

        localctx = SQLParser.SessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_session)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 215
            self.match(SQLParser.SESSION)
            self.state = 216
            _la = self._input.LA(1)
            if not((((_la - 79)) & ~0x3f) == 0 and ((1 << (_la - 79)) & 31) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 218
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==84:
                self.state = 217
                self.match(SQLParser.SESSION_NAME)


            self.state = 221
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 220
                self.match(SQLParser.SESSION_END)


            self.state = 224
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 223
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def String(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.String)
            else:
                return self.getToken(SQLParser.String, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.DOT)
            else:
                return self.getToken(SQLParser.DOT, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COLON)
            else:
                return self.getToken(SQLParser.COLON, i)

        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SLASH)
            else:
                return self.getToken(SQLParser.SLASH, i)

        def BRACKET_OPEN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.BRACKET_OPEN)
            else:
                return self.getToken(SQLParser.BRACKET_OPEN, i)

        def BRACKET_CLOSE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.BRACKET_CLOSE)
            else:
                return self.getToken(SQLParser.BRACKET_CLOSE, i)

        def ESCAPE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.ESCAPE)
            else:
                return self.getToken(SQLParser.ESCAPE, i)

        def SQUARE_OPEN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SQUARE_OPEN)
            else:
                return self.getToken(SQLParser.SQUARE_OPEN, i)

        def SQUARE_CLOSE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SQUARE_CLOSE)
            else:
                return self.getToken(SQLParser.SQUARE_CLOSE, i)

        def DOUBLE_QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.DOUBLE_QUOTE)
            else:
                return self.getToken(SQLParser.DOUBLE_QUOTE, i)

        def SINGLE_QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SINGLE_QUOTE)
            else:
                return self.getToken(SQLParser.SINGLE_QUOTE, i)

        def getRuleIndex(self):
            return SQLParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = SQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 227 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 226
                    _la = self._input.LA(1)
                    if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 72057596182265856) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 229 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sqlCreate(self):
            return self.getTypedRuleContext(SQLParser.SqlCreateContext,0)


        def sqlReplace(self):
            return self.getTypedRuleContext(SQLParser.SqlReplaceContext,0)


        def sqlInsert(self):
            return self.getTypedRuleContext(SQLParser.SqlInsertContext,0)


        def sqlUpdate(self):
            return self.getTypedRuleContext(SQLParser.SqlUpdateContext,0)


        def sqlDelete(self):
            return self.getTypedRuleContext(SQLParser.SqlDeleteContext,0)


        def sqlSelect(self):
            return self.getTypedRuleContext(SQLParser.SqlSelectContext,0)


        def sqlDeclare(self):
            return self.getTypedRuleContext(SQLParser.SqlDeclareContext,0)


        def sqlDrop(self):
            return self.getTypedRuleContext(SQLParser.SqlDropContext,0)


        def sqlCreateProcedure(self):
            return self.getTypedRuleContext(SQLParser.SqlCreateProcedureContext,0)


        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sql

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql" ):
                return visitor.visitSql(self)
            else:
                return visitor.visitChildren(self)




    def sql(self):

        localctx = SQLParser.SqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sql)
        try:
            self.state = 241
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 231
                self.sqlCreate()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 232
                self.sqlReplace()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 3)
                self.state = 233
                self.sqlInsert()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 4)
                self.state = 234
                self.sqlUpdate()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 5)
                self.state = 235
                self.sqlDelete()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 6)
                self.state = 236
                self.sqlSelect()
                pass
            elif token in [11, 12]:
                self.enterOuterAlt(localctx, 7)
                self.state = 237
                self.sqlDeclare()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 8)
                self.state = 238
                self.sqlDrop()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 9)
                self.state = 239
                self.sqlCreateProcedure()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 10)
                self.state = 240
                self.match(SQLParser.CRLF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlCreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_CREATE(self):
            return self.getToken(SQLParser.SQL_CREATE, 0)

        def SQL_END(self):
            return self.getToken(SQLParser.SQL_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlCreate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlCreate" ):
                return visitor.visitSqlCreate(self)
            else:
                return visitor.visitChildren(self)




    def sqlCreate(self):

        localctx = SQLParser.SqlCreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sqlCreate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 243
            self.match(SQLParser.SQL_CREATE)
            self.state = 244
            self.match(SQLParser.SQL_END)
            self.state = 246
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 245
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlReplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_REPLACE(self):
            return self.getToken(SQLParser.SQL_REPLACE, 0)

        def SQL_END(self):
            return self.getToken(SQLParser.SQL_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlReplace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlReplace" ):
                return visitor.visitSqlReplace(self)
            else:
                return visitor.visitChildren(self)




    def sqlReplace(self):

        localctx = SQLParser.SqlReplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_sqlReplace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 248
            self.match(SQLParser.SQL_REPLACE)
            self.state = 249
            self.match(SQLParser.SQL_END)
            self.state = 251
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 250
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlInsertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_INSERT(self):
            return self.getToken(SQLParser.SQL_INSERT, 0)

        def SQL_END(self):
            return self.getToken(SQLParser.SQL_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlInsert

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlInsert" ):
                return visitor.visitSqlInsert(self)
            else:
                return visitor.visitChildren(self)




    def sqlInsert(self):

        localctx = SQLParser.SqlInsertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_sqlInsert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 253
            self.match(SQLParser.SQL_INSERT)
            self.state = 254
            self.match(SQLParser.SQL_END)
            self.state = 256
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 255
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlUpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_UPDATE(self):
            return self.getToken(SQLParser.SQL_UPDATE, 0)

        def SQL_END(self):
            return self.getToken(SQLParser.SQL_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlUpdate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlUpdate" ):
                return visitor.visitSqlUpdate(self)
            else:
                return visitor.visitChildren(self)




    def sqlUpdate(self):

        localctx = SQLParser.SqlUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_sqlUpdate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 258
            self.match(SQLParser.SQL_UPDATE)
            self.state = 259
            self.match(SQLParser.SQL_END)
            self.state = 261
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 260
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlDeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_DELETE(self):
            return self.getToken(SQLParser.SQL_DELETE, 0)

        def SQL_END(self):
            return self.getToken(SQLParser.SQL_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlDelete

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlDelete" ):
                return visitor.visitSqlDelete(self)
            else:
                return visitor.visitChildren(self)




    def sqlDelete(self):

        localctx = SQLParser.SqlDeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_sqlDelete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 263
            self.match(SQLParser.SQL_DELETE)
            self.state = 264
            self.match(SQLParser.SQL_END)
            self.state = 266
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 265
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlSelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_SELECT(self):
            return self.getToken(SQLParser.SQL_SELECT, 0)

        def SQL_END(self):
            return self.getToken(SQLParser.SQL_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlSelect

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlSelect" ):
                return visitor.visitSqlSelect(self)
            else:
                return visitor.visitChildren(self)




    def sqlSelect(self):

        localctx = SQLParser.SqlSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_sqlSelect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 268
            self.match(SQLParser.SQL_SELECT)
            self.state = 269
            self.match(SQLParser.SQL_END)
            self.state = 271
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 270
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlDropContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_DROP(self):
            return self.getToken(SQLParser.SQL_DROP, 0)

        def SQL_END(self):
            return self.getToken(SQLParser.SQL_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlDrop

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlDrop" ):
                return visitor.visitSqlDrop(self)
            else:
                return visitor.visitChildren(self)




    def sqlDrop(self):

        localctx = SQLParser.SqlDropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_sqlDrop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 273
            self.match(SQLParser.SQL_DROP)
            self.state = 274
            self.match(SQLParser.SQL_END)
            self.state = 276
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 275
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlDeclareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_SLASH(self):
            return self.getToken(SQLParser.SQL_SLASH, 0)

        def SQL_DECLARE(self):
            return self.getToken(SQLParser.SQL_DECLARE, 0)

        def SQL_BEGIN(self):
            return self.getToken(SQLParser.SQL_BEGIN, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlDeclare

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlDeclare" ):
                return visitor.visitSqlDeclare(self)
            else:
                return visitor.visitChildren(self)




    def sqlDeclare(self):

        localctx = SQLParser.SqlDeclareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_sqlDeclare)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 278
            _la = self._input.LA(1)
            if not(_la==11 or _la==12):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 279
            self.match(SQLParser.SQL_SLASH)
            self.state = 281
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 280
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlCreateProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_CREATE_PROCEDURE(self):
            return self.getToken(SQLParser.SQL_CREATE_PROCEDURE, 0)

        def SQL_SLASH(self):
            return self.getToken(SQLParser.SQL_SLASH, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlCreateProcedure

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlCreateProcedure" ):
                return visitor.visitSqlCreateProcedure(self)
            else:
                return visitor.visitChildren(self)




    def sqlCreateProcedure(self):

        localctx = SQLParser.SqlCreateProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sqlCreateProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 283
            self.match(SQLParser.SQL_CREATE_PROCEDURE)
            self.state = 284
            self.match(SQLParser.SQL_SLASH)
            self.state = 286
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 285
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assert_(self):
            return self.getTypedRuleContext(SQLParser.AssertContext,0)


        def load(self):
            return self.getTypedRuleContext(SQLParser.LoadContext,0)


        def host(self):
            return self.getTypedRuleContext(SQLParser.HostContext,0)


        def start(self):
            return self.getTypedRuleContext(SQLParser.StartContext,0)


        def loop(self):
            return self.getTypedRuleContext(SQLParser.LoopContext,0)


        def if_(self):
            return self.getTypedRuleContext(SQLParser.IfContext,0)


        def endif(self):
            return self.getTypedRuleContext(SQLParser.EndifContext,0)


        def whenever(self):
            return self.getTypedRuleContext(SQLParser.WheneverContext,0)


        def set_(self):
            return self.getTypedRuleContext(SQLParser.SetContext,0)


        def use(self):
            return self.getTypedRuleContext(SQLParser.UseContext,0)


        def exit(self):
            return self.getTypedRuleContext(SQLParser.ExitContext,0)


        def quit(self):
            return self.getTypedRuleContext(SQLParser.QuitContext,0)


        def sleep(self):
            return self.getTypedRuleContext(SQLParser.SleepContext,0)


        def spool(self):
            return self.getTypedRuleContext(SQLParser.SpoolContext,0)


        def script(self):
            return self.getTypedRuleContext(SQLParser.ScriptContext,0)


        def echo(self):
            return self.getTypedRuleContext(SQLParser.EchoContext,0)


        def ssh(self):
            return self.getTypedRuleContext(SQLParser.SshContext,0)


        def job(self):
            return self.getTypedRuleContext(SQLParser.JobContext,0)


        def compare(self):
            return self.getTypedRuleContext(SQLParser.CompareContext,0)


        def data(self):
            return self.getTypedRuleContext(SQLParser.DataContext,0)


        def help_(self):
            return self.getTypedRuleContext(SQLParser.HelpContext,0)


        def monitor(self):
            return self.getTypedRuleContext(SQLParser.MonitorContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_baseCommand

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseCommand" ):
                return visitor.visitBaseCommand(self)
            else:
                return visitor.visitChildren(self)




    def baseCommand(self):

        localctx = SQLParser.BaseCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_baseCommand)
        try:
            self.state = 310
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 288
                self.assert_()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 289
                self.load()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 3)
                self.state = 290
                self.host()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 4)
                self.state = 291
                self.start()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 5)
                self.state = 292
                self.loop()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 6)
                self.state = 293
                self.if_()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 7)
                self.state = 294
                self.endif()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 8)
                self.state = 295
                self.whenever()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 9)
                self.state = 296
                self.set_()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 10)
                self.state = 297
                self.use()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 11)
                self.state = 298
                self.exit()
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 12)
                self.state = 299
                self.quit()
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 13)
                self.state = 300
                self.sleep()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 14)
                self.state = 301
                self.spool()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 15)
                self.state = 302
                self.script()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 16)
                self.state = 303
                self.echo()
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 17)
                self.state = 304
                self.ssh()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 18)
                self.state = 305
                self.job()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 19)
                self.state = 306
                self.compare()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 20)
                self.state = 307
                self.data()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 21)
                self.state = 308
                self.help_()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 22)
                self.state = 309
                self.monitor()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(SQLParser.EXIT, 0)

        def INT(self):
            return self.getToken(SQLParser.INT, 0)

        def SEMICOLON(self):
            return self.getToken(SQLParser.SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_exit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit" ):
                return visitor.visitExit(self)
            else:
                return visitor.visitChildren(self)




    def exit(self):

        localctx = SQLParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 312
            self.match(SQLParser.EXIT)
            self.state = 314
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 313
                self.match(SQLParser.INT)


            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 316
                self.match(SQLParser.SEMICOLON)


            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 319
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUIT(self):
            return self.getToken(SQLParser.QUIT, 0)

        def INT(self):
            return self.getToken(SQLParser.INT, 0)

        def SEMICOLON(self):
            return self.getToken(SQLParser.SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_quit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuit" ):
                return visitor.visitQuit(self)
            else:
                return visitor.visitChildren(self)




    def quit(self):

        localctx = SQLParser.QuitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_quit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 322
            self.match(SQLParser.QUIT)
            self.state = 324
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==54:
                self.state = 323
                self.match(SQLParser.INT)


            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 326
                self.match(SQLParser.SEMICOLON)


            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 329
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(SQLParser.USE, 0)

        def USE_API(self):
            return self.getToken(SQLParser.USE_API, 0)

        def USE_SQL(self):
            return self.getToken(SQLParser.USE_SQL, 0)

        def USE_SEMICOLON(self):
            return self.getToken(SQLParser.USE_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_use

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)




    def use(self):

        localctx = SQLParser.UseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_use)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 332
            self.match(SQLParser.USE)
            self.state = 333
            _la = self._input.LA(1)
            if not(_la==158 or _la==159):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 335
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==161:
                self.state = 334
                self.match(SQLParser.USE_SEMICOLON)


            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 337
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SleepContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLEEP(self):
            return self.getToken(SQLParser.SLEEP, 0)

        def INT(self):
            return self.getToken(SQLParser.INT, 0)

        def SEMICOLON(self):
            return self.getToken(SQLParser.SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sleep

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSleep" ):
                return visitor.visitSleep(self)
            else:
                return visitor.visitChildren(self)




    def sleep(self):

        localctx = SQLParser.SleepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_sleep)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 340
            self.match(SQLParser.SLEEP)
            self.state = 341
            self.match(SQLParser.INT)
            self.state = 343
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 342
                self.match(SQLParser.SEMICOLON)


            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 345
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(SQLParser.START, 0)

        def START_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.START_EXPRESSION)
            else:
                return self.getToken(SQLParser.START_EXPRESSION, i)

        def SEMICOLON(self):
            return self.getToken(SQLParser.SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_start

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStart" ):
                return visitor.visitStart(self)
            else:
                return visitor.visitChildren(self)




    def start(self):

        localctx = SQLParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 348
            self.match(SQLParser.START)
            self.state = 350 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 349
                self.match(SQLParser.START_EXPRESSION)
                self.state = 352 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==120):
                    break

            self.state = 355
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 354
                self.match(SQLParser.SEMICOLON)


            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 357
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(SQLParser.LOAD, 0)

        def LOAD_SEMICOLON(self):
            return self.getToken(SQLParser.LOAD_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def LOAD_PLUGIN(self):
            return self.getToken(SQLParser.LOAD_PLUGIN, 0)

        def LOAD_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOAD_EXPRESSION)
            else:
                return self.getToken(SQLParser.LOAD_EXPRESSION, i)

        def LOAD_MAP(self):
            return self.getToken(SQLParser.LOAD_MAP, 0)

        def LOAD_JDBCDRIVER(self):
            return self.getToken(SQLParser.LOAD_JDBCDRIVER, 0)

        def LOAD_JDBCCLASS(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOAD_JDBCCLASS)
            else:
                return self.getToken(SQLParser.LOAD_JDBCCLASS, i)

        def LOAD_EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOAD_EQUAL)
            else:
                return self.getToken(SQLParser.LOAD_EQUAL, i)

        def LOAD_JDBCFILE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOAD_JDBCFILE)
            else:
                return self.getToken(SQLParser.LOAD_JDBCFILE, i)

        def LOAD_JDBCNAME(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOAD_JDBCNAME)
            else:
                return self.getToken(SQLParser.LOAD_JDBCNAME, i)

        def LOAD_JDBCPROP(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOAD_JDBCPROP)
            else:
                return self.getToken(SQLParser.LOAD_JDBCPROP, i)

        def LOAD_JDBCURL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOAD_JDBCURL)
            else:
                return self.getToken(SQLParser.LOAD_JDBCURL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_load

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoad" ):
                return visitor.visitLoad(self)
            else:
                return visitor.visitChildren(self)




    def load(self):

        localctx = SQLParser.LoadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_load)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 360
            self.match(SQLParser.LOAD)
            self.state = 386
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [108]:
                self.state = 361
                self.match(SQLParser.LOAD_PLUGIN)
                self.state = 362
                self.match(SQLParser.LOAD_EXPRESSION)
                pass
            elif token in [109]:
                self.state = 363
                self.match(SQLParser.LOAD_MAP)
                self.state = 364
                self.match(SQLParser.LOAD_EXPRESSION)
                pass
            elif token in [110]:
                self.state = 365
                self.match(SQLParser.LOAD_JDBCDRIVER)
                self.state = 383
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la - 111)) & ~0x3f) == 0 and ((1 << (_la - 111)) & 31) != 0:
                    self.state = 381
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [112]:
                        self.state = 366
                        self.match(SQLParser.LOAD_JDBCCLASS)
                        self.state = 367
                        self.match(SQLParser.LOAD_EQUAL)
                        self.state = 368
                        self.match(SQLParser.LOAD_EXPRESSION)
                        pass
                    elif token in [111]:
                        self.state = 369
                        self.match(SQLParser.LOAD_JDBCFILE)
                        self.state = 370
                        self.match(SQLParser.LOAD_EQUAL)
                        self.state = 371
                        self.match(SQLParser.LOAD_EXPRESSION)
                        pass
                    elif token in [113]:
                        self.state = 372
                        self.match(SQLParser.LOAD_JDBCNAME)
                        self.state = 373
                        self.match(SQLParser.LOAD_EQUAL)
                        self.state = 374
                        self.match(SQLParser.LOAD_EXPRESSION)
                        pass
                    elif token in [114]:
                        self.state = 375
                        self.match(SQLParser.LOAD_JDBCPROP)
                        self.state = 376
                        self.match(SQLParser.LOAD_EQUAL)
                        self.state = 377
                        self.match(SQLParser.LOAD_EXPRESSION)
                        pass
                    elif token in [115]:
                        self.state = 378
                        self.match(SQLParser.LOAD_JDBCURL)
                        self.state = 379
                        self.match(SQLParser.LOAD_EQUAL)
                        self.state = 380
                        self.match(SQLParser.LOAD_EXPRESSION)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 385
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 389
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==117:
                self.state = 388
                self.match(SQLParser.LOAD_SEMICOLON)


            self.state = 392
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 391
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(SQLParser.ASSERT, 0)

        def ASSERT_EXPRESSION(self):
            return self.getToken(SQLParser.ASSERT_EXPRESSION, 0)

        def ASSERT_NAME(self):
            return self.getToken(SQLParser.ASSERT_NAME, 0)

        def ASSERT_SEMICOLON(self):
            return self.getToken(SQLParser.ASSERT_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def ASSERT_COMMA(self):
            return self.getToken(SQLParser.ASSERT_COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_assert

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert" ):
                return visitor.visitAssert(self)
            else:
                return visitor.visitChildren(self)




    def assert_(self):

        localctx = SQLParser.AssertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_assert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 394
            self.match(SQLParser.ASSERT)
            self.state = 395
            self.match(SQLParser.ASSERT_EXPRESSION)
            self.state = 400
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==103 or _la==104:
                self.state = 397
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==104:
                    self.state = 396
                    self.match(SQLParser.ASSERT_COMMA)


                self.state = 399
                self.match(SQLParser.ASSERT_NAME)


            self.state = 403
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==105:
                self.state = 402
                self.match(SQLParser.ASSERT_SEMICOLON)


            self.state = 406
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 405
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOST(self):
            return self.getToken(SQLParser.HOST, 0)

        def HOST_EXPRESSION(self):
            return self.getToken(SQLParser.HOST_EXPRESSION, 0)

        def SEMICOLON(self):
            return self.getToken(SQLParser.SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_host

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHost" ):
                return visitor.visitHost(self)
            else:
                return visitor.visitChildren(self)




    def host(self):

        localctx = SQLParser.HostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_host)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 408
            self.match(SQLParser.HOST)
            self.state = 409
            self.match(SQLParser.HOST_EXPRESSION)
            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 410
                self.match(SQLParser.SEMICOLON)


            self.state = 414
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 413
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self):
            return self.getToken(SQLParser.LOOP, 0)

        def LOOP_BREAK(self):
            return self.getToken(SQLParser.LOOP_BREAK, 0)

        def LOOP_END(self):
            return self.getToken(SQLParser.LOOP_END, 0)

        def LOOP_CONTINUE(self):
            return self.getToken(SQLParser.LOOP_CONTINUE, 0)

        def LOOP_SEMICOLON(self):
            return self.getToken(SQLParser.LOOP_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def LOOP_BEGIN(self):
            return self.getToken(SQLParser.LOOP_BEGIN, 0)

        def LOOP_UNTIL(self):
            return self.getToken(SQLParser.LOOP_UNTIL, 0)

        def LOOP_EXPRESSION(self):
            return self.getToken(SQLParser.LOOP_EXPRESSION, 0)

        def LOOP_INTERVAL(self):
            return self.getToken(SQLParser.LOOP_INTERVAL, 0)

        def LOOP_INT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOOP_INT)
            else:
                return self.getToken(SQLParser.LOOP_INT, i)

        def getRuleIndex(self):
            return SQLParser.RULE_loop

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = SQLParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 416
            self.match(SQLParser.LOOP)
            self.state = 430
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [137]:
                self.state = 417
                self.match(SQLParser.LOOP_BREAK)
                pass
            elif token in [138]:
                self.state = 418
                self.match(SQLParser.LOOP_END)
                pass
            elif token in [139]:
                self.state = 419
                self.match(SQLParser.LOOP_CONTINUE)
                pass
            elif token in [131]:
                self.state = 420
                self.match(SQLParser.LOOP_BEGIN)
                self.state = 421
                self.match(SQLParser.LOOP_UNTIL)
                self.state = 422
                self.match(SQLParser.LOOP_EXPRESSION)
                pass
            elif token in [132, 134]:
                self.state = 424
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==134:
                    self.state = 423
                    self.match(SQLParser.LOOP_INT)


                self.state = 426
                self.match(SQLParser.LOOP_UNTIL)
                self.state = 427
                self.match(SQLParser.LOOP_EXPRESSION)
                self.state = 428
                self.match(SQLParser.LOOP_INTERVAL)
                self.state = 429
                self.match(SQLParser.LOOP_INT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 433
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==129:
                self.state = 432
                self.match(SQLParser.LOOP_SEMICOLON)


            self.state = 436
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 435
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SQLParser.IF, 0)

        def IF_EXPRESSION(self):
            return self.getToken(SQLParser.IF_EXPRESSION, 0)

        def SEMICOLON(self):
            return self.getToken(SQLParser.SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_if

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf" ):
                return visitor.visitIf(self)
            else:
                return visitor.visitChildren(self)




    def if_(self):

        localctx = SQLParser.IfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 438
            self.match(SQLParser.IF)
            self.state = 439
            self.match(SQLParser.IF_EXPRESSION)
            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 440
                self.match(SQLParser.SEMICOLON)


            self.state = 444
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 443
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENDIF(self):
            return self.getToken(SQLParser.ENDIF, 0)

        def SEMICOLON(self):
            return self.getToken(SQLParser.SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_endif

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndif" ):
                return visitor.visitEndif(self)
            else:
                return visitor.visitChildren(self)




    def endif(self):

        localctx = SQLParser.EndifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_endif)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 446
            self.match(SQLParser.ENDIF)
            self.state = 448
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 447
                self.match(SQLParser.SEMICOLON)


            self.state = 451
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 450
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WheneverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHENEVER(self):
            return self.getToken(SQLParser.WHENEVER, 0)

        def WHENEVER_ERROR(self):
            return self.getToken(SQLParser.WHENEVER_ERROR, 0)

        def WHENEVER_CONTINUE(self):
            return self.getToken(SQLParser.WHENEVER_CONTINUE, 0)

        def WHENEVER_SEMICOLON(self):
            return self.getToken(SQLParser.WHENEVER_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def WHENEVER_EXIT(self):
            return self.getToken(SQLParser.WHENEVER_EXIT, 0)

        def WHENEVER_EXITCODE(self):
            return self.getToken(SQLParser.WHENEVER_EXITCODE, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_whenever

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenever" ):
                return visitor.visitWhenever(self)
            else:
                return visitor.visitChildren(self)




    def whenever(self):

        localctx = SQLParser.WheneverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_whenever)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 453
            self.match(SQLParser.WHENEVER)
            self.state = 454
            self.match(SQLParser.WHENEVER_ERROR)
            self.state = 458
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [146]:
                self.state = 455
                self.match(SQLParser.WHENEVER_CONTINUE)
                pass
            elif token in [147]:
                self.state = 456
                self.match(SQLParser.WHENEVER_EXIT)
                self.state = 457
                self.match(SQLParser.WHENEVER_EXITCODE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 461
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==145:
                self.state = 460
                self.match(SQLParser.WHENEVER_SEMICOLON)


            self.state = 464
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 463
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOOL(self):
            return self.getToken(SQLParser.SPOOL, 0)

        def SPOOL_OFF(self):
            return self.getToken(SQLParser.SPOOL_OFF, 0)

        def SPOOL_EXPRESSION(self):
            return self.getToken(SQLParser.SPOOL_EXPRESSION, 0)

        def SPOOL_SEMICOLON(self):
            return self.getToken(SQLParser.SPOOL_SEMICOLON, 0)

        def SPOOL_CRLF(self):
            return self.getToken(SQLParser.SPOOL_CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_spool

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpool" ):
                return visitor.visitSpool(self)
            else:
                return visitor.visitChildren(self)




    def spool(self):

        localctx = SQLParser.SpoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_spool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 466
            self.match(SQLParser.SPOOL)
            self.state = 467
            _la = self._input.LA(1)
            if not(_la==150 or _la==152):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==151:
                self.state = 468
                self.match(SQLParser.SPOOL_SEMICOLON)


            self.state = 472
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 471
                self.match(SQLParser.SPOOL_CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EchoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ECHO(self):
            return self.getToken(SQLParser.ECHO, 0)

        def EchoBlock(self):
            return self.getToken(SQLParser.EchoBlock, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def EOF(self):
            return self.getToken(SQLParser.EOF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_echo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEcho" ):
                return visitor.visitEcho(self)
            else:
                return visitor.visitChildren(self)




    def echo(self):

        localctx = SQLParser.EchoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_echo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 474
            self.match(SQLParser.ECHO)
            self.state = 475
            self.match(SQLParser.EchoBlock)
            self.state = 477
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 476
                _la = self._input.LA(1)
                if not(_la==-1 or _la==17):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCRIPT(self):
            return self.getToken(SQLParser.SCRIPT, 0)

        def ScriptBlock(self):
            return self.getToken(SQLParser.ScriptBlock, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_script

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScript" ):
                return visitor.visitScript(self)
            else:
                return visitor.visitChildren(self)




    def script(self):

        localctx = SQLParser.ScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(SQLParser.SCRIPT)
            self.state = 480
            self.match(SQLParser.ScriptBlock)
            self.state = 482
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 481
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SQLParser.SET, 0)

        def SET_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SET_EXPRESSION)
            else:
                return self.getToken(SQLParser.SET_EXPRESSION, i)

        def SET_SEMICOLON(self):
            return self.getToken(SQLParser.SET_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_set

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet" ):
                return visitor.visitSet(self)
            else:
                return visitor.visitChildren(self)




    def set_(self):

        localctx = SQLParser.SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.match(SQLParser.SET)
            self.state = 488
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==155:
                self.state = 485
                self.match(SQLParser.SET_EXPRESSION)
                self.state = 490
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 492
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==156:
                self.state = 491
                self.match(SQLParser.SET_SEMICOLON)


            self.state = 495
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 494
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SshContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SSH(self):
            return self.getToken(SQLParser.SSH, 0)

        def SSH_SEMICOLON(self):
            return self.getToken(SQLParser.SSH_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def SSH_CONNECT(self):
            return self.getToken(SQLParser.SSH_CONNECT, 0)

        def SSH_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SSH_EXPRESSION)
            else:
                return self.getToken(SQLParser.SSH_EXPRESSION, i)

        def SSH_WITH(self):
            return self.getToken(SQLParser.SSH_WITH, 0)

        def SSH_USER(self):
            return self.getToken(SQLParser.SSH_USER, 0)

        def SSH_KEYFILE(self):
            return self.getToken(SQLParser.SSH_KEYFILE, 0)

        def SSH_EXECUTE(self):
            return self.getToken(SQLParser.SSH_EXECUTE, 0)

        def SSH_DISCONNECT(self):
            return self.getToken(SQLParser.SSH_DISCONNECT, 0)

        def SSH_SAVE(self):
            return self.getToken(SQLParser.SSH_SAVE, 0)

        def SSH_RESTORE(self):
            return self.getToken(SQLParser.SSH_RESTORE, 0)

        def SFTP(self):
            return self.getToken(SQLParser.SFTP, 0)

        def SSH_PASSWORD(self):
            return self.getToken(SQLParser.SSH_PASSWORD, 0)

        def SFTP_CHMOD(self):
            return self.getToken(SQLParser.SFTP_CHMOD, 0)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.INT)
            else:
                return self.getToken(SQLParser.INT, i)

        def SFTP_GETCWD(self):
            return self.getToken(SQLParser.SFTP_GETCWD, 0)

        def SFTP_CHDIR(self):
            return self.getToken(SQLParser.SFTP_CHDIR, 0)

        def SFTP_CHOWN(self):
            return self.getToken(SQLParser.SFTP_CHOWN, 0)

        def SFTP_MKDIR(self):
            return self.getToken(SQLParser.SFTP_MKDIR, 0)

        def SFTP_GET(self):
            return self.getToken(SQLParser.SFTP_GET, 0)

        def SFTP_PUT(self):
            return self.getToken(SQLParser.SFTP_PUT, 0)

        def SFTP_REMOVE(self):
            return self.getToken(SQLParser.SFTP_REMOVE, 0)

        def SFTP_RENAME(self):
            return self.getToken(SQLParser.SFTP_RENAME, 0)

        def SFTP_LISTDIR(self):
            return self.getToken(SQLParser.SFTP_LISTDIR, 0)

        def SFTP_TRUNCATE(self):
            return self.getToken(SQLParser.SFTP_TRUNCATE, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_ssh

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSsh" ):
                return visitor.visitSsh(self)
            else:
                return visitor.visitChildren(self)




    def ssh(self):

        localctx = SQLParser.SshContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_ssh)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 497
            self.match(SQLParser.SSH)
            self.state = 557
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 498
                self.match(SQLParser.SSH_CONNECT)
                self.state = 499
                self.match(SQLParser.SSH_EXPRESSION)
                self.state = 500
                self.match(SQLParser.SSH_WITH)
                self.state = 501
                self.match(SQLParser.SSH_USER)
                self.state = 502
                self.match(SQLParser.SSH_EXPRESSION)
                self.state = 503
                self.match(SQLParser.SSH_KEYFILE)
                self.state = 504
                self.match(SQLParser.SSH_EXPRESSION)
                pass

            elif la_ == 2:
                self.state = 505
                self.match(SQLParser.SSH_CONNECT)
                self.state = 506
                self.match(SQLParser.SSH_EXPRESSION)
                self.state = 507
                self.match(SQLParser.SSH_WITH)
                self.state = 508
                self.match(SQLParser.SSH_USER)
                self.state = 509
                self.match(SQLParser.SSH_EXPRESSION)
                self.state = 512
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==167:
                    self.state = 510
                    self.match(SQLParser.SSH_PASSWORD)
                    self.state = 511
                    self.match(SQLParser.SSH_EXPRESSION)


                pass

            elif la_ == 3:
                self.state = 514
                self.match(SQLParser.SSH_EXECUTE)
                self.state = 516 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 515
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 518 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==187):
                        break

                pass

            elif la_ == 4:
                self.state = 520
                self.match(SQLParser.SSH_DISCONNECT)
                pass

            elif la_ == 5:
                self.state = 521
                self.match(SQLParser.SSH_SAVE)
                self.state = 522
                self.match(SQLParser.SSH_EXPRESSION)
                pass

            elif la_ == 6:
                self.state = 523
                self.match(SQLParser.SSH_RESTORE)
                self.state = 524
                self.match(SQLParser.SSH_EXPRESSION)
                pass

            elif la_ == 7:
                self.state = 525
                self.match(SQLParser.SFTP)
                self.state = 555
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [173]:
                    self.state = 526
                    self.match(SQLParser.SFTP_CHMOD)
                    self.state = 527
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 528
                    self.match(SQLParser.INT)
                    pass
                elif token in [174]:
                    self.state = 529
                    self.match(SQLParser.SFTP_GETCWD)
                    pass
                elif token in [175]:
                    self.state = 530
                    self.match(SQLParser.SFTP_CHDIR)
                    self.state = 531
                    self.match(SQLParser.SSH_EXPRESSION)
                    pass
                elif token in [176]:
                    self.state = 532
                    self.match(SQLParser.SFTP_CHOWN)
                    self.state = 533
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 534
                    self.match(SQLParser.INT)
                    self.state = 535
                    self.match(SQLParser.INT)
                    pass
                elif token in [177]:
                    self.state = 536
                    self.match(SQLParser.SFTP_MKDIR)
                    self.state = 537
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 538
                    self.match(SQLParser.INT)
                    pass
                elif token in [178]:
                    self.state = 539
                    self.match(SQLParser.SFTP_GET)
                    self.state = 540
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 541
                    self.match(SQLParser.SSH_EXPRESSION)
                    pass
                elif token in [179]:
                    self.state = 542
                    self.match(SQLParser.SFTP_PUT)
                    self.state = 543
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 544
                    self.match(SQLParser.SSH_EXPRESSION)
                    pass
                elif token in [180]:
                    self.state = 545
                    self.match(SQLParser.SFTP_REMOVE)
                    self.state = 546
                    self.match(SQLParser.SSH_EXPRESSION)
                    pass
                elif token in [181]:
                    self.state = 547
                    self.match(SQLParser.SFTP_RENAME)
                    self.state = 548
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 549
                    self.match(SQLParser.SSH_EXPRESSION)
                    pass
                elif token in [182]:
                    self.state = 550
                    self.match(SQLParser.SFTP_LISTDIR)
                    self.state = 551
                    self.match(SQLParser.SSH_EXPRESSION)
                    pass
                elif token in [183]:
                    self.state = 552
                    self.match(SQLParser.SFTP_TRUNCATE)
                    self.state = 553
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 554
                    self.match(SQLParser.INT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self.state = 560
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==185:
                self.state = 559
                self.match(SQLParser.SSH_SEMICOLON)


            self.state = 563
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 562
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JobContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOB(self):
            return self.getToken(SQLParser.JOB, 0)

        def JOB_SEMICOLON(self):
            return self.getToken(SQLParser.JOB_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def JOB_MANGER(self):
            return self.getToken(SQLParser.JOB_MANGER, 0)

        def JOB_WAIT(self):
            return self.getToken(SQLParser.JOB_WAIT, 0)

        def JOB_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.JOB_EXPRESSION)
            else:
                return self.getToken(SQLParser.JOB_EXPRESSION, i)

        def JOB_SHOW(self):
            return self.getToken(SQLParser.JOB_SHOW, 0)

        def JOB_ABORT(self):
            return self.getToken(SQLParser.JOB_ABORT, 0)

        def JOB_SHUTDOWN(self):
            return self.getToken(SQLParser.JOB_SHUTDOWN, 0)

        def JOB_TIMER(self):
            return self.getToken(SQLParser.JOB_TIMER, 0)

        def JOB_START(self):
            return self.getToken(SQLParser.JOB_START, 0)

        def JOB_DEREGISTER(self):
            return self.getToken(SQLParser.JOB_DEREGISTER, 0)

        def JOB_WORKER(self):
            return self.getToken(SQLParser.JOB_WORKER, 0)

        def JOB_REGISTER(self):
            return self.getToken(SQLParser.JOB_REGISTER, 0)

        def JOB_TO(self):
            return self.getToken(SQLParser.JOB_TO, 0)

        def JOB_SET(self):
            return self.getToken(SQLParser.JOB_SET, 0)

        def JOB_CREATE(self):
            return self.getToken(SQLParser.JOB_CREATE, 0)

        def JOB_ON(self):
            return self.getToken(SQLParser.JOB_ON, 0)

        def JOB_OFF(self):
            return self.getToken(SQLParser.JOB_OFF, 0)

        def JOB_EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.JOB_EQUAL)
            else:
                return self.getToken(SQLParser.JOB_EQUAL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_job

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJob" ):
                return visitor.visitJob(self)
            else:
                return visitor.visitChildren(self)




    def job(self):

        localctx = SQLParser.JobContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_job)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 565
            self.match(SQLParser.JOB)
            self.state = 610
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [203]:
                self.state = 566
                self.match(SQLParser.JOB_MANGER)
                self.state = 567
                _la = self._input.LA(1)
                if not(_la==204 or _la==205):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [196]:
                self.state = 568
                self.match(SQLParser.JOB_WAIT)
                self.state = 569
                self.match(SQLParser.JOB_EXPRESSION)
                self.state = 573
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==207:
                    self.state = 570
                    self.match(SQLParser.JOB_EXPRESSION)
                    self.state = 571
                    self.match(SQLParser.JOB_EQUAL)
                    self.state = 572
                    self.match(SQLParser.JOB_EXPRESSION)


                pass
            elif token in [193]:
                self.state = 575
                self.match(SQLParser.JOB_SHOW)
                self.state = 576
                self.match(SQLParser.JOB_EXPRESSION)
                pass
            elif token in [198]:
                self.state = 577
                self.match(SQLParser.JOB_ABORT)
                self.state = 578
                self.match(SQLParser.JOB_EXPRESSION)
                pass
            elif token in [197]:
                self.state = 579
                self.match(SQLParser.JOB_SHUTDOWN)
                self.state = 580
                self.match(SQLParser.JOB_EXPRESSION)
                pass
            elif token in [199]:
                self.state = 581
                self.match(SQLParser.JOB_TIMER)
                self.state = 582
                self.match(SQLParser.JOB_EXPRESSION)
                pass
            elif token in [195]:
                self.state = 583
                self.match(SQLParser.JOB_START)
                self.state = 584
                self.match(SQLParser.JOB_EXPRESSION)
                pass
            elif token in [201]:
                self.state = 585
                self.match(SQLParser.JOB_DEREGISTER)
                self.state = 586
                self.match(SQLParser.JOB_WORKER)
                pass
            elif token in [200]:
                self.state = 587
                self.match(SQLParser.JOB_REGISTER)
                self.state = 588
                self.match(SQLParser.JOB_WORKER)
                self.state = 589
                self.match(SQLParser.JOB_TO)
                self.state = 590
                self.match(SQLParser.JOB_EXPRESSION)
                pass
            elif token in [194]:
                self.state = 591
                self.match(SQLParser.JOB_SET)
                self.state = 592
                self.match(SQLParser.JOB_EXPRESSION)
                self.state = 596 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 593
                    self.match(SQLParser.JOB_EXPRESSION)
                    self.state = 594
                    self.match(SQLParser.JOB_EQUAL)
                    self.state = 595
                    self.match(SQLParser.JOB_EXPRESSION)
                    self.state = 598 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==207):
                        break

                pass
            elif token in [192]:
                self.state = 600
                self.match(SQLParser.JOB_CREATE)
                self.state = 601
                self.match(SQLParser.JOB_EXPRESSION)
                self.state = 607
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==207:
                    self.state = 602
                    self.match(SQLParser.JOB_EXPRESSION)
                    self.state = 603
                    self.match(SQLParser.JOB_EQUAL)
                    self.state = 604
                    self.match(SQLParser.JOB_EXPRESSION)
                    self.state = 609
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 613
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189:
                self.state = 612
                self.match(SQLParser.JOB_SEMICOLON)


            self.state = 616
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 615
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPARE(self):
            return self.getToken(SQLParser.COMPARE, 0)

        def COMPARE_RESET(self):
            return self.getToken(SQLParser.COMPARE_RESET, 0)

        def COMPARE_SEMICOLON(self):
            return self.getToken(SQLParser.COMPARE_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def COMPARE_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_EXPRESSION)
            else:
                return self.getToken(SQLParser.COMPARE_EXPRESSION, i)

        def COMPARE_MASKLINE(self):
            return self.getToken(SQLParser.COMPARE_MASKLINE, 0)

        def COMPARE_EQUAL(self):
            return self.getToken(SQLParser.COMPARE_EQUAL, 0)

        def COMPARE_NOMASKLINE(self):
            return self.getToken(SQLParser.COMPARE_NOMASKLINE, 0)

        def COMPARE_SET(self):
            return self.getToken(SQLParser.COMPARE_SET, 0)

        def COMPARE_OUTPUT(self):
            return self.getToken(SQLParser.COMPARE_OUTPUT, 0)

        def COMPARE_ALGORITHM(self):
            return self.getToken(SQLParser.COMPARE_ALGORITHM, 0)

        def COMPARE_ENCODING(self):
            return self.getToken(SQLParser.COMPARE_ENCODING, 0)

        def COMPARE_SKIPLINE(self):
            return self.getToken(SQLParser.COMPARE_SKIPLINE, 0)

        def COMPARE_NOSKIPLINE(self):
            return self.getToken(SQLParser.COMPARE_NOSKIPLINE, 0)

        def COMPARE_LCS(self):
            return self.getToken(SQLParser.COMPARE_LCS, 0)

        def COMPARE_MYERS(self):
            return self.getToken(SQLParser.COMPARE_MYERS, 0)

        def COMPARE_WORK(self):
            return self.getToken(SQLParser.COMPARE_WORK, 0)

        def COMPARE_REFERENCE(self):
            return self.getToken(SQLParser.COMPARE_REFERENCE, 0)

        def COMPARE_MASK(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_MASK)
            else:
                return self.getToken(SQLParser.COMPARE_MASK, i)

        def COMPARE_NOMASK(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_NOMASK)
            else:
                return self.getToken(SQLParser.COMPARE_NOMASK, i)

        def COMPARE_CASE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_CASE)
            else:
                return self.getToken(SQLParser.COMPARE_CASE, i)

        def COMPARE_NOCASE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_NOCASE)
            else:
                return self.getToken(SQLParser.COMPARE_NOCASE, i)

        def COMPARE_IGBLANK(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_IGBLANK)
            else:
                return self.getToken(SQLParser.COMPARE_IGBLANK, i)

        def COMPARE_NOIGBLANK(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_NOIGBLANK)
            else:
                return self.getToken(SQLParser.COMPARE_NOIGBLANK, i)

        def COMPARE_TRIM(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_TRIM)
            else:
                return self.getToken(SQLParser.COMPARE_TRIM, i)

        def COMPARE_NOTRIM(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_NOTRIM)
            else:
                return self.getToken(SQLParser.COMPARE_NOTRIM, i)

        def COMPARE_CONSOLE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_CONSOLE)
            else:
                return self.getToken(SQLParser.COMPARE_CONSOLE, i)

        def COMPARE_DIFFFILE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_DIFFFILE)
            else:
                return self.getToken(SQLParser.COMPARE_DIFFFILE, i)

        def getRuleIndex(self):
            return SQLParser.RULE_compare

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompare" ):
                return visitor.visitCompare(self)
            else:
                return visitor.visitChildren(self)




    def compare(self):

        localctx = SQLParser.CompareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_compare)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 618
            self.match(SQLParser.COMPARE)
            self.state = 657
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 619
                self.match(SQLParser.COMPARE_EXPRESSION)
                self.state = 620
                self.match(SQLParser.COMPARE_EXPRESSION)
                self.state = 624
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 1011) != 0:
                    self.state = 621
                    _la = self._input.LA(1)
                    if not((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 1011) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 626
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 627
                _la = self._input.LA(1)
                if not(_la==227 or _la==228):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 628
                self.match(SQLParser.COMPARE_EXPRESSION)
                pass

            elif la_ == 3:
                self.state = 629
                self.match(SQLParser.COMPARE_MASKLINE)
                self.state = 630
                self.match(SQLParser.COMPARE_EXPRESSION)
                self.state = 631
                self.match(SQLParser.COMPARE_EQUAL)
                self.state = 632
                self.match(SQLParser.COMPARE_EXPRESSION)
                pass

            elif la_ == 4:
                self.state = 633
                self.match(SQLParser.COMPARE_NOMASKLINE)
                self.state = 634
                self.match(SQLParser.COMPARE_EXPRESSION)
                pass

            elif la_ == 5:
                self.state = 635
                self.match(SQLParser.COMPARE_RESET)
                pass

            elif la_ == 6:
                self.state = 636
                self.match(SQLParser.COMPARE_SET)
                self.state = 640
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 1011) != 0:
                    self.state = 637
                    _la = self._input.LA(1)
                    if not((((_la - 214)) & ~0x3f) == 0 and ((1 << (_la - 214)) & 1011) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 642
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.state = 643
                self.match(SQLParser.COMPARE_SET)
                self.state = 644
                self.match(SQLParser.COMPARE_OUTPUT)
                self.state = 646 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 645
                    _la = self._input.LA(1)
                    if not(_la==225 or _la==226):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 648 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==225 or _la==226):
                        break

                pass

            elif la_ == 8:
                self.state = 650
                self.match(SQLParser.COMPARE_SET)
                self.state = 651
                self.match(SQLParser.COMPARE_ALGORITHM)
                self.state = 652
                _la = self._input.LA(1)
                if not(_la==234 or _la==235):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.state = 653
                self.match(SQLParser.COMPARE_SET)
                self.state = 654
                _la = self._input.LA(1)
                if not(_la==232 or _la==233):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 655
                self.match(SQLParser.COMPARE_ENCODING)
                self.state = 656
                self.match(SQLParser.COMPARE_EXPRESSION)
                pass


            self.state = 660
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==209:
                self.state = 659
                self.match(SQLParser.COMPARE_SEMICOLON)


            self.state = 663
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 662
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA(self):
            return self.getToken(SQLParser.DATA, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def DATA_SET(self):
            return self.getToken(SQLParser.DATA_SET, 0)

        def DATA_SEEDFILE(self):
            return self.getToken(SQLParser.DATA_SEEDFILE, 0)

        def DATA_DIR(self):
            return self.getToken(SQLParser.DATA_DIR, 0)

        def DATA_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.DATA_EXPRESSION)
            else:
                return self.getToken(SQLParser.DATA_EXPRESSION, i)

        def DATA_CREATE(self):
            return self.getToken(SQLParser.DATA_CREATE, 0)

        def DATA_FILETYPE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.DATA_FILETYPE)
            else:
                return self.getToken(SQLParser.DATA_FILETYPE, i)

        def DATA_FILE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.DATA_FILE)
            else:
                return self.getToken(SQLParser.DATA_FILE, i)

        def DATACOLUMN_OPEN(self):
            return self.getToken(SQLParser.DATACOLUMN_OPEN, 0)

        def DATA_CONVERT(self):
            return self.getToken(SQLParser.DATA_CONVERT, 0)

        def DATA_TO(self):
            return self.getToken(SQLParser.DATA_TO, 0)

        def DATA_SEMICOLON(self):
            return self.getToken(SQLParser.DATA_SEMICOLON, 0)

        def DATACOLUMN_CONTENT(self):
            return self.getToken(SQLParser.DATACOLUMN_CONTENT, 0)

        def DATA_ROWS(self):
            return self.getToken(SQLParser.DATA_ROWS, 0)

        def DATA_INT(self):
            return self.getToken(SQLParser.DATA_INT, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_data

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData" ):
                return visitor.visitData(self)
            else:
                return visitor.visitChildren(self)




    def data(self):

        localctx = SQLParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_data)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 665
            self.match(SQLParser.DATA)
            self.state = 697
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [239]:
                self.state = 666
                self.match(SQLParser.DATA_SET)
                self.state = 667
                self.match(SQLParser.DATA_SEEDFILE)
                self.state = 668
                self.match(SQLParser.DATA_DIR)
                self.state = 669
                self.match(SQLParser.DATA_EXPRESSION)
                self.state = 671
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==238:
                    self.state = 670
                    self.match(SQLParser.DATA_SEMICOLON)


                pass
            elif token in [242]:
                self.state = 673
                self.match(SQLParser.DATA_CREATE)
                self.state = 674
                self.match(SQLParser.DATA_FILETYPE)
                self.state = 675
                self.match(SQLParser.DATA_FILE)
                self.state = 676
                self.match(SQLParser.DATA_EXPRESSION)
                self.state = 677
                self.match(SQLParser.DATACOLUMN_OPEN)
                self.state = 679
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==254:
                    self.state = 678
                    self.match(SQLParser.DATACOLUMN_CONTENT)


                self.state = 683
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==245:
                    self.state = 681
                    self.match(SQLParser.DATA_ROWS)
                    self.state = 682
                    self.match(SQLParser.DATA_INT)


                self.state = 685
                self.match(SQLParser.DATA_SEMICOLON)
                pass
            elif token in [249]:
                self.state = 686
                self.match(SQLParser.DATA_CONVERT)
                self.state = 687
                self.match(SQLParser.DATA_FILETYPE)
                self.state = 688
                self.match(SQLParser.DATA_FILE)
                self.state = 689
                self.match(SQLParser.DATA_EXPRESSION)
                self.state = 690
                self.match(SQLParser.DATA_TO)
                self.state = 691
                self.match(SQLParser.DATA_FILETYPE)
                self.state = 692
                self.match(SQLParser.DATA_FILE)
                self.state = 693
                self.match(SQLParser.DATA_EXPRESSION)
                self.state = 695
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==238:
                    self.state = 694
                    self.match(SQLParser.DATA_SEMICOLON)


                pass
            else:
                raise NoViableAltException(self)

            self.state = 700
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 699
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(SQLParser.HELP, 0)

        def HELP_COMMAND(self):
            return self.getToken(SQLParser.HELP_COMMAND, 0)

        def HELP_SEMICOLON(self):
            return self.getToken(SQLParser.HELP_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_help

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHelp" ):
                return visitor.visitHelp(self)
            else:
                return visitor.visitChildren(self)




    def help_(self):

        localctx = SQLParser.HelpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_help)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 702
            self.match(SQLParser.HELP)
            self.state = 704
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==256:
                self.state = 703
                self.match(SQLParser.HELP_COMMAND)


            self.state = 707
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==258:
                self.state = 706
                self.match(SQLParser.HELP_SEMICOLON)


            self.state = 710
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 709
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MonitorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MONITOR(self):
            return self.getToken(SQLParser.MONITOR, 0)

        def MONITOR_SEMICOLON(self):
            return self.getToken(SQLParser.MONITOR_SEMICOLON, 0)

        def MONITOR_CRLF(self):
            return self.getToken(SQLParser.MONITOR_CRLF, 0)

        def MONITOR_MANAGER(self):
            return self.getToken(SQLParser.MONITOR_MANAGER, 0)

        def MONITOR_ON(self):
            return self.getToken(SQLParser.MONITOR_ON, 0)

        def MONITOR_OFF(self):
            return self.getToken(SQLParser.MONITOR_OFF, 0)

        def MONITOR_CREATE(self):
            return self.getToken(SQLParser.MONITOR_CREATE, 0)

        def MONITOR_TASK(self):
            return self.getToken(SQLParser.MONITOR_TASK, 0)

        def MONITOR_START(self):
            return self.getToken(SQLParser.MONITOR_START, 0)

        def MONITOR_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.MONITOR_EXPRESSION)
            else:
                return self.getToken(SQLParser.MONITOR_EXPRESSION, i)

        def MONITOR_STOP(self):
            return self.getToken(SQLParser.MONITOR_STOP, 0)

        def MONITOR_REPORT(self):
            return self.getToken(SQLParser.MONITOR_REPORT, 0)

        def MONITOR_LIST(self):
            return self.getToken(SQLParser.MONITOR_LIST, 0)

        def MONITOR_WORKERS(self):
            return self.getToken(SQLParser.MONITOR_WORKERS, 0)

        def MONITOR_EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.MONITOR_EQUAL)
            else:
                return self.getToken(SQLParser.MONITOR_EQUAL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_monitor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMonitor" ):
                return visitor.visitMonitor(self)
            else:
                return visitor.visitChildren(self)




    def monitor(self):

        localctx = SQLParser.MonitorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_monitor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 712
            self.match(SQLParser.MONITOR)
            self.state = 744
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,103,self._ctx)
            if la_ == 1:
                self.state = 713
                self.match(SQLParser.MONITOR_MANAGER)
                self.state = 714
                self.match(SQLParser.MONITOR_ON)
                self.state = 717
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==261:
                    self.state = 715
                    self.match(SQLParser.MONITOR_WORKERS)
                    self.state = 716
                    self.match(SQLParser.MONITOR_EXPRESSION)


                pass

            elif la_ == 2:
                self.state = 719
                self.match(SQLParser.MONITOR_MANAGER)
                self.state = 720
                self.match(SQLParser.MONITOR_OFF)
                pass

            elif la_ == 3:
                self.state = 721
                self.match(SQLParser.MONITOR_CREATE)
                self.state = 722
                self.match(SQLParser.MONITOR_TASK)

                self.state = 724
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,101,self._ctx)
                if la_ == 1:
                    self.state = 723
                    self.match(SQLParser.MONITOR_EXPRESSION)


                self.state = 729 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 726
                    self.match(SQLParser.MONITOR_EXPRESSION)
                    self.state = 727
                    self.match(SQLParser.MONITOR_EQUAL)
                    self.state = 728
                    self.match(SQLParser.MONITOR_EXPRESSION)
                    self.state = 731 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==271):
                        break

                pass

            elif la_ == 4:
                self.state = 733
                self.match(SQLParser.MONITOR_START)
                self.state = 734
                self.match(SQLParser.MONITOR_TASK)
                self.state = 735
                self.match(SQLParser.MONITOR_EXPRESSION)
                pass

            elif la_ == 5:
                self.state = 736
                self.match(SQLParser.MONITOR_STOP)
                self.state = 737
                self.match(SQLParser.MONITOR_TASK)
                self.state = 738
                self.match(SQLParser.MONITOR_EXPRESSION)
                pass

            elif la_ == 6:
                self.state = 739
                self.match(SQLParser.MONITOR_REPORT)
                self.state = 740
                self.match(SQLParser.MONITOR_TASK)
                self.state = 741
                self.match(SQLParser.MONITOR_EXPRESSION)
                pass

            elif la_ == 7:
                self.state = 742
                self.match(SQLParser.MONITOR_LIST)
                self.state = 743
                self.match(SQLParser.MONITOR_TASK)
                pass


            self.state = 747
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==273:
                self.state = 746
                self.match(SQLParser.MONITOR_SEMICOLON)


            self.state = 750
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==272:
                self.state = 749
                self.match(SQLParser.MONITOR_CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





