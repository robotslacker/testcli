# Generated from SQLParser.g4 by ANTLR 4.11.1
# encoding: utf-8
from antlr4 import *
from io import StringIO
import sys
if sys.version_info[1] > 5:
	from typing import TextIO
else:
	from typing.io import TextIO

def serializedATN():
    return [
        4,1,287,780,2,0,7,0,2,1,7,1,2,2,7,2,2,3,7,3,2,4,7,4,2,5,7,5,2,6,
        7,6,2,7,7,7,2,8,7,8,2,9,7,9,2,10,7,10,2,11,7,11,2,12,7,12,2,13,7,
        13,2,14,7,14,2,15,7,15,2,16,7,16,2,17,7,17,2,18,7,18,2,19,7,19,2,
        20,7,20,2,21,7,21,2,22,7,22,2,23,7,23,2,24,7,24,2,25,7,25,2,26,7,
        26,2,27,7,27,2,28,7,28,2,29,7,29,2,30,7,30,2,31,7,31,2,32,7,32,2,
        33,7,33,2,34,7,34,2,35,7,35,2,36,7,36,2,37,7,37,2,38,7,38,2,39,7,
        39,2,40,7,40,2,41,7,41,2,42,7,42,2,43,7,43,2,44,7,44,2,45,7,45,2,
        46,7,46,2,47,7,47,2,48,7,48,2,49,7,49,2,50,7,50,2,51,7,51,2,52,7,
        52,2,53,7,53,2,54,7,54,2,55,7,55,1,0,1,0,1,0,1,1,1,1,1,1,1,1,1,1,
        1,1,3,1,122,8,1,1,2,1,2,3,2,126,8,2,1,2,3,2,129,8,2,1,3,1,3,1,3,
        1,3,1,4,1,4,1,4,3,4,138,8,4,1,4,1,4,1,4,1,4,1,4,1,4,1,4,3,4,147,
        8,4,1,4,1,4,1,4,3,4,152,8,4,1,4,1,4,3,4,156,8,4,3,4,158,8,4,1,4,
        1,4,3,4,162,8,4,1,5,1,5,1,5,3,5,167,8,5,1,6,1,6,1,7,1,7,1,8,1,8,
        1,9,1,9,1,10,1,10,1,11,1,11,1,12,1,12,1,13,1,13,1,13,3,13,186,8,
        13,1,14,1,14,1,15,1,15,1,16,1,16,1,17,1,17,1,17,1,17,1,18,1,18,1,
        18,4,18,201,8,18,11,18,12,18,202,3,18,205,8,18,1,19,1,19,1,19,5,
        19,210,8,19,10,19,12,19,213,9,19,1,19,3,19,216,8,19,1,20,1,20,1,
        20,3,20,221,8,20,1,20,3,20,224,8,20,1,20,3,20,227,8,20,1,21,4,21,
        230,8,21,11,21,12,21,231,1,22,1,22,1,22,1,22,1,22,1,22,1,22,1,22,
        1,22,1,22,3,22,244,8,22,1,23,1,23,1,23,3,23,249,8,23,1,24,1,24,1,
        24,3,24,254,8,24,1,25,1,25,1,25,3,25,259,8,25,1,26,1,26,1,26,3,26,
        264,8,26,1,27,1,27,1,27,3,27,269,8,27,1,28,1,28,1,28,3,28,274,8,
        28,1,29,1,29,1,29,3,29,279,8,29,1,30,1,30,1,30,3,30,284,8,30,1,31,
        1,31,1,31,3,31,289,8,31,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,1,32,
        1,32,1,32,3,32,314,8,32,1,33,1,33,3,33,318,8,33,1,33,3,33,321,8,
        33,1,33,3,33,324,8,33,1,34,1,34,3,34,328,8,34,1,34,3,34,331,8,34,
        1,34,3,34,334,8,34,1,35,1,35,1,35,3,35,339,8,35,1,35,3,35,342,8,
        35,1,36,1,36,1,36,3,36,347,8,36,1,36,3,36,350,8,36,1,37,1,37,4,37,
        354,8,37,11,37,12,37,355,1,37,3,37,359,8,37,1,37,3,37,362,8,37,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,
        38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,1,38,5,38,387,8,38,10,
        38,12,38,390,9,38,3,38,392,8,38,1,38,3,38,395,8,38,1,38,3,38,398,
        8,38,1,39,1,39,1,39,3,39,403,8,39,1,39,3,39,406,8,39,1,39,3,39,409,
        8,39,1,39,3,39,412,8,39,1,40,1,40,1,40,3,40,417,8,40,1,40,3,40,420,
        8,40,1,41,1,41,1,41,1,41,1,41,1,41,1,41,1,41,3,41,430,8,41,1,41,
        1,41,1,41,1,41,3,41,436,8,41,1,41,3,41,439,8,41,1,41,3,41,442,8,
        41,1,42,1,42,1,42,3,42,447,8,42,1,42,3,42,450,8,42,1,43,1,43,3,43,
        454,8,43,1,43,3,43,457,8,43,1,44,1,44,1,44,1,44,1,44,3,44,464,8,
        44,1,44,3,44,467,8,44,1,44,3,44,470,8,44,1,45,1,45,1,45,3,45,475,
        8,45,1,45,3,45,478,8,45,1,46,1,46,1,46,3,46,483,8,46,1,47,1,47,1,
        47,3,47,488,8,47,1,48,1,48,5,48,492,8,48,10,48,12,48,495,9,48,1,
        48,3,48,498,8,48,1,48,3,48,501,8,48,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        3,49,522,8,49,1,49,1,49,4,49,526,8,49,11,49,12,49,527,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,1,49,
        1,49,1,49,1,49,1,49,1,49,1,49,1,49,3,49,565,8,49,3,49,567,8,49,1,
        49,3,49,570,8,49,1,49,3,49,573,8,49,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,3,50,583,8,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,1,50,
        4,50,606,8,50,11,50,12,50,607,1,50,1,50,1,50,1,50,1,50,5,50,615,
        8,50,10,50,12,50,618,9,50,3,50,620,8,50,1,50,3,50,623,8,50,1,50,
        3,50,626,8,50,1,51,1,51,1,51,1,51,5,51,632,8,51,10,51,12,51,635,
        9,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,1,51,5,51,
        648,8,51,10,51,12,51,651,9,51,1,51,1,51,1,51,4,51,656,8,51,11,51,
        12,51,657,1,51,1,51,1,51,1,51,1,51,1,51,1,51,3,51,667,8,51,1,51,
        3,51,670,8,51,1,51,3,51,673,8,51,1,52,1,52,1,52,1,52,1,52,1,52,3,
        52,681,8,52,1,52,1,52,1,52,1,52,3,52,687,8,52,1,52,1,52,1,52,1,52,
        1,52,1,52,3,52,695,8,52,1,52,1,52,3,52,699,8,52,1,52,1,52,1,52,1,
        52,1,52,1,52,1,52,1,52,1,52,1,52,3,52,711,8,52,3,52,713,8,52,1,52,
        3,52,716,8,52,1,53,1,53,3,53,720,8,53,1,53,3,53,723,8,53,1,53,3,
        53,726,8,53,1,54,1,54,1,54,1,54,1,54,3,54,733,8,54,1,54,1,54,1,54,
        1,54,1,54,3,54,740,8,54,1,54,1,54,1,54,4,54,745,8,54,11,54,12,54,
        746,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,1,54,3,54,
        760,8,54,1,54,3,54,763,8,54,1,54,3,54,766,8,54,1,55,1,55,4,55,770,
        8,55,11,55,12,55,771,1,55,3,55,775,8,55,1,55,3,55,778,8,55,1,55,
        0,0,56,0,2,4,6,8,10,12,14,16,18,20,22,24,26,28,30,32,34,36,38,40,
        42,44,46,48,50,52,54,56,58,60,62,64,66,68,70,72,74,76,78,80,82,84,
        86,88,90,92,94,96,98,100,102,104,106,108,110,0,14,1,0,60,61,2,0,
        70,71,73,73,1,0,80,84,3,0,20,20,22,30,57,57,1,0,11,12,1,0,160,161,
        2,0,152,152,154,154,1,1,17,17,1,0,208,209,2,0,218,219,222,227,1,
        0,232,233,1,0,229,231,1,0,239,240,1,0,237,238,912,0,112,1,0,0,0,
        2,121,1,0,0,0,4,125,1,0,0,0,6,130,1,0,0,0,8,134,1,0,0,0,10,163,1,
        0,0,0,12,168,1,0,0,0,14,170,1,0,0,0,16,172,1,0,0,0,18,174,1,0,0,
        0,20,176,1,0,0,0,22,178,1,0,0,0,24,180,1,0,0,0,26,182,1,0,0,0,28,
        187,1,0,0,0,30,189,1,0,0,0,32,191,1,0,0,0,34,193,1,0,0,0,36,197,
        1,0,0,0,38,206,1,0,0,0,40,217,1,0,0,0,42,229,1,0,0,0,44,243,1,0,
        0,0,46,245,1,0,0,0,48,250,1,0,0,0,50,255,1,0,0,0,52,260,1,0,0,0,
        54,265,1,0,0,0,56,270,1,0,0,0,58,275,1,0,0,0,60,280,1,0,0,0,62,285,
        1,0,0,0,64,313,1,0,0,0,66,315,1,0,0,0,68,325,1,0,0,0,70,335,1,0,
        0,0,72,343,1,0,0,0,74,351,1,0,0,0,76,363,1,0,0,0,78,399,1,0,0,0,
        80,413,1,0,0,0,82,421,1,0,0,0,84,443,1,0,0,0,86,451,1,0,0,0,88,458,
        1,0,0,0,90,471,1,0,0,0,92,479,1,0,0,0,94,484,1,0,0,0,96,489,1,0,
        0,0,98,502,1,0,0,0,100,574,1,0,0,0,102,627,1,0,0,0,104,674,1,0,0,
        0,106,717,1,0,0,0,108,727,1,0,0,0,110,767,1,0,0,0,112,113,3,2,1,
        0,113,114,5,0,0,1,114,1,1,0,0,0,115,122,3,64,32,0,116,122,3,38,19,
        0,117,122,3,40,20,0,118,122,3,4,2,0,119,122,3,44,22,0,120,122,5,
        0,0,1,121,115,1,0,0,0,121,116,1,0,0,0,121,117,1,0,0,0,121,118,1,
        0,0,0,121,119,1,0,0,0,121,120,1,0,0,0,122,3,1,0,0,0,123,126,3,8,
        4,0,124,126,3,6,3,0,125,123,1,0,0,0,125,124,1,0,0,0,126,128,1,0,
        0,0,127,129,5,68,0,0,128,127,1,0,0,0,128,129,1,0,0,0,129,5,1,0,0,
        0,130,131,5,1,0,0,131,132,5,60,0,0,132,133,3,28,14,0,133,7,1,0,0,
        0,134,135,5,1,0,0,135,137,3,10,5,0,136,138,5,59,0,0,137,136,1,0,
        0,0,137,138,1,0,0,0,138,157,1,0,0,0,139,140,3,12,6,0,140,141,5,61,
        0,0,141,142,3,14,7,0,142,146,5,61,0,0,143,144,3,16,8,0,144,145,5,
        61,0,0,145,147,1,0,0,0,146,143,1,0,0,0,146,147,1,0,0,0,147,148,1,
        0,0,0,148,149,5,65,0,0,149,151,3,18,9,0,150,152,3,24,12,0,151,150,
        1,0,0,0,151,152,1,0,0,0,152,155,1,0,0,0,153,154,7,0,0,0,154,156,
        3,26,13,0,155,153,1,0,0,0,155,156,1,0,0,0,156,158,1,0,0,0,157,139,
        1,0,0,0,157,158,1,0,0,0,158,161,1,0,0,0,159,160,5,62,0,0,160,162,
        3,36,18,0,161,159,1,0,0,0,161,162,1,0,0,0,162,9,1,0,0,0,163,166,
        3,20,10,0,164,165,5,60,0,0,165,167,3,22,11,0,166,164,1,0,0,0,166,
        167,1,0,0,0,167,11,1,0,0,0,168,169,5,69,0,0,169,13,1,0,0,0,170,171,
        5,73,0,0,171,15,1,0,0,0,172,173,5,73,0,0,173,17,1,0,0,0,174,175,
        7,1,0,0,175,19,1,0,0,0,176,177,5,73,0,0,177,21,1,0,0,0,178,179,5,
        73,0,0,179,23,1,0,0,0,180,181,5,72,0,0,181,25,1,0,0,0,182,185,5,
        73,0,0,183,184,5,61,0,0,184,186,5,73,0,0,185,183,1,0,0,0,185,186,
        1,0,0,0,186,27,1,0,0,0,187,188,5,73,0,0,188,29,1,0,0,0,189,190,5,
        73,0,0,190,31,1,0,0,0,191,192,5,73,0,0,192,33,1,0,0,0,193,194,3,
        30,15,0,194,195,5,66,0,0,195,196,3,32,16,0,196,35,1,0,0,0,197,204,
        3,34,17,0,198,199,5,67,0,0,199,201,3,34,17,0,200,198,1,0,0,0,201,
        202,1,0,0,0,202,200,1,0,0,0,202,203,1,0,0,0,203,205,1,0,0,0,204,
        200,1,0,0,0,204,205,1,0,0,0,205,37,1,0,0,0,206,211,5,3,0,0,207,210,
        3,42,21,0,208,210,5,55,0,0,209,207,1,0,0,0,209,208,1,0,0,0,210,213,
        1,0,0,0,211,209,1,0,0,0,211,212,1,0,0,0,212,215,1,0,0,0,213,211,
        1,0,0,0,214,216,5,17,0,0,215,214,1,0,0,0,215,216,1,0,0,0,216,39,
        1,0,0,0,217,218,5,2,0,0,218,220,7,2,0,0,219,221,5,85,0,0,220,219,
        1,0,0,0,220,221,1,0,0,0,221,223,1,0,0,0,222,224,5,86,0,0,223,222,
        1,0,0,0,223,224,1,0,0,0,224,226,1,0,0,0,225,227,5,17,0,0,226,225,
        1,0,0,0,226,227,1,0,0,0,227,41,1,0,0,0,228,230,7,3,0,0,229,228,1,
        0,0,0,230,231,1,0,0,0,231,229,1,0,0,0,231,232,1,0,0,0,232,43,1,0,
        0,0,233,244,3,46,23,0,234,244,3,48,24,0,235,244,3,50,25,0,236,244,
        3,52,26,0,237,244,3,54,27,0,238,244,3,56,28,0,239,244,3,60,30,0,
        240,244,3,58,29,0,241,244,3,62,31,0,242,244,5,17,0,0,243,233,1,0,
        0,0,243,234,1,0,0,0,243,235,1,0,0,0,243,236,1,0,0,0,243,237,1,0,
        0,0,243,238,1,0,0,0,243,239,1,0,0,0,243,240,1,0,0,0,243,241,1,0,
        0,0,243,242,1,0,0,0,244,45,1,0,0,0,245,246,5,5,0,0,246,248,5,89,
        0,0,247,249,5,17,0,0,248,247,1,0,0,0,248,249,1,0,0,0,249,47,1,0,
        0,0,250,251,5,10,0,0,251,253,5,89,0,0,252,254,5,17,0,0,253,252,1,
        0,0,0,253,254,1,0,0,0,254,49,1,0,0,0,255,256,5,6,0,0,256,258,5,89,
        0,0,257,259,5,17,0,0,258,257,1,0,0,0,258,259,1,0,0,0,259,51,1,0,
        0,0,260,261,5,7,0,0,261,263,5,89,0,0,262,264,5,17,0,0,263,262,1,
        0,0,0,263,264,1,0,0,0,264,53,1,0,0,0,265,266,5,9,0,0,266,268,5,89,
        0,0,267,269,5,17,0,0,268,267,1,0,0,0,268,269,1,0,0,0,269,55,1,0,
        0,0,270,271,5,8,0,0,271,273,5,89,0,0,272,274,5,17,0,0,273,272,1,
        0,0,0,273,274,1,0,0,0,274,57,1,0,0,0,275,276,5,13,0,0,276,278,5,
        89,0,0,277,279,5,17,0,0,278,277,1,0,0,0,278,279,1,0,0,0,279,59,1,
        0,0,0,280,281,7,4,0,0,281,283,5,94,0,0,282,284,5,17,0,0,283,282,
        1,0,0,0,283,284,1,0,0,0,284,61,1,0,0,0,285,286,5,16,0,0,286,288,
        5,94,0,0,287,289,5,17,0,0,288,287,1,0,0,0,288,289,1,0,0,0,289,63,
        1,0,0,0,290,314,3,78,39,0,291,314,3,76,38,0,292,314,3,80,40,0,293,
        314,3,74,37,0,294,314,3,82,41,0,295,314,3,84,42,0,296,314,3,86,43,
        0,297,314,3,88,44,0,298,314,3,96,48,0,299,314,3,70,35,0,300,314,
        3,66,33,0,301,314,3,68,34,0,302,314,3,72,36,0,303,314,3,90,45,0,
        304,314,3,94,47,0,305,314,3,92,46,0,306,314,3,98,49,0,307,314,3,
        100,50,0,308,314,3,102,51,0,309,314,3,104,52,0,310,314,3,106,53,
        0,311,314,3,108,54,0,312,314,3,110,55,0,313,290,1,0,0,0,313,291,
        1,0,0,0,313,292,1,0,0,0,313,293,1,0,0,0,313,294,1,0,0,0,313,295,
        1,0,0,0,313,296,1,0,0,0,313,297,1,0,0,0,313,298,1,0,0,0,313,299,
        1,0,0,0,313,300,1,0,0,0,313,301,1,0,0,0,313,302,1,0,0,0,313,303,
        1,0,0,0,313,304,1,0,0,0,313,305,1,0,0,0,313,306,1,0,0,0,313,307,
        1,0,0,0,313,308,1,0,0,0,313,309,1,0,0,0,313,310,1,0,0,0,313,311,
        1,0,0,0,313,312,1,0,0,0,314,65,1,0,0,0,315,317,5,32,0,0,316,318,
        5,55,0,0,317,316,1,0,0,0,317,318,1,0,0,0,318,320,1,0,0,0,319,321,
        5,19,0,0,320,319,1,0,0,0,320,321,1,0,0,0,321,323,1,0,0,0,322,324,
        5,17,0,0,323,322,1,0,0,0,323,324,1,0,0,0,324,67,1,0,0,0,325,327,
        5,33,0,0,326,328,5,55,0,0,327,326,1,0,0,0,327,328,1,0,0,0,328,330,
        1,0,0,0,329,331,5,19,0,0,330,329,1,0,0,0,330,331,1,0,0,0,331,333,
        1,0,0,0,332,334,5,17,0,0,333,332,1,0,0,0,333,334,1,0,0,0,334,69,
        1,0,0,0,335,336,5,35,0,0,336,338,7,5,0,0,337,339,5,163,0,0,338,337,
        1,0,0,0,338,339,1,0,0,0,339,341,1,0,0,0,340,342,5,17,0,0,341,340,
        1,0,0,0,341,342,1,0,0,0,342,71,1,0,0,0,343,344,5,34,0,0,344,346,
        5,285,0,0,345,347,5,287,0,0,346,345,1,0,0,0,346,347,1,0,0,0,347,
        349,1,0,0,0,348,350,5,17,0,0,349,348,1,0,0,0,349,350,1,0,0,0,350,
        73,1,0,0,0,351,353,5,39,0,0,352,354,5,122,0,0,353,352,1,0,0,0,354,
        355,1,0,0,0,355,353,1,0,0,0,355,356,1,0,0,0,356,358,1,0,0,0,357,
        359,5,19,0,0,358,357,1,0,0,0,358,359,1,0,0,0,359,361,1,0,0,0,360,
        362,5,17,0,0,361,360,1,0,0,0,361,362,1,0,0,0,362,75,1,0,0,0,363,
        391,5,40,0,0,364,365,5,109,0,0,365,392,5,118,0,0,366,367,5,110,0,
        0,367,392,5,118,0,0,368,369,5,111,0,0,369,392,5,118,0,0,370,388,
        5,112,0,0,371,372,5,114,0,0,372,373,5,108,0,0,373,387,5,118,0,0,
        374,375,5,113,0,0,375,376,5,108,0,0,376,387,5,118,0,0,377,378,5,
        115,0,0,378,379,5,108,0,0,379,387,5,118,0,0,380,381,5,116,0,0,381,
        382,5,108,0,0,382,387,5,118,0,0,383,384,5,117,0,0,384,385,5,108,
        0,0,385,387,5,118,0,0,386,371,1,0,0,0,386,374,1,0,0,0,386,377,1,
        0,0,0,386,380,1,0,0,0,386,383,1,0,0,0,387,390,1,0,0,0,388,386,1,
        0,0,0,388,389,1,0,0,0,389,392,1,0,0,0,390,388,1,0,0,0,391,364,1,
        0,0,0,391,366,1,0,0,0,391,368,1,0,0,0,391,370,1,0,0,0,392,394,1,
        0,0,0,393,395,5,119,0,0,394,393,1,0,0,0,394,395,1,0,0,0,395,397,
        1,0,0,0,396,398,5,120,0,0,397,396,1,0,0,0,397,398,1,0,0,0,398,77,
        1,0,0,0,399,400,5,38,0,0,400,405,5,103,0,0,401,403,5,105,0,0,402,
        401,1,0,0,0,402,403,1,0,0,0,403,404,1,0,0,0,404,406,5,104,0,0,405,
        402,1,0,0,0,405,406,1,0,0,0,406,408,1,0,0,0,407,409,5,106,0,0,408,
        407,1,0,0,0,408,409,1,0,0,0,409,411,1,0,0,0,410,412,5,17,0,0,411,
        410,1,0,0,0,411,412,1,0,0,0,412,79,1,0,0,0,413,414,5,41,0,0,414,
        416,5,125,0,0,415,417,5,19,0,0,416,415,1,0,0,0,416,417,1,0,0,0,417,
        419,1,0,0,0,418,420,5,17,0,0,419,418,1,0,0,0,419,420,1,0,0,0,420,
        81,1,0,0,0,421,435,5,47,0,0,422,436,5,139,0,0,423,436,5,140,0,0,
        424,436,5,141,0,0,425,426,5,133,0,0,426,427,5,134,0,0,427,436,5,
        142,0,0,428,430,5,136,0,0,429,428,1,0,0,0,429,430,1,0,0,0,430,431,
        1,0,0,0,431,432,5,134,0,0,432,433,5,142,0,0,433,434,5,135,0,0,434,
        436,5,136,0,0,435,422,1,0,0,0,435,423,1,0,0,0,435,424,1,0,0,0,435,
        425,1,0,0,0,435,429,1,0,0,0,436,438,1,0,0,0,437,439,5,131,0,0,438,
        437,1,0,0,0,438,439,1,0,0,0,439,441,1,0,0,0,440,442,5,17,0,0,441,
        440,1,0,0,0,441,442,1,0,0,0,442,83,1,0,0,0,443,444,5,43,0,0,444,
        446,5,130,0,0,445,447,5,19,0,0,446,445,1,0,0,0,446,447,1,0,0,0,447,
        449,1,0,0,0,448,450,5,17,0,0,449,448,1,0,0,0,449,450,1,0,0,0,450,
        85,1,0,0,0,451,453,5,44,0,0,452,454,5,19,0,0,453,452,1,0,0,0,453,
        454,1,0,0,0,454,456,1,0,0,0,455,457,5,17,0,0,456,455,1,0,0,0,456,
        457,1,0,0,0,457,87,1,0,0,0,458,459,5,48,0,0,459,463,5,146,0,0,460,
        464,5,148,0,0,461,462,5,149,0,0,462,464,5,145,0,0,463,460,1,0,0,
        0,463,461,1,0,0,0,464,466,1,0,0,0,465,467,5,147,0,0,466,465,1,0,
        0,0,466,467,1,0,0,0,467,469,1,0,0,0,468,470,5,17,0,0,469,468,1,0,
        0,0,469,470,1,0,0,0,470,89,1,0,0,0,471,472,5,46,0,0,472,474,7,6,
        0,0,473,475,5,153,0,0,474,473,1,0,0,0,474,475,1,0,0,0,475,477,1,
        0,0,0,476,478,5,155,0,0,477,476,1,0,0,0,477,478,1,0,0,0,478,91,1,
        0,0,0,479,480,5,36,0,0,480,482,5,98,0,0,481,483,7,7,0,0,482,481,
        1,0,0,0,482,483,1,0,0,0,483,93,1,0,0,0,484,485,5,37,0,0,485,487,
        5,97,0,0,486,488,5,17,0,0,487,486,1,0,0,0,487,488,1,0,0,0,488,95,
        1,0,0,0,489,493,5,45,0,0,490,492,5,157,0,0,491,490,1,0,0,0,492,495,
        1,0,0,0,493,491,1,0,0,0,493,494,1,0,0,0,494,497,1,0,0,0,495,493,
        1,0,0,0,496,498,5,158,0,0,497,496,1,0,0,0,497,498,1,0,0,0,498,500,
        1,0,0,0,499,501,5,17,0,0,500,499,1,0,0,0,500,501,1,0,0,0,501,97,
        1,0,0,0,502,566,5,49,0,0,503,504,5,165,0,0,504,505,5,191,0,0,505,
        506,5,166,0,0,506,507,5,167,0,0,507,508,5,191,0,0,508,509,5,169,
        0,0,509,567,5,191,0,0,510,511,5,168,0,0,511,512,5,191,0,0,512,513,
        5,187,0,0,513,567,5,191,0,0,514,515,5,165,0,0,515,516,5,191,0,0,
        516,517,5,166,0,0,517,518,5,167,0,0,518,521,5,191,0,0,519,520,5,
        170,0,0,520,522,5,191,0,0,521,519,1,0,0,0,521,522,1,0,0,0,522,567,
        1,0,0,0,523,525,5,171,0,0,524,526,5,191,0,0,525,524,1,0,0,0,526,
        527,1,0,0,0,527,525,1,0,0,0,527,528,1,0,0,0,528,567,1,0,0,0,529,
        567,5,172,0,0,530,531,5,173,0,0,531,567,5,191,0,0,532,533,5,174,
        0,0,533,567,5,191,0,0,534,564,5,175,0,0,535,536,5,176,0,0,536,537,
        5,191,0,0,537,565,5,55,0,0,538,565,5,177,0,0,539,540,5,178,0,0,540,
        565,5,191,0,0,541,542,5,179,0,0,542,543,5,191,0,0,543,544,5,55,0,
        0,544,565,5,55,0,0,545,546,5,180,0,0,546,547,5,191,0,0,547,565,5,
        55,0,0,548,549,5,181,0,0,549,550,5,191,0,0,550,565,5,191,0,0,551,
        552,5,182,0,0,552,553,5,191,0,0,553,565,5,191,0,0,554,555,5,183,
        0,0,555,565,5,191,0,0,556,557,5,184,0,0,557,558,5,191,0,0,558,565,
        5,191,0,0,559,560,5,185,0,0,560,565,5,191,0,0,561,562,5,186,0,0,
        562,563,5,191,0,0,563,565,5,55,0,0,564,535,1,0,0,0,564,538,1,0,0,
        0,564,539,1,0,0,0,564,541,1,0,0,0,564,545,1,0,0,0,564,548,1,0,0,
        0,564,551,1,0,0,0,564,554,1,0,0,0,564,556,1,0,0,0,564,559,1,0,0,
        0,564,561,1,0,0,0,565,567,1,0,0,0,566,503,1,0,0,0,566,510,1,0,0,
        0,566,514,1,0,0,0,566,523,1,0,0,0,566,529,1,0,0,0,566,530,1,0,0,
        0,566,532,1,0,0,0,566,534,1,0,0,0,567,569,1,0,0,0,568,570,5,189,
        0,0,569,568,1,0,0,0,569,570,1,0,0,0,570,572,1,0,0,0,571,573,5,17,
        0,0,572,571,1,0,0,0,572,573,1,0,0,0,573,99,1,0,0,0,574,619,5,50,
        0,0,575,576,5,207,0,0,576,620,7,8,0,0,577,578,5,200,0,0,578,582,
        5,211,0,0,579,580,5,211,0,0,580,581,5,194,0,0,581,583,5,211,0,0,
        582,579,1,0,0,0,582,583,1,0,0,0,583,620,1,0,0,0,584,585,5,197,0,
        0,585,620,5,211,0,0,586,587,5,202,0,0,587,620,5,211,0,0,588,589,
        5,201,0,0,589,620,5,211,0,0,590,591,5,203,0,0,591,620,5,211,0,0,
        592,593,5,199,0,0,593,620,5,211,0,0,594,595,5,205,0,0,595,620,5,
        206,0,0,596,597,5,204,0,0,597,598,5,206,0,0,598,599,5,210,0,0,599,
        620,5,211,0,0,600,601,5,198,0,0,601,605,5,211,0,0,602,603,5,211,
        0,0,603,604,5,194,0,0,604,606,5,211,0,0,605,602,1,0,0,0,606,607,
        1,0,0,0,607,605,1,0,0,0,607,608,1,0,0,0,608,620,1,0,0,0,609,610,
        5,196,0,0,610,616,5,211,0,0,611,612,5,211,0,0,612,613,5,194,0,0,
        613,615,5,211,0,0,614,611,1,0,0,0,615,618,1,0,0,0,616,614,1,0,0,
        0,616,617,1,0,0,0,617,620,1,0,0,0,618,616,1,0,0,0,619,575,1,0,0,
        0,619,577,1,0,0,0,619,584,1,0,0,0,619,586,1,0,0,0,619,588,1,0,0,
        0,619,590,1,0,0,0,619,592,1,0,0,0,619,594,1,0,0,0,619,596,1,0,0,
        0,619,600,1,0,0,0,619,609,1,0,0,0,620,622,1,0,0,0,621,623,5,193,
        0,0,622,621,1,0,0,0,622,623,1,0,0,0,623,625,1,0,0,0,624,626,5,17,
        0,0,625,624,1,0,0,0,625,626,1,0,0,0,626,101,1,0,0,0,627,666,5,51,
        0,0,628,629,5,241,0,0,629,633,5,241,0,0,630,632,7,9,0,0,631,630,
        1,0,0,0,632,635,1,0,0,0,633,631,1,0,0,0,633,634,1,0,0,0,634,667,
        1,0,0,0,635,633,1,0,0,0,636,637,7,10,0,0,637,667,5,241,0,0,638,639,
        5,220,0,0,639,640,5,241,0,0,640,641,5,214,0,0,641,667,5,241,0,0,
        642,643,5,221,0,0,643,667,5,241,0,0,644,667,5,234,0,0,645,649,5,
        216,0,0,646,648,7,9,0,0,647,646,1,0,0,0,648,651,1,0,0,0,649,647,
        1,0,0,0,649,650,1,0,0,0,650,667,1,0,0,0,651,649,1,0,0,0,652,653,
        5,216,0,0,653,655,5,228,0,0,654,656,7,11,0,0,655,654,1,0,0,0,656,
        657,1,0,0,0,657,655,1,0,0,0,657,658,1,0,0,0,658,667,1,0,0,0,659,
        660,5,216,0,0,660,661,5,235,0,0,661,667,7,12,0,0,662,663,5,216,0,
        0,663,664,7,13,0,0,664,665,5,236,0,0,665,667,5,241,0,0,666,628,1,
        0,0,0,666,636,1,0,0,0,666,638,1,0,0,0,666,642,1,0,0,0,666,644,1,
        0,0,0,666,645,1,0,0,0,666,652,1,0,0,0,666,659,1,0,0,0,666,662,1,
        0,0,0,667,669,1,0,0,0,668,670,5,213,0,0,669,668,1,0,0,0,669,670,
        1,0,0,0,670,672,1,0,0,0,671,673,5,17,0,0,672,671,1,0,0,0,672,673,
        1,0,0,0,673,103,1,0,0,0,674,712,5,52,0,0,675,676,5,244,0,0,676,677,
        5,245,0,0,677,678,5,246,0,0,678,680,5,257,0,0,679,681,5,243,0,0,
        680,679,1,0,0,0,680,681,1,0,0,0,681,713,1,0,0,0,682,683,5,244,0,
        0,683,684,5,250,0,0,684,686,5,257,0,0,685,687,5,243,0,0,686,685,
        1,0,0,0,686,687,1,0,0,0,687,713,1,0,0,0,688,689,5,247,0,0,689,690,
        5,249,0,0,690,691,5,248,0,0,691,692,5,257,0,0,692,694,5,254,0,0,
        693,695,5,260,0,0,694,693,1,0,0,0,694,695,1,0,0,0,695,698,1,0,0,
        0,696,697,5,251,0,0,697,699,5,252,0,0,698,696,1,0,0,0,698,699,1,
        0,0,0,699,700,1,0,0,0,700,713,5,243,0,0,701,702,5,255,0,0,702,703,
        5,249,0,0,703,704,5,248,0,0,704,705,5,257,0,0,705,706,5,256,0,0,
        706,707,5,249,0,0,707,708,5,248,0,0,708,710,5,257,0,0,709,711,5,
        243,0,0,710,709,1,0,0,0,710,711,1,0,0,0,711,713,1,0,0,0,712,675,
        1,0,0,0,712,682,1,0,0,0,712,688,1,0,0,0,712,701,1,0,0,0,713,715,
        1,0,0,0,714,716,5,17,0,0,715,714,1,0,0,0,715,716,1,0,0,0,716,105,
        1,0,0,0,717,719,5,42,0,0,718,720,5,262,0,0,719,718,1,0,0,0,719,720,
        1,0,0,0,720,722,1,0,0,0,721,723,5,264,0,0,722,721,1,0,0,0,722,723,
        1,0,0,0,723,725,1,0,0,0,724,726,5,17,0,0,725,724,1,0,0,0,725,726,
        1,0,0,0,726,107,1,0,0,0,727,759,5,53,0,0,728,729,5,266,0,0,729,732,
        5,275,0,0,730,731,5,267,0,0,731,733,5,277,0,0,732,730,1,0,0,0,732,
        733,1,0,0,0,733,760,1,0,0,0,734,735,5,266,0,0,735,760,5,276,0,0,
        736,737,5,268,0,0,737,739,5,269,0,0,738,740,5,277,0,0,739,738,1,
        0,0,0,739,740,1,0,0,0,740,744,1,0,0,0,741,742,5,277,0,0,742,743,
        5,270,0,0,743,745,5,277,0,0,744,741,1,0,0,0,745,746,1,0,0,0,746,
        744,1,0,0,0,746,747,1,0,0,0,747,760,1,0,0,0,748,749,5,271,0,0,749,
        750,5,269,0,0,750,760,5,277,0,0,751,752,5,272,0,0,752,753,5,269,
        0,0,753,760,5,277,0,0,754,755,5,273,0,0,755,756,5,269,0,0,756,760,
        5,277,0,0,757,758,5,274,0,0,758,760,5,269,0,0,759,728,1,0,0,0,759,
        734,1,0,0,0,759,736,1,0,0,0,759,748,1,0,0,0,759,751,1,0,0,0,759,
        754,1,0,0,0,759,757,1,0,0,0,760,762,1,0,0,0,761,763,5,279,0,0,762,
        761,1,0,0,0,762,763,1,0,0,0,763,765,1,0,0,0,764,766,5,278,0,0,765,
        764,1,0,0,0,765,766,1,0,0,0,766,109,1,0,0,0,767,769,5,54,0,0,768,
        770,5,281,0,0,769,768,1,0,0,0,770,771,1,0,0,0,771,769,1,0,0,0,771,
        772,1,0,0,0,772,774,1,0,0,0,773,775,5,283,0,0,774,773,1,0,0,0,774,
        775,1,0,0,0,775,777,1,0,0,0,776,778,5,282,0,0,777,776,1,0,0,0,777,
        778,1,0,0,0,778,111,1,0,0,0,110,121,125,128,137,146,151,155,157,
        161,166,185,202,204,209,211,215,220,223,226,231,243,248,253,258,
        263,268,273,278,283,288,313,317,320,323,327,330,333,338,341,346,
        349,355,358,361,386,388,391,394,397,402,405,408,411,416,419,429,
        435,438,441,446,449,453,456,463,466,469,474,477,482,487,493,497,
        500,521,527,564,566,569,572,582,607,616,619,622,625,633,649,657,
        666,669,672,680,686,694,698,710,712,715,719,722,725,732,739,746,
        759,762,765,771,774,777
    ]

class SQLParser ( Parser ):

    grammarFileName = "SQLParser.g4"

    atn = ATNDeserializer().deserialize(serializedATN())

    decisionsToDFA = [ DFA(ds, i) for i, ds in enumerate(atn.decisionToState) ]

    sharedContextCache = PredictionContextCache()

    literalNames = [ "<INVALID>", "'_CONNECT'", "'_SESSION'", "'_DISCONNECT'", 
                     "<INVALID>", "<INVALID>", "'INSERT'", "'UPDATE'", "'SELECT'", 
                     "'DELETE'", "'REPLACE'", "'DECLARE'", "<INVALID>", 
                     "'DROP'", "'COMMIT'", "'ROLLBACK'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'.'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'\"'", "'''", "'\\'", "<INVALID>", "'_EXIT'", 
                     "'_QUIT'", "'_SLEEP'", "'_USE'", "<INVALID>", "'> {%'", 
                     "'_ASSERT'", "'_START'", "'_LOAD'", "'_HOST'", "'_HELP'", 
                     "'_IF'", "'_ENDIF'", "'_SET'", "'_SPOOL'", "'_LOOP'", 
                     "'_WHENEVER'", "'_SSH'", "'_JOB'", "'_COMPARE'", "'_DATA'", 
                     "'_MONITOR'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'?'", "'#'", "'|'", "'//'", "<INVALID>", 
                     "'&'", "<INVALID>", "'JDBC'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'HINT'", "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'RELEASE'", "<INVALID>", "'SAVEURL'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'PLUGIN'", "'SCRIPT'", "'MAP'", "'JDBCDRIVER'", "<INVALID>", 
                     "'CLASS'", "'NAME'", "'PROPS'", "'URL'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'UNTIL'", "'INTERVAL'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'BREAK'", "'END'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'ERROR'", "<INVALID>", "<INVALID>", "'EXIT'", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'API'", "'SQL'", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'CONNECT'", "'WITH'", "'USER'", 
                     "<INVALID>", "'KEYFILE'", "'PASSWORD'", "'EXECUTE'", 
                     "'DISCONNECT'", "<INVALID>", "<INVALID>", "'SFTP'", 
                     "'CHMOD'", "'GETCWD'", "'CHDIR'", "'CHOWN'", "'MKDIR'", 
                     "'GET'", "'PUT'", "'REMOVE'", "'RENAME'", "'LISTDIR'", 
                     "'TRUNCATE'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "'WAIT'", "'SHUTDOWN'", "'ABORT'", 
                     "'TIMER'", "'REGISTER'", "'DEREGISTER'", "'WORKER'", 
                     "'JOBMANAGER'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "'=>'", "<INVALID>", 
                     "<INVALID>", "'UNSET'", "'MASK'", "'NOMASK'", "'MASKLINE'", 
                     "'NOMASKLINE'", "'CASE'", "'NOCASE'", "'IGBLANK'", 
                     "'NOIGBLANK'", "'TRIM'", "'NOTRIM'", "'OUTPUT'", "'CONSOLE'", 
                     "'DIFFFILE'", "'HTMLFILE'", "'SKIPLINE'", "'NOSKIPLINE'", 
                     "'RESET'", "'ALGORITHM'", "'ENCODING'", "'WORK'", "'REFERENCE'", 
                     "'LCS'", "'MYERS'", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'SEEDFILE'", "'DIR'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'HDFSUSER'", "'ROWS'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "'CONVERT'", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "<INVALID>", "<INVALID>", "<INVALID>", "<INVALID>", 
                     "'MONITORMANAGER'", "'WORKERS'", "<INVALID>", "'TASK'", 
                     "<INVALID>", "<INVALID>", "'STOP'", "'REPORT'", "'LIST'" ]

    symbolicNames = [ "<INVALID>", "CONNECT", "SESSION", "DISCONNECT", "MINUS_MINUS_COMMENT", 
                      "SQL_CREATE", "SQL_INSERT", "SQL_UPDATE", "SQL_SELECT", 
                      "SQL_DELETE", "SQL_REPLACE", "SQL_DECLARE", "SQL_BEGIN", 
                      "SQL_DROP", "SQL_COMMIT", "SQL_ROLLBACK", "SQL_CREATE_PROCEDURE", 
                      "CRLF", "COMMA", "SEMICOLON", "COLON", "AT", "DOT", 
                      "SLASH", "BRACKET_OPEN", "BRACKET_CLOSE", "SQUARE_OPEN", 
                      "SQUARE_CLOSE", "DOUBLE_QUOTE", "SINGLE_QUOTE", "ESCAPE", 
                      "SPACE", "EXIT", "QUIT", "SLEEP", "USE", "ECHO", "SCRIPT", 
                      "ASSERT", "START", "LOAD", "HOST", "HELP", "IF", "ENDIF", 
                      "SET", "SPOOL", "LOOP", "WHENEVER", "SSH", "JOB", 
                      "COMPARE", "DATA", "MONITOR", "PLUGIN", "INT", "DECIMAL", 
                      "String", "CONNECT_SPACE", "CONNECT_AT", "CONNECT_SLASH", 
                      "CONNECT_COLON", "CONNECT_QUESTION", "CONNECT_POUND", 
                      "CONNECT_OR", "CONNECT_DASH", "CONNECT_EQUAL", "CONNECT_PARA_AND", 
                      "CONNECT_SEMICOLON", "JDBC", "IPV4", "IPV6", "CONNECT_PORT", 
                      "CONNECT_STRING", "CommentString", "HINT_SP", "HINT", 
                      "HINT_CLOSE", "HINT_STRING", "SESSION_SPACE", "SESSION_SAVE", 
                      "SESSION_RELEASE", "SESSION_RESTORE", "SESSION_SAVEURL", 
                      "SESSION_SHOW", "SESSION_NAME", "SESSION_END", "SQL_CRLF", 
                      "SQL_SPACE", "SQL_END", "SQL_STRING", "SQL_SINGLE", 
                      "SQL_OTHER", "SQL_PROCEDURE_CRLF", "SQL_SLASH", "SQL_PROCEDURE_SLASH", 
                      "SQLProcedureStatement", "ScriptBlock", "EchoBlock", 
                      "ASSERT_SPACE", "ASSERT_OPEN", "ASSERT_CLOSE", "ASSERT_CRLF", 
                      "ASSERT_EXPRESSION", "ASSERT_NAME", "ASSERT_COMMA", 
                      "ASSERT_SEMICOLON", "LOAD_SPACE", "LOAD_EQUAL", "LOAD_PLUGIN", 
                      "LOAD_SCRIPT", "LOAD_MAP", "LOAD_JDBCDRIVER", "LOAD_JDBCFILE", 
                      "LOAD_JDBCCLASS", "LOAD_JDBCNAME", "LOAD_JDBCPROP", 
                      "LOAD_JDBCURL", "LOAD_EXPRESSION", "LOAD_SEMICOLON", 
                      "LOAD_CRLF", "START_SPACE", "START_EXPRESSION", "START_CRLF", 
                      "HOST_SPACE", "HOST_EXPRESSION", "HOST_CRLF", "IF_SPACE", 
                      "IF_OPEN", "IF_CLOSE", "IF_EXPRESSION", "LOOP_SEMICOLON", 
                      "LOOP_SPACE", "LOOP_BEGIN", "LOOP_UNTIL", "LOOP_INTERVAL", 
                      "LOOP_INT", "LOOP_OPEN", "LOOP_CLOSE", "LOOP_BREAK", 
                      "LOOP_END", "LOOP_CONTINUE", "LOOP_EXPRESSION", "LOOP_CRLF", 
                      "WHENEVER_SPACE", "WHENEVER_EXITCODE", "WHENEVER_ERROR", 
                      "WHENEVER_SEMICOLON", "WHENEVER_CONTINUE", "WHENEVER_EXIT", 
                      "WHENEVER_CRLF", "SPOOL_SPACE", "SPOOL_EXPRESSION", 
                      "SPOOL_SEMICOLON", "SPOOL_OFF", "SPOOL_CRLF", "SET_SPACE", 
                      "SET_EXPRESSION", "SET_SEMICOLON", "SET_CRLF", "USE_API", 
                      "USE_SQL", "USE_SPACE", "USE_SEMICOLON", "USE_CRLF", 
                      "SSH_CONNECT", "SSH_WITH", "SSH_USER", "SSH_SET", 
                      "SSH_KEYFILE", "SSH_PASSWORD", "SSH_EXECUTE", "SSH_DISCONNECT", 
                      "SSH_SAVE", "SSH_RESTORE", "SFTP", "SFTP_CHMOD", "SFTP_GETCWD", 
                      "SFTP_CHDIR", "SFTP_CHOWN", "SFTP_MKDIR", "SFTP_GET", 
                      "SFTP_PUT", "SFTP_REMOVE", "SFTP_RENAME", "SFTP_LISTDIR", 
                      "SFTP_TRUNCATE", "SSH_EQUAL", "SSH_SPACE", "SSH_SEMICOLON", 
                      "SSH_CRLF", "SSH_EXPRESSION", "JOB_SPACE", "JOB_SEMICOLON", 
                      "JOB_EQUAL", "JOB_CRLF", "JOB_CREATE", "JOB_SHOW", 
                      "JOB_SET", "JOB_START", "JOB_WAIT", "JOB_SHUTDOWN", 
                      "JOB_ABORT", "JOB_TIMER", "JOB_REGISTER", "JOB_DEREGISTER", 
                      "JOB_WORKER", "JOB_MANGER", "JOB_ON", "JOB_OFF", "JOB_TO", 
                      "JOB_EXPRESSION", "COMPARE_SPACE", "COMPARE_SEMICOLON", 
                      "COMPARE_EQUAL", "COMPARE_CRLF", "COMPARE_SET", "COMPARE_UNSET", 
                      "COMPARE_MASK", "COMPARE_NOMASK", "COMPARE_MASKLINE", 
                      "COMPARE_NOMASKLINE", "COMPARE_CASE", "COMPARE_NOCASE", 
                      "COMPARE_IGBLANK", "COMPARE_NOIGBLANK", "COMPARE_TRIM", 
                      "COMPARE_NOTRIM", "COMPARE_OUTPUT", "COMPARE_CONSOLE", 
                      "COMPARE_DIFFFILE", "COMPARE_HTMLFILE", "COMPARE_SKIPLINE", 
                      "COMPARE_NOSKIPLINE", "COMPARE_RESET", "COMPARE_ALGORITHM", 
                      "COMPARE_ENCODING", "COMPARE_WORK", "COMPARE_REFERENCE", 
                      "COMPARE_LCS", "COMPARE_MYERS", "COMPARE_EXPRESSION", 
                      "DATA_SPACE", "DATA_SEMICOLON", "DATA_SET", "DATA_SEEDFILE", 
                      "DATA_DIR", "DATA_CREATE", "DATA_FILE", "DATA_FILETYPE", 
                      "DATA_HDFSUSER", "DATA_ROWS", "DATA_INT", "DATA_COMMA", 
                      "DATACOLUMN_OPEN", "DATA_CONVERT", "DATA_TO", "DATA_EXPRESSION", 
                      "DATACOLUMN_SPACE", "DATACOLUMN_CLOSE", "DATACOLUMN_CONTENT", 
                      "HELP_SPACE", "HELP_COMMAND", "HELP_CRLF", "HELP_SEMICOLON", 
                      "MONITOR_SPACE", "MONITOR_MANAGER", "MONITOR_WORKERS", 
                      "MONITOR_CREATE", "MONITOR_TASK", "MONITOR_EQUAL", 
                      "MONITOR_START", "MONITOR_STOP", "MONITOR_REPORT", 
                      "MONITOR_LIST", "MONITOR_ON", "MONITOR_OFF", "MONITOR_EXPRESSION", 
                      "MONITOR_CRLF", "MONITOR_SEMICOLON", "PLUGIN_SPACE", 
                      "PLUGIN_EXPRESSION", "PLUGIN_CRLF", "PLUGIN_SEMICOLON", 
                      "SLEEP_SPACE", "SLEEP_EXPRESSION", "SLEEP_CRLF", "SLEEP_SEMICOLON" ]

    RULE_prog = 0
    RULE_command = 1
    RULE_connect = 2
    RULE_connectlocal = 3
    RULE_connectjdbc = 4
    RULE_connectUserInfo = 5
    RULE_connectDriver = 6
    RULE_connectDriverSchema = 7
    RULE_connectDriverType = 8
    RULE_connectHost = 9
    RULE_connectUser = 10
    RULE_connectPassword = 11
    RULE_connectPort = 12
    RULE_connectService = 13
    RULE_connectlocalService = 14
    RULE_connectParameterName = 15
    RULE_connectParameterValue = 16
    RULE_connectParameter = 17
    RULE_connectParameters = 18
    RULE_disconnect = 19
    RULE_session = 20
    RULE_expression = 21
    RULE_sql = 22
    RULE_sqlCreate = 23
    RULE_sqlReplace = 24
    RULE_sqlInsert = 25
    RULE_sqlUpdate = 26
    RULE_sqlDelete = 27
    RULE_sqlSelect = 28
    RULE_sqlDrop = 29
    RULE_sqlDeclare = 30
    RULE_sqlCreateProcedure = 31
    RULE_baseCommand = 32
    RULE_exit = 33
    RULE_quit = 34
    RULE_use = 35
    RULE_sleep = 36
    RULE_start = 37
    RULE_load = 38
    RULE_assert = 39
    RULE_host = 40
    RULE_loop = 41
    RULE_if = 42
    RULE_endif = 43
    RULE_whenever = 44
    RULE_spool = 45
    RULE_echo = 46
    RULE_script = 47
    RULE_set = 48
    RULE_ssh = 49
    RULE_job = 50
    RULE_compare = 51
    RULE_data = 52
    RULE_help = 53
    RULE_monitor = 54
    RULE_plugin = 55

    ruleNames =  [ "prog", "command", "connect", "connectlocal", "connectjdbc", 
                   "connectUserInfo", "connectDriver", "connectDriverSchema", 
                   "connectDriverType", "connectHost", "connectUser", "connectPassword", 
                   "connectPort", "connectService", "connectlocalService", 
                   "connectParameterName", "connectParameterValue", "connectParameter", 
                   "connectParameters", "disconnect", "session", "expression", 
                   "sql", "sqlCreate", "sqlReplace", "sqlInsert", "sqlUpdate", 
                   "sqlDelete", "sqlSelect", "sqlDrop", "sqlDeclare", "sqlCreateProcedure", 
                   "baseCommand", "exit", "quit", "use", "sleep", "start", 
                   "load", "assert", "host", "loop", "if", "endif", "whenever", 
                   "spool", "echo", "script", "set", "ssh", "job", "compare", 
                   "data", "help", "monitor", "plugin" ]

    EOF = Token.EOF
    CONNECT=1
    SESSION=2
    DISCONNECT=3
    MINUS_MINUS_COMMENT=4
    SQL_CREATE=5
    SQL_INSERT=6
    SQL_UPDATE=7
    SQL_SELECT=8
    SQL_DELETE=9
    SQL_REPLACE=10
    SQL_DECLARE=11
    SQL_BEGIN=12
    SQL_DROP=13
    SQL_COMMIT=14
    SQL_ROLLBACK=15
    SQL_CREATE_PROCEDURE=16
    CRLF=17
    COMMA=18
    SEMICOLON=19
    COLON=20
    AT=21
    DOT=22
    SLASH=23
    BRACKET_OPEN=24
    BRACKET_CLOSE=25
    SQUARE_OPEN=26
    SQUARE_CLOSE=27
    DOUBLE_QUOTE=28
    SINGLE_QUOTE=29
    ESCAPE=30
    SPACE=31
    EXIT=32
    QUIT=33
    SLEEP=34
    USE=35
    ECHO=36
    SCRIPT=37
    ASSERT=38
    START=39
    LOAD=40
    HOST=41
    HELP=42
    IF=43
    ENDIF=44
    SET=45
    SPOOL=46
    LOOP=47
    WHENEVER=48
    SSH=49
    JOB=50
    COMPARE=51
    DATA=52
    MONITOR=53
    PLUGIN=54
    INT=55
    DECIMAL=56
    String=57
    CONNECT_SPACE=58
    CONNECT_AT=59
    CONNECT_SLASH=60
    CONNECT_COLON=61
    CONNECT_QUESTION=62
    CONNECT_POUND=63
    CONNECT_OR=64
    CONNECT_DASH=65
    CONNECT_EQUAL=66
    CONNECT_PARA_AND=67
    CONNECT_SEMICOLON=68
    JDBC=69
    IPV4=70
    IPV6=71
    CONNECT_PORT=72
    CONNECT_STRING=73
    CommentString=74
    HINT_SP=75
    HINT=76
    HINT_CLOSE=77
    HINT_STRING=78
    SESSION_SPACE=79
    SESSION_SAVE=80
    SESSION_RELEASE=81
    SESSION_RESTORE=82
    SESSION_SAVEURL=83
    SESSION_SHOW=84
    SESSION_NAME=85
    SESSION_END=86
    SQL_CRLF=87
    SQL_SPACE=88
    SQL_END=89
    SQL_STRING=90
    SQL_SINGLE=91
    SQL_OTHER=92
    SQL_PROCEDURE_CRLF=93
    SQL_SLASH=94
    SQL_PROCEDURE_SLASH=95
    SQLProcedureStatement=96
    ScriptBlock=97
    EchoBlock=98
    ASSERT_SPACE=99
    ASSERT_OPEN=100
    ASSERT_CLOSE=101
    ASSERT_CRLF=102
    ASSERT_EXPRESSION=103
    ASSERT_NAME=104
    ASSERT_COMMA=105
    ASSERT_SEMICOLON=106
    LOAD_SPACE=107
    LOAD_EQUAL=108
    LOAD_PLUGIN=109
    LOAD_SCRIPT=110
    LOAD_MAP=111
    LOAD_JDBCDRIVER=112
    LOAD_JDBCFILE=113
    LOAD_JDBCCLASS=114
    LOAD_JDBCNAME=115
    LOAD_JDBCPROP=116
    LOAD_JDBCURL=117
    LOAD_EXPRESSION=118
    LOAD_SEMICOLON=119
    LOAD_CRLF=120
    START_SPACE=121
    START_EXPRESSION=122
    START_CRLF=123
    HOST_SPACE=124
    HOST_EXPRESSION=125
    HOST_CRLF=126
    IF_SPACE=127
    IF_OPEN=128
    IF_CLOSE=129
    IF_EXPRESSION=130
    LOOP_SEMICOLON=131
    LOOP_SPACE=132
    LOOP_BEGIN=133
    LOOP_UNTIL=134
    LOOP_INTERVAL=135
    LOOP_INT=136
    LOOP_OPEN=137
    LOOP_CLOSE=138
    LOOP_BREAK=139
    LOOP_END=140
    LOOP_CONTINUE=141
    LOOP_EXPRESSION=142
    LOOP_CRLF=143
    WHENEVER_SPACE=144
    WHENEVER_EXITCODE=145
    WHENEVER_ERROR=146
    WHENEVER_SEMICOLON=147
    WHENEVER_CONTINUE=148
    WHENEVER_EXIT=149
    WHENEVER_CRLF=150
    SPOOL_SPACE=151
    SPOOL_EXPRESSION=152
    SPOOL_SEMICOLON=153
    SPOOL_OFF=154
    SPOOL_CRLF=155
    SET_SPACE=156
    SET_EXPRESSION=157
    SET_SEMICOLON=158
    SET_CRLF=159
    USE_API=160
    USE_SQL=161
    USE_SPACE=162
    USE_SEMICOLON=163
    USE_CRLF=164
    SSH_CONNECT=165
    SSH_WITH=166
    SSH_USER=167
    SSH_SET=168
    SSH_KEYFILE=169
    SSH_PASSWORD=170
    SSH_EXECUTE=171
    SSH_DISCONNECT=172
    SSH_SAVE=173
    SSH_RESTORE=174
    SFTP=175
    SFTP_CHMOD=176
    SFTP_GETCWD=177
    SFTP_CHDIR=178
    SFTP_CHOWN=179
    SFTP_MKDIR=180
    SFTP_GET=181
    SFTP_PUT=182
    SFTP_REMOVE=183
    SFTP_RENAME=184
    SFTP_LISTDIR=185
    SFTP_TRUNCATE=186
    SSH_EQUAL=187
    SSH_SPACE=188
    SSH_SEMICOLON=189
    SSH_CRLF=190
    SSH_EXPRESSION=191
    JOB_SPACE=192
    JOB_SEMICOLON=193
    JOB_EQUAL=194
    JOB_CRLF=195
    JOB_CREATE=196
    JOB_SHOW=197
    JOB_SET=198
    JOB_START=199
    JOB_WAIT=200
    JOB_SHUTDOWN=201
    JOB_ABORT=202
    JOB_TIMER=203
    JOB_REGISTER=204
    JOB_DEREGISTER=205
    JOB_WORKER=206
    JOB_MANGER=207
    JOB_ON=208
    JOB_OFF=209
    JOB_TO=210
    JOB_EXPRESSION=211
    COMPARE_SPACE=212
    COMPARE_SEMICOLON=213
    COMPARE_EQUAL=214
    COMPARE_CRLF=215
    COMPARE_SET=216
    COMPARE_UNSET=217
    COMPARE_MASK=218
    COMPARE_NOMASK=219
    COMPARE_MASKLINE=220
    COMPARE_NOMASKLINE=221
    COMPARE_CASE=222
    COMPARE_NOCASE=223
    COMPARE_IGBLANK=224
    COMPARE_NOIGBLANK=225
    COMPARE_TRIM=226
    COMPARE_NOTRIM=227
    COMPARE_OUTPUT=228
    COMPARE_CONSOLE=229
    COMPARE_DIFFFILE=230
    COMPARE_HTMLFILE=231
    COMPARE_SKIPLINE=232
    COMPARE_NOSKIPLINE=233
    COMPARE_RESET=234
    COMPARE_ALGORITHM=235
    COMPARE_ENCODING=236
    COMPARE_WORK=237
    COMPARE_REFERENCE=238
    COMPARE_LCS=239
    COMPARE_MYERS=240
    COMPARE_EXPRESSION=241
    DATA_SPACE=242
    DATA_SEMICOLON=243
    DATA_SET=244
    DATA_SEEDFILE=245
    DATA_DIR=246
    DATA_CREATE=247
    DATA_FILE=248
    DATA_FILETYPE=249
    DATA_HDFSUSER=250
    DATA_ROWS=251
    DATA_INT=252
    DATA_COMMA=253
    DATACOLUMN_OPEN=254
    DATA_CONVERT=255
    DATA_TO=256
    DATA_EXPRESSION=257
    DATACOLUMN_SPACE=258
    DATACOLUMN_CLOSE=259
    DATACOLUMN_CONTENT=260
    HELP_SPACE=261
    HELP_COMMAND=262
    HELP_CRLF=263
    HELP_SEMICOLON=264
    MONITOR_SPACE=265
    MONITOR_MANAGER=266
    MONITOR_WORKERS=267
    MONITOR_CREATE=268
    MONITOR_TASK=269
    MONITOR_EQUAL=270
    MONITOR_START=271
    MONITOR_STOP=272
    MONITOR_REPORT=273
    MONITOR_LIST=274
    MONITOR_ON=275
    MONITOR_OFF=276
    MONITOR_EXPRESSION=277
    MONITOR_CRLF=278
    MONITOR_SEMICOLON=279
    PLUGIN_SPACE=280
    PLUGIN_EXPRESSION=281
    PLUGIN_CRLF=282
    PLUGIN_SEMICOLON=283
    SLEEP_SPACE=284
    SLEEP_EXPRESSION=285
    SLEEP_CRLF=286
    SLEEP_SEMICOLON=287

    def __init__(self, input:TokenStream, output:TextIO = sys.stdout):
        super().__init__(input, output)
        self.checkVersion("4.11.1")
        self._interp = ParserATNSimulator(self, self.atn, self.decisionsToDFA, self.sharedContextCache)
        self._predicates = None




    class ProgContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def command(self):
            return self.getTypedRuleContext(SQLParser.CommandContext,0)


        def EOF(self):
            return self.getToken(SQLParser.EOF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_prog

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitProg" ):
                return visitor.visitProg(self)
            else:
                return visitor.visitChildren(self)




    def prog(self):

        localctx = SQLParser.ProgContext(self, self._ctx, self.state)
        self.enterRule(localctx, 0, self.RULE_prog)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 112
            self.command()
            self.state = 113
            self.match(SQLParser.EOF)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def baseCommand(self):
            return self.getTypedRuleContext(SQLParser.BaseCommandContext,0)


        def disconnect(self):
            return self.getTypedRuleContext(SQLParser.DisconnectContext,0)


        def session(self):
            return self.getTypedRuleContext(SQLParser.SessionContext,0)


        def connect(self):
            return self.getTypedRuleContext(SQLParser.ConnectContext,0)


        def sql(self):
            return self.getTypedRuleContext(SQLParser.SqlContext,0)


        def EOF(self):
            return self.getToken(SQLParser.EOF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_command

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCommand" ):
                return visitor.visitCommand(self)
            else:
                return visitor.visitChildren(self)




    def command(self):

        localctx = SQLParser.CommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 2, self.RULE_command)
        try:
            self.state = 121
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [32, 33, 34, 35, 36, 37, 38, 39, 40, 41, 42, 43, 44, 45, 46, 47, 48, 49, 50, 51, 52, 53, 54]:
                self.enterOuterAlt(localctx, 1)
                self.state = 115
                self.baseCommand()
                pass
            elif token in [3]:
                self.enterOuterAlt(localctx, 2)
                self.state = 116
                self.disconnect()
                pass
            elif token in [2]:
                self.enterOuterAlt(localctx, 3)
                self.state = 117
                self.session()
                pass
            elif token in [1]:
                self.enterOuterAlt(localctx, 4)
                self.state = 118
                self.connect()
                pass
            elif token in [5, 6, 7, 8, 9, 10, 11, 12, 13, 16, 17]:
                self.enterOuterAlt(localctx, 5)
                self.state = 119
                self.sql()
                pass
            elif token in [-1]:
                self.enterOuterAlt(localctx, 6)
                self.state = 120
                self.match(SQLParser.EOF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connectjdbc(self):
            return self.getTypedRuleContext(SQLParser.ConnectjdbcContext,0)


        def connectlocal(self):
            return self.getTypedRuleContext(SQLParser.ConnectlocalContext,0)


        def CONNECT_SEMICOLON(self):
            return self.getToken(SQLParser.CONNECT_SEMICOLON, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connect

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnect" ):
                return visitor.visitConnect(self)
            else:
                return visitor.visitChildren(self)




    def connect(self):

        localctx = SQLParser.ConnectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 4, self.RULE_connect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 125
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,1,self._ctx)
            if la_ == 1:
                self.state = 123
                self.connectjdbc()
                pass

            elif la_ == 2:
                self.state = 124
                self.connectlocal()
                pass


            self.state = 128
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==68:
                self.state = 127
                self.match(SQLParser.CONNECT_SEMICOLON)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectlocalContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT(self):
            return self.getToken(SQLParser.CONNECT, 0)

        def CONNECT_SLASH(self):
            return self.getToken(SQLParser.CONNECT_SLASH, 0)

        def connectlocalService(self):
            return self.getTypedRuleContext(SQLParser.ConnectlocalServiceContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_connectlocal

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectlocal" ):
                return visitor.visitConnectlocal(self)
            else:
                return visitor.visitChildren(self)




    def connectlocal(self):

        localctx = SQLParser.ConnectlocalContext(self, self._ctx, self.state)
        self.enterRule(localctx, 6, self.RULE_connectlocal)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 130
            self.match(SQLParser.CONNECT)
            self.state = 131
            self.match(SQLParser.CONNECT_SLASH)
            self.state = 132
            self.connectlocalService()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectjdbcContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT(self):
            return self.getToken(SQLParser.CONNECT, 0)

        def connectUserInfo(self):
            return self.getTypedRuleContext(SQLParser.ConnectUserInfoContext,0)


        def connectDriver(self):
            return self.getTypedRuleContext(SQLParser.ConnectDriverContext,0)


        def CONNECT_COLON(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.CONNECT_COLON)
            else:
                return self.getToken(SQLParser.CONNECT_COLON, i)

        def connectDriverSchema(self):
            return self.getTypedRuleContext(SQLParser.ConnectDriverSchemaContext,0)


        def CONNECT_DASH(self):
            return self.getToken(SQLParser.CONNECT_DASH, 0)

        def connectHost(self):
            return self.getTypedRuleContext(SQLParser.ConnectHostContext,0)


        def CONNECT_QUESTION(self):
            return self.getToken(SQLParser.CONNECT_QUESTION, 0)

        def connectParameters(self):
            return self.getTypedRuleContext(SQLParser.ConnectParametersContext,0)


        def CONNECT_AT(self):
            return self.getToken(SQLParser.CONNECT_AT, 0)

        def connectDriverType(self):
            return self.getTypedRuleContext(SQLParser.ConnectDriverTypeContext,0)


        def connectPort(self):
            return self.getTypedRuleContext(SQLParser.ConnectPortContext,0)


        def connectService(self):
            return self.getTypedRuleContext(SQLParser.ConnectServiceContext,0)


        def CONNECT_SLASH(self):
            return self.getToken(SQLParser.CONNECT_SLASH, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectjdbc

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectjdbc" ):
                return visitor.visitConnectjdbc(self)
            else:
                return visitor.visitChildren(self)




    def connectjdbc(self):

        localctx = SQLParser.ConnectjdbcContext(self, self._ctx, self.state)
        self.enterRule(localctx, 8, self.RULE_connectjdbc)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 134
            self.match(SQLParser.CONNECT)

            self.state = 135
            self.connectUserInfo()
            self.state = 137
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==59:
                self.state = 136
                self.match(SQLParser.CONNECT_AT)


            self.state = 157
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==69:
                self.state = 139
                self.connectDriver()
                self.state = 140
                self.match(SQLParser.CONNECT_COLON)
                self.state = 141
                self.connectDriverSchema()
                self.state = 142
                self.match(SQLParser.CONNECT_COLON)
                self.state = 146
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==73:
                    self.state = 143
                    self.connectDriverType()
                    self.state = 144
                    self.match(SQLParser.CONNECT_COLON)


                self.state = 148
                self.match(SQLParser.CONNECT_DASH)
                self.state = 149
                self.connectHost()
                self.state = 151
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==72:
                    self.state = 150
                    self.connectPort()


                self.state = 155
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==60 or _la==61:
                    self.state = 153
                    _la = self._input.LA(1)
                    if not(_la==60 or _la==61):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 154
                    self.connectService()




            self.state = 161
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==62:
                self.state = 159
                self.match(SQLParser.CONNECT_QUESTION)
                self.state = 160
                self.connectParameters()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectUserInfoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connectUser(self):
            return self.getTypedRuleContext(SQLParser.ConnectUserContext,0)


        def CONNECT_SLASH(self):
            return self.getToken(SQLParser.CONNECT_SLASH, 0)

        def connectPassword(self):
            return self.getTypedRuleContext(SQLParser.ConnectPasswordContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_connectUserInfo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectUserInfo" ):
                return visitor.visitConnectUserInfo(self)
            else:
                return visitor.visitChildren(self)




    def connectUserInfo(self):

        localctx = SQLParser.ConnectUserInfoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 10, self.RULE_connectUserInfo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 163
            self.connectUser()
            self.state = 166
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==60:
                self.state = 164
                self.match(SQLParser.CONNECT_SLASH)
                self.state = 165
                self.connectPassword()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectDriverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JDBC(self):
            return self.getToken(SQLParser.JDBC, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectDriver

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectDriver" ):
                return visitor.visitConnectDriver(self)
            else:
                return visitor.visitChildren(self)




    def connectDriver(self):

        localctx = SQLParser.ConnectDriverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 12, self.RULE_connectDriver)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 168
            self.match(SQLParser.JDBC)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectDriverSchemaContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectDriverSchema

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectDriverSchema" ):
                return visitor.visitConnectDriverSchema(self)
            else:
                return visitor.visitChildren(self)




    def connectDriverSchema(self):

        localctx = SQLParser.ConnectDriverSchemaContext(self, self._ctx, self.state)
        self.enterRule(localctx, 14, self.RULE_connectDriverSchema)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 170
            self.match(SQLParser.CONNECT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectDriverTypeContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectDriverType

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectDriverType" ):
                return visitor.visitConnectDriverType(self)
            else:
                return visitor.visitChildren(self)




    def connectDriverType(self):

        localctx = SQLParser.ConnectDriverTypeContext(self, self._ctx, self.state)
        self.enterRule(localctx, 16, self.RULE_connectDriverType)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 172
            self.match(SQLParser.CONNECT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectHostContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IPV4(self):
            return self.getToken(SQLParser.IPV4, 0)

        def IPV6(self):
            return self.getToken(SQLParser.IPV6, 0)

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectHost

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectHost" ):
                return visitor.visitConnectHost(self)
            else:
                return visitor.visitChildren(self)




    def connectHost(self):

        localctx = SQLParser.ConnectHostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 18, self.RULE_connectHost)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 174
            _la = self._input.LA(1)
            if not((((_la - 70)) & ~0x3f) == 0 and ((1 << (_la - 70)) & 11) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectUserContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectUser

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectUser" ):
                return visitor.visitConnectUser(self)
            else:
                return visitor.visitChildren(self)




    def connectUser(self):

        localctx = SQLParser.ConnectUserContext(self, self._ctx, self.state)
        self.enterRule(localctx, 20, self.RULE_connectUser)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 176
            self.match(SQLParser.CONNECT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectPasswordContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectPassword

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectPassword" ):
                return visitor.visitConnectPassword(self)
            else:
                return visitor.visitChildren(self)




    def connectPassword(self):

        localctx = SQLParser.ConnectPasswordContext(self, self._ctx, self.state)
        self.enterRule(localctx, 22, self.RULE_connectPassword)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 178
            self.match(SQLParser.CONNECT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectPortContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_PORT(self):
            return self.getToken(SQLParser.CONNECT_PORT, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectPort

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectPort" ):
                return visitor.visitConnectPort(self)
            else:
                return visitor.visitChildren(self)




    def connectPort(self):

        localctx = SQLParser.ConnectPortContext(self, self._ctx, self.state)
        self.enterRule(localctx, 24, self.RULE_connectPort)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 180
            self.match(SQLParser.CONNECT_PORT)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.CONNECT_STRING)
            else:
                return self.getToken(SQLParser.CONNECT_STRING, i)

        def CONNECT_COLON(self):
            return self.getToken(SQLParser.CONNECT_COLON, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectService

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectService" ):
                return visitor.visitConnectService(self)
            else:
                return visitor.visitChildren(self)




    def connectService(self):

        localctx = SQLParser.ConnectServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 26, self.RULE_connectService)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 182
            self.match(SQLParser.CONNECT_STRING)
            self.state = 185
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==61:
                self.state = 183
                self.match(SQLParser.CONNECT_COLON)
                self.state = 184
                self.match(SQLParser.CONNECT_STRING)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectlocalServiceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectlocalService

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectlocalService" ):
                return visitor.visitConnectlocalService(self)
            else:
                return visitor.visitChildren(self)




    def connectlocalService(self):

        localctx = SQLParser.ConnectlocalServiceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 28, self.RULE_connectlocalService)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 187
            self.match(SQLParser.CONNECT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectParameterNameContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectParameterName

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectParameterName" ):
                return visitor.visitConnectParameterName(self)
            else:
                return visitor.visitChildren(self)




    def connectParameterName(self):

        localctx = SQLParser.ConnectParameterNameContext(self, self._ctx, self.state)
        self.enterRule(localctx, 30, self.RULE_connectParameterName)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 189
            self.match(SQLParser.CONNECT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectParameterValueContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def CONNECT_STRING(self):
            return self.getToken(SQLParser.CONNECT_STRING, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_connectParameterValue

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectParameterValue" ):
                return visitor.visitConnectParameterValue(self)
            else:
                return visitor.visitChildren(self)




    def connectParameterValue(self):

        localctx = SQLParser.ConnectParameterValueContext(self, self._ctx, self.state)
        self.enterRule(localctx, 32, self.RULE_connectParameterValue)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 191
            self.match(SQLParser.CONNECT_STRING)
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectParameterContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connectParameterName(self):
            return self.getTypedRuleContext(SQLParser.ConnectParameterNameContext,0)


        def CONNECT_EQUAL(self):
            return self.getToken(SQLParser.CONNECT_EQUAL, 0)

        def connectParameterValue(self):
            return self.getTypedRuleContext(SQLParser.ConnectParameterValueContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_connectParameter

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectParameter" ):
                return visitor.visitConnectParameter(self)
            else:
                return visitor.visitChildren(self)




    def connectParameter(self):

        localctx = SQLParser.ConnectParameterContext(self, self._ctx, self.state)
        self.enterRule(localctx, 34, self.RULE_connectParameter)
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 193
            self.connectParameterName()
            self.state = 194
            self.match(SQLParser.CONNECT_EQUAL)
            self.state = 195
            self.connectParameterValue()
        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ConnectParametersContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def connectParameter(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ConnectParameterContext)
            else:
                return self.getTypedRuleContext(SQLParser.ConnectParameterContext,i)


        def CONNECT_PARA_AND(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.CONNECT_PARA_AND)
            else:
                return self.getToken(SQLParser.CONNECT_PARA_AND, i)

        def getRuleIndex(self):
            return SQLParser.RULE_connectParameters

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitConnectParameters" ):
                return visitor.visitConnectParameters(self)
            else:
                return visitor.visitChildren(self)




    def connectParameters(self):

        localctx = SQLParser.ConnectParametersContext(self, self._ctx, self.state)
        self.enterRule(localctx, 36, self.RULE_connectParameters)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 197
            self.connectParameter()
            self.state = 204
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==67:
                self.state = 200 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 198
                    self.match(SQLParser.CONNECT_PARA_AND)
                    self.state = 199
                    self.connectParameter()
                    self.state = 202 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==67):
                        break



        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DisconnectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DISCONNECT(self):
            return self.getToken(SQLParser.DISCONNECT, 0)

        def expression(self, i:int=None):
            if i is None:
                return self.getTypedRuleContexts(SQLParser.ExpressionContext)
            else:
                return self.getTypedRuleContext(SQLParser.ExpressionContext,i)


        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.INT)
            else:
                return self.getToken(SQLParser.INT, i)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_disconnect

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitDisconnect" ):
                return visitor.visitDisconnect(self)
            else:
                return visitor.visitChildren(self)




    def disconnect(self):

        localctx = SQLParser.DisconnectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 38, self.RULE_disconnect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 206
            self.match(SQLParser.DISCONNECT)
            self.state = 211
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while ((_la) & ~0x3f) == 0 and ((1 << _la) & 180143987239157760) != 0:
                self.state = 209
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [20, 22, 23, 24, 25, 26, 27, 28, 29, 30, 57]:
                    self.state = 207
                    self.expression()
                    pass
                elif token in [55]:
                    self.state = 208
                    self.match(SQLParser.INT)
                    pass
                else:
                    raise NoViableAltException(self)

                self.state = 213
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 215
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 214
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SessionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SESSION(self):
            return self.getToken(SQLParser.SESSION, 0)

        def SESSION_SAVE(self):
            return self.getToken(SQLParser.SESSION_SAVE, 0)

        def SESSION_RELEASE(self):
            return self.getToken(SQLParser.SESSION_RELEASE, 0)

        def SESSION_RESTORE(self):
            return self.getToken(SQLParser.SESSION_RESTORE, 0)

        def SESSION_SAVEURL(self):
            return self.getToken(SQLParser.SESSION_SAVEURL, 0)

        def SESSION_SHOW(self):
            return self.getToken(SQLParser.SESSION_SHOW, 0)

        def SESSION_NAME(self):
            return self.getToken(SQLParser.SESSION_NAME, 0)

        def SESSION_END(self):
            return self.getToken(SQLParser.SESSION_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_session

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSession" ):
                return visitor.visitSession(self)
            else:
                return visitor.visitChildren(self)




    def session(self):

        localctx = SQLParser.SessionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 40, self.RULE_session)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 217
            self.match(SQLParser.SESSION)
            self.state = 218
            _la = self._input.LA(1)
            if not((((_la - 80)) & ~0x3f) == 0 and ((1 << (_la - 80)) & 31) != 0):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 220
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==85:
                self.state = 219
                self.match(SQLParser.SESSION_NAME)


            self.state = 223
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==86:
                self.state = 222
                self.match(SQLParser.SESSION_END)


            self.state = 226
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 225
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExpressionContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def String(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.String)
            else:
                return self.getToken(SQLParser.String, i)

        def DOT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.DOT)
            else:
                return self.getToken(SQLParser.DOT, i)

        def COLON(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COLON)
            else:
                return self.getToken(SQLParser.COLON, i)

        def SLASH(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SLASH)
            else:
                return self.getToken(SQLParser.SLASH, i)

        def BRACKET_OPEN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.BRACKET_OPEN)
            else:
                return self.getToken(SQLParser.BRACKET_OPEN, i)

        def BRACKET_CLOSE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.BRACKET_CLOSE)
            else:
                return self.getToken(SQLParser.BRACKET_CLOSE, i)

        def ESCAPE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.ESCAPE)
            else:
                return self.getToken(SQLParser.ESCAPE, i)

        def SQUARE_OPEN(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SQUARE_OPEN)
            else:
                return self.getToken(SQLParser.SQUARE_OPEN, i)

        def SQUARE_CLOSE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SQUARE_CLOSE)
            else:
                return self.getToken(SQLParser.SQUARE_CLOSE, i)

        def DOUBLE_QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.DOUBLE_QUOTE)
            else:
                return self.getToken(SQLParser.DOUBLE_QUOTE, i)

        def SINGLE_QUOTE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SINGLE_QUOTE)
            else:
                return self.getToken(SQLParser.SINGLE_QUOTE, i)

        def getRuleIndex(self):
            return SQLParser.RULE_expression

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExpression" ):
                return visitor.visitExpression(self)
            else:
                return visitor.visitChildren(self)




    def expression(self):

        localctx = SQLParser.ExpressionContext(self, self._ctx, self.state)
        self.enterRule(localctx, 42, self.RULE_expression)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 229 
            self._errHandler.sync(self)
            _alt = 1
            while _alt!=2 and _alt!=ATN.INVALID_ALT_NUMBER:
                if _alt == 1:
                    self.state = 228
                    _la = self._input.LA(1)
                    if not(((_la) & ~0x3f) == 0 and ((1 << _la) & 144115190220193792) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()

                else:
                    raise NoViableAltException(self)
                self.state = 231 
                self._errHandler.sync(self)
                _alt = self._interp.adaptivePredict(self._input,19,self._ctx)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def sqlCreate(self):
            return self.getTypedRuleContext(SQLParser.SqlCreateContext,0)


        def sqlReplace(self):
            return self.getTypedRuleContext(SQLParser.SqlReplaceContext,0)


        def sqlInsert(self):
            return self.getTypedRuleContext(SQLParser.SqlInsertContext,0)


        def sqlUpdate(self):
            return self.getTypedRuleContext(SQLParser.SqlUpdateContext,0)


        def sqlDelete(self):
            return self.getTypedRuleContext(SQLParser.SqlDeleteContext,0)


        def sqlSelect(self):
            return self.getTypedRuleContext(SQLParser.SqlSelectContext,0)


        def sqlDeclare(self):
            return self.getTypedRuleContext(SQLParser.SqlDeclareContext,0)


        def sqlDrop(self):
            return self.getTypedRuleContext(SQLParser.SqlDropContext,0)


        def sqlCreateProcedure(self):
            return self.getTypedRuleContext(SQLParser.SqlCreateProcedureContext,0)


        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sql

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSql" ):
                return visitor.visitSql(self)
            else:
                return visitor.visitChildren(self)




    def sql(self):

        localctx = SQLParser.SqlContext(self, self._ctx, self.state)
        self.enterRule(localctx, 44, self.RULE_sql)
        try:
            self.state = 243
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [5]:
                self.enterOuterAlt(localctx, 1)
                self.state = 233
                self.sqlCreate()
                pass
            elif token in [10]:
                self.enterOuterAlt(localctx, 2)
                self.state = 234
                self.sqlReplace()
                pass
            elif token in [6]:
                self.enterOuterAlt(localctx, 3)
                self.state = 235
                self.sqlInsert()
                pass
            elif token in [7]:
                self.enterOuterAlt(localctx, 4)
                self.state = 236
                self.sqlUpdate()
                pass
            elif token in [9]:
                self.enterOuterAlt(localctx, 5)
                self.state = 237
                self.sqlDelete()
                pass
            elif token in [8]:
                self.enterOuterAlt(localctx, 6)
                self.state = 238
                self.sqlSelect()
                pass
            elif token in [11, 12]:
                self.enterOuterAlt(localctx, 7)
                self.state = 239
                self.sqlDeclare()
                pass
            elif token in [13]:
                self.enterOuterAlt(localctx, 8)
                self.state = 240
                self.sqlDrop()
                pass
            elif token in [16]:
                self.enterOuterAlt(localctx, 9)
                self.state = 241
                self.sqlCreateProcedure()
                pass
            elif token in [17]:
                self.enterOuterAlt(localctx, 10)
                self.state = 242
                self.match(SQLParser.CRLF)
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlCreateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_CREATE(self):
            return self.getToken(SQLParser.SQL_CREATE, 0)

        def SQL_END(self):
            return self.getToken(SQLParser.SQL_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlCreate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlCreate" ):
                return visitor.visitSqlCreate(self)
            else:
                return visitor.visitChildren(self)




    def sqlCreate(self):

        localctx = SQLParser.SqlCreateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 46, self.RULE_sqlCreate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 245
            self.match(SQLParser.SQL_CREATE)
            self.state = 246
            self.match(SQLParser.SQL_END)
            self.state = 248
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 247
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlReplaceContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_REPLACE(self):
            return self.getToken(SQLParser.SQL_REPLACE, 0)

        def SQL_END(self):
            return self.getToken(SQLParser.SQL_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlReplace

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlReplace" ):
                return visitor.visitSqlReplace(self)
            else:
                return visitor.visitChildren(self)




    def sqlReplace(self):

        localctx = SQLParser.SqlReplaceContext(self, self._ctx, self.state)
        self.enterRule(localctx, 48, self.RULE_sqlReplace)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 250
            self.match(SQLParser.SQL_REPLACE)
            self.state = 251
            self.match(SQLParser.SQL_END)
            self.state = 253
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 252
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlInsertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_INSERT(self):
            return self.getToken(SQLParser.SQL_INSERT, 0)

        def SQL_END(self):
            return self.getToken(SQLParser.SQL_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlInsert

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlInsert" ):
                return visitor.visitSqlInsert(self)
            else:
                return visitor.visitChildren(self)




    def sqlInsert(self):

        localctx = SQLParser.SqlInsertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 50, self.RULE_sqlInsert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 255
            self.match(SQLParser.SQL_INSERT)
            self.state = 256
            self.match(SQLParser.SQL_END)
            self.state = 258
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 257
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlUpdateContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_UPDATE(self):
            return self.getToken(SQLParser.SQL_UPDATE, 0)

        def SQL_END(self):
            return self.getToken(SQLParser.SQL_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlUpdate

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlUpdate" ):
                return visitor.visitSqlUpdate(self)
            else:
                return visitor.visitChildren(self)




    def sqlUpdate(self):

        localctx = SQLParser.SqlUpdateContext(self, self._ctx, self.state)
        self.enterRule(localctx, 52, self.RULE_sqlUpdate)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 260
            self.match(SQLParser.SQL_UPDATE)
            self.state = 261
            self.match(SQLParser.SQL_END)
            self.state = 263
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 262
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlDeleteContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_DELETE(self):
            return self.getToken(SQLParser.SQL_DELETE, 0)

        def SQL_END(self):
            return self.getToken(SQLParser.SQL_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlDelete

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlDelete" ):
                return visitor.visitSqlDelete(self)
            else:
                return visitor.visitChildren(self)




    def sqlDelete(self):

        localctx = SQLParser.SqlDeleteContext(self, self._ctx, self.state)
        self.enterRule(localctx, 54, self.RULE_sqlDelete)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 265
            self.match(SQLParser.SQL_DELETE)
            self.state = 266
            self.match(SQLParser.SQL_END)
            self.state = 268
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 267
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlSelectContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_SELECT(self):
            return self.getToken(SQLParser.SQL_SELECT, 0)

        def SQL_END(self):
            return self.getToken(SQLParser.SQL_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlSelect

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlSelect" ):
                return visitor.visitSqlSelect(self)
            else:
                return visitor.visitChildren(self)




    def sqlSelect(self):

        localctx = SQLParser.SqlSelectContext(self, self._ctx, self.state)
        self.enterRule(localctx, 56, self.RULE_sqlSelect)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 270
            self.match(SQLParser.SQL_SELECT)
            self.state = 271
            self.match(SQLParser.SQL_END)
            self.state = 273
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 272
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlDropContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_DROP(self):
            return self.getToken(SQLParser.SQL_DROP, 0)

        def SQL_END(self):
            return self.getToken(SQLParser.SQL_END, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlDrop

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlDrop" ):
                return visitor.visitSqlDrop(self)
            else:
                return visitor.visitChildren(self)




    def sqlDrop(self):

        localctx = SQLParser.SqlDropContext(self, self._ctx, self.state)
        self.enterRule(localctx, 58, self.RULE_sqlDrop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 275
            self.match(SQLParser.SQL_DROP)
            self.state = 276
            self.match(SQLParser.SQL_END)
            self.state = 278
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 277
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlDeclareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_SLASH(self):
            return self.getToken(SQLParser.SQL_SLASH, 0)

        def SQL_DECLARE(self):
            return self.getToken(SQLParser.SQL_DECLARE, 0)

        def SQL_BEGIN(self):
            return self.getToken(SQLParser.SQL_BEGIN, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlDeclare

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlDeclare" ):
                return visitor.visitSqlDeclare(self)
            else:
                return visitor.visitChildren(self)




    def sqlDeclare(self):

        localctx = SQLParser.SqlDeclareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 60, self.RULE_sqlDeclare)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 280
            _la = self._input.LA(1)
            if not(_la==11 or _la==12):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 281
            self.match(SQLParser.SQL_SLASH)
            self.state = 283
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 282
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SqlCreateProcedureContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SQL_CREATE_PROCEDURE(self):
            return self.getToken(SQLParser.SQL_CREATE_PROCEDURE, 0)

        def SQL_SLASH(self):
            return self.getToken(SQLParser.SQL_SLASH, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sqlCreateProcedure

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSqlCreateProcedure" ):
                return visitor.visitSqlCreateProcedure(self)
            else:
                return visitor.visitChildren(self)




    def sqlCreateProcedure(self):

        localctx = SQLParser.SqlCreateProcedureContext(self, self._ctx, self.state)
        self.enterRule(localctx, 62, self.RULE_sqlCreateProcedure)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 285
            self.match(SQLParser.SQL_CREATE_PROCEDURE)
            self.state = 286
            self.match(SQLParser.SQL_SLASH)
            self.state = 288
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 287
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class BaseCommandContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def assert_(self):
            return self.getTypedRuleContext(SQLParser.AssertContext,0)


        def load(self):
            return self.getTypedRuleContext(SQLParser.LoadContext,0)


        def host(self):
            return self.getTypedRuleContext(SQLParser.HostContext,0)


        def start(self):
            return self.getTypedRuleContext(SQLParser.StartContext,0)


        def loop(self):
            return self.getTypedRuleContext(SQLParser.LoopContext,0)


        def if_(self):
            return self.getTypedRuleContext(SQLParser.IfContext,0)


        def endif(self):
            return self.getTypedRuleContext(SQLParser.EndifContext,0)


        def whenever(self):
            return self.getTypedRuleContext(SQLParser.WheneverContext,0)


        def set_(self):
            return self.getTypedRuleContext(SQLParser.SetContext,0)


        def use(self):
            return self.getTypedRuleContext(SQLParser.UseContext,0)


        def exit(self):
            return self.getTypedRuleContext(SQLParser.ExitContext,0)


        def quit(self):
            return self.getTypedRuleContext(SQLParser.QuitContext,0)


        def sleep(self):
            return self.getTypedRuleContext(SQLParser.SleepContext,0)


        def spool(self):
            return self.getTypedRuleContext(SQLParser.SpoolContext,0)


        def script(self):
            return self.getTypedRuleContext(SQLParser.ScriptContext,0)


        def echo(self):
            return self.getTypedRuleContext(SQLParser.EchoContext,0)


        def ssh(self):
            return self.getTypedRuleContext(SQLParser.SshContext,0)


        def job(self):
            return self.getTypedRuleContext(SQLParser.JobContext,0)


        def compare(self):
            return self.getTypedRuleContext(SQLParser.CompareContext,0)


        def data(self):
            return self.getTypedRuleContext(SQLParser.DataContext,0)


        def help_(self):
            return self.getTypedRuleContext(SQLParser.HelpContext,0)


        def monitor(self):
            return self.getTypedRuleContext(SQLParser.MonitorContext,0)


        def plugin(self):
            return self.getTypedRuleContext(SQLParser.PluginContext,0)


        def getRuleIndex(self):
            return SQLParser.RULE_baseCommand

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitBaseCommand" ):
                return visitor.visitBaseCommand(self)
            else:
                return visitor.visitChildren(self)




    def baseCommand(self):

        localctx = SQLParser.BaseCommandContext(self, self._ctx, self.state)
        self.enterRule(localctx, 64, self.RULE_baseCommand)
        try:
            self.state = 313
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [38]:
                self.enterOuterAlt(localctx, 1)
                self.state = 290
                self.assert_()
                pass
            elif token in [40]:
                self.enterOuterAlt(localctx, 2)
                self.state = 291
                self.load()
                pass
            elif token in [41]:
                self.enterOuterAlt(localctx, 3)
                self.state = 292
                self.host()
                pass
            elif token in [39]:
                self.enterOuterAlt(localctx, 4)
                self.state = 293
                self.start()
                pass
            elif token in [47]:
                self.enterOuterAlt(localctx, 5)
                self.state = 294
                self.loop()
                pass
            elif token in [43]:
                self.enterOuterAlt(localctx, 6)
                self.state = 295
                self.if_()
                pass
            elif token in [44]:
                self.enterOuterAlt(localctx, 7)
                self.state = 296
                self.endif()
                pass
            elif token in [48]:
                self.enterOuterAlt(localctx, 8)
                self.state = 297
                self.whenever()
                pass
            elif token in [45]:
                self.enterOuterAlt(localctx, 9)
                self.state = 298
                self.set_()
                pass
            elif token in [35]:
                self.enterOuterAlt(localctx, 10)
                self.state = 299
                self.use()
                pass
            elif token in [32]:
                self.enterOuterAlt(localctx, 11)
                self.state = 300
                self.exit()
                pass
            elif token in [33]:
                self.enterOuterAlt(localctx, 12)
                self.state = 301
                self.quit()
                pass
            elif token in [34]:
                self.enterOuterAlt(localctx, 13)
                self.state = 302
                self.sleep()
                pass
            elif token in [46]:
                self.enterOuterAlt(localctx, 14)
                self.state = 303
                self.spool()
                pass
            elif token in [37]:
                self.enterOuterAlt(localctx, 15)
                self.state = 304
                self.script()
                pass
            elif token in [36]:
                self.enterOuterAlt(localctx, 16)
                self.state = 305
                self.echo()
                pass
            elif token in [49]:
                self.enterOuterAlt(localctx, 17)
                self.state = 306
                self.ssh()
                pass
            elif token in [50]:
                self.enterOuterAlt(localctx, 18)
                self.state = 307
                self.job()
                pass
            elif token in [51]:
                self.enterOuterAlt(localctx, 19)
                self.state = 308
                self.compare()
                pass
            elif token in [52]:
                self.enterOuterAlt(localctx, 20)
                self.state = 309
                self.data()
                pass
            elif token in [42]:
                self.enterOuterAlt(localctx, 21)
                self.state = 310
                self.help_()
                pass
            elif token in [53]:
                self.enterOuterAlt(localctx, 22)
                self.state = 311
                self.monitor()
                pass
            elif token in [54]:
                self.enterOuterAlt(localctx, 23)
                self.state = 312
                self.plugin()
                pass
            else:
                raise NoViableAltException(self)

        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ExitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def EXIT(self):
            return self.getToken(SQLParser.EXIT, 0)

        def INT(self):
            return self.getToken(SQLParser.INT, 0)

        def SEMICOLON(self):
            return self.getToken(SQLParser.SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_exit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitExit" ):
                return visitor.visitExit(self)
            else:
                return visitor.visitChildren(self)




    def exit(self):

        localctx = SQLParser.ExitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 66, self.RULE_exit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 315
            self.match(SQLParser.EXIT)
            self.state = 317
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 316
                self.match(SQLParser.INT)


            self.state = 320
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 319
                self.match(SQLParser.SEMICOLON)


            self.state = 323
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 322
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class QuitContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def QUIT(self):
            return self.getToken(SQLParser.QUIT, 0)

        def INT(self):
            return self.getToken(SQLParser.INT, 0)

        def SEMICOLON(self):
            return self.getToken(SQLParser.SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_quit

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitQuit" ):
                return visitor.visitQuit(self)
            else:
                return visitor.visitChildren(self)




    def quit(self):

        localctx = SQLParser.QuitContext(self, self._ctx, self.state)
        self.enterRule(localctx, 68, self.RULE_quit)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 325
            self.match(SQLParser.QUIT)
            self.state = 327
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==55:
                self.state = 326
                self.match(SQLParser.INT)


            self.state = 330
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 329
                self.match(SQLParser.SEMICOLON)


            self.state = 333
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 332
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class UseContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def USE(self):
            return self.getToken(SQLParser.USE, 0)

        def USE_API(self):
            return self.getToken(SQLParser.USE_API, 0)

        def USE_SQL(self):
            return self.getToken(SQLParser.USE_SQL, 0)

        def USE_SEMICOLON(self):
            return self.getToken(SQLParser.USE_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_use

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitUse" ):
                return visitor.visitUse(self)
            else:
                return visitor.visitChildren(self)




    def use(self):

        localctx = SQLParser.UseContext(self, self._ctx, self.state)
        self.enterRule(localctx, 70, self.RULE_use)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 335
            self.match(SQLParser.USE)
            self.state = 336
            _la = self._input.LA(1)
            if not(_la==160 or _la==161):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 338
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==163:
                self.state = 337
                self.match(SQLParser.USE_SEMICOLON)


            self.state = 341
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 340
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SleepContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SLEEP(self):
            return self.getToken(SQLParser.SLEEP, 0)

        def SLEEP_EXPRESSION(self):
            return self.getToken(SQLParser.SLEEP_EXPRESSION, 0)

        def SLEEP_SEMICOLON(self):
            return self.getToken(SQLParser.SLEEP_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_sleep

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSleep" ):
                return visitor.visitSleep(self)
            else:
                return visitor.visitChildren(self)




    def sleep(self):

        localctx = SQLParser.SleepContext(self, self._ctx, self.state)
        self.enterRule(localctx, 72, self.RULE_sleep)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 343
            self.match(SQLParser.SLEEP)
            self.state = 344
            self.match(SQLParser.SLEEP_EXPRESSION)
            self.state = 346
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==287:
                self.state = 345
                self.match(SQLParser.SLEEP_SEMICOLON)


            self.state = 349
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 348
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class StartContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def START(self):
            return self.getToken(SQLParser.START, 0)

        def START_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.START_EXPRESSION)
            else:
                return self.getToken(SQLParser.START_EXPRESSION, i)

        def SEMICOLON(self):
            return self.getToken(SQLParser.SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_start

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitStart" ):
                return visitor.visitStart(self)
            else:
                return visitor.visitChildren(self)




    def start(self):

        localctx = SQLParser.StartContext(self, self._ctx, self.state)
        self.enterRule(localctx, 74, self.RULE_start)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 351
            self.match(SQLParser.START)
            self.state = 353 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 352
                self.match(SQLParser.START_EXPRESSION)
                self.state = 355 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==122):
                    break

            self.state = 358
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 357
                self.match(SQLParser.SEMICOLON)


            self.state = 361
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 360
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoadContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOAD(self):
            return self.getToken(SQLParser.LOAD, 0)

        def LOAD_SEMICOLON(self):
            return self.getToken(SQLParser.LOAD_SEMICOLON, 0)

        def LOAD_CRLF(self):
            return self.getToken(SQLParser.LOAD_CRLF, 0)

        def LOAD_PLUGIN(self):
            return self.getToken(SQLParser.LOAD_PLUGIN, 0)

        def LOAD_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOAD_EXPRESSION)
            else:
                return self.getToken(SQLParser.LOAD_EXPRESSION, i)

        def LOAD_SCRIPT(self):
            return self.getToken(SQLParser.LOAD_SCRIPT, 0)

        def LOAD_MAP(self):
            return self.getToken(SQLParser.LOAD_MAP, 0)

        def LOAD_JDBCDRIVER(self):
            return self.getToken(SQLParser.LOAD_JDBCDRIVER, 0)

        def LOAD_JDBCCLASS(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOAD_JDBCCLASS)
            else:
                return self.getToken(SQLParser.LOAD_JDBCCLASS, i)

        def LOAD_EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOAD_EQUAL)
            else:
                return self.getToken(SQLParser.LOAD_EQUAL, i)

        def LOAD_JDBCFILE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOAD_JDBCFILE)
            else:
                return self.getToken(SQLParser.LOAD_JDBCFILE, i)

        def LOAD_JDBCNAME(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOAD_JDBCNAME)
            else:
                return self.getToken(SQLParser.LOAD_JDBCNAME, i)

        def LOAD_JDBCPROP(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOAD_JDBCPROP)
            else:
                return self.getToken(SQLParser.LOAD_JDBCPROP, i)

        def LOAD_JDBCURL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOAD_JDBCURL)
            else:
                return self.getToken(SQLParser.LOAD_JDBCURL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_load

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoad" ):
                return visitor.visitLoad(self)
            else:
                return visitor.visitChildren(self)




    def load(self):

        localctx = SQLParser.LoadContext(self, self._ctx, self.state)
        self.enterRule(localctx, 76, self.RULE_load)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 363
            self.match(SQLParser.LOAD)
            self.state = 391
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [109]:
                self.state = 364
                self.match(SQLParser.LOAD_PLUGIN)
                self.state = 365
                self.match(SQLParser.LOAD_EXPRESSION)
                pass
            elif token in [110]:
                self.state = 366
                self.match(SQLParser.LOAD_SCRIPT)
                self.state = 367
                self.match(SQLParser.LOAD_EXPRESSION)
                pass
            elif token in [111]:
                self.state = 368
                self.match(SQLParser.LOAD_MAP)
                self.state = 369
                self.match(SQLParser.LOAD_EXPRESSION)
                pass
            elif token in [112]:
                self.state = 370
                self.match(SQLParser.LOAD_JDBCDRIVER)
                self.state = 388
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la - 113)) & ~0x3f) == 0 and ((1 << (_la - 113)) & 31) != 0:
                    self.state = 386
                    self._errHandler.sync(self)
                    token = self._input.LA(1)
                    if token in [114]:
                        self.state = 371
                        self.match(SQLParser.LOAD_JDBCCLASS)
                        self.state = 372
                        self.match(SQLParser.LOAD_EQUAL)
                        self.state = 373
                        self.match(SQLParser.LOAD_EXPRESSION)
                        pass
                    elif token in [113]:
                        self.state = 374
                        self.match(SQLParser.LOAD_JDBCFILE)
                        self.state = 375
                        self.match(SQLParser.LOAD_EQUAL)
                        self.state = 376
                        self.match(SQLParser.LOAD_EXPRESSION)
                        pass
                    elif token in [115]:
                        self.state = 377
                        self.match(SQLParser.LOAD_JDBCNAME)
                        self.state = 378
                        self.match(SQLParser.LOAD_EQUAL)
                        self.state = 379
                        self.match(SQLParser.LOAD_EXPRESSION)
                        pass
                    elif token in [116]:
                        self.state = 380
                        self.match(SQLParser.LOAD_JDBCPROP)
                        self.state = 381
                        self.match(SQLParser.LOAD_EQUAL)
                        self.state = 382
                        self.match(SQLParser.LOAD_EXPRESSION)
                        pass
                    elif token in [117]:
                        self.state = 383
                        self.match(SQLParser.LOAD_JDBCURL)
                        self.state = 384
                        self.match(SQLParser.LOAD_EQUAL)
                        self.state = 385
                        self.match(SQLParser.LOAD_EXPRESSION)
                        pass
                    else:
                        raise NoViableAltException(self)

                    self.state = 390
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 394
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==119:
                self.state = 393
                self.match(SQLParser.LOAD_SEMICOLON)


            self.state = 397
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==120:
                self.state = 396
                self.match(SQLParser.LOAD_CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class AssertContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ASSERT(self):
            return self.getToken(SQLParser.ASSERT, 0)

        def ASSERT_EXPRESSION(self):
            return self.getToken(SQLParser.ASSERT_EXPRESSION, 0)

        def ASSERT_NAME(self):
            return self.getToken(SQLParser.ASSERT_NAME, 0)

        def ASSERT_SEMICOLON(self):
            return self.getToken(SQLParser.ASSERT_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def ASSERT_COMMA(self):
            return self.getToken(SQLParser.ASSERT_COMMA, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_assert

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitAssert" ):
                return visitor.visitAssert(self)
            else:
                return visitor.visitChildren(self)




    def assert_(self):

        localctx = SQLParser.AssertContext(self, self._ctx, self.state)
        self.enterRule(localctx, 78, self.RULE_assert)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 399
            self.match(SQLParser.ASSERT)
            self.state = 400
            self.match(SQLParser.ASSERT_EXPRESSION)
            self.state = 405
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==104 or _la==105:
                self.state = 402
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==105:
                    self.state = 401
                    self.match(SQLParser.ASSERT_COMMA)


                self.state = 404
                self.match(SQLParser.ASSERT_NAME)


            self.state = 408
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==106:
                self.state = 407
                self.match(SQLParser.ASSERT_SEMICOLON)


            self.state = 411
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 410
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HostContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HOST(self):
            return self.getToken(SQLParser.HOST, 0)

        def HOST_EXPRESSION(self):
            return self.getToken(SQLParser.HOST_EXPRESSION, 0)

        def SEMICOLON(self):
            return self.getToken(SQLParser.SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_host

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHost" ):
                return visitor.visitHost(self)
            else:
                return visitor.visitChildren(self)




    def host(self):

        localctx = SQLParser.HostContext(self, self._ctx, self.state)
        self.enterRule(localctx, 80, self.RULE_host)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 413
            self.match(SQLParser.HOST)
            self.state = 414
            self.match(SQLParser.HOST_EXPRESSION)
            self.state = 416
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 415
                self.match(SQLParser.SEMICOLON)


            self.state = 419
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 418
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class LoopContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def LOOP(self):
            return self.getToken(SQLParser.LOOP, 0)

        def LOOP_BREAK(self):
            return self.getToken(SQLParser.LOOP_BREAK, 0)

        def LOOP_END(self):
            return self.getToken(SQLParser.LOOP_END, 0)

        def LOOP_CONTINUE(self):
            return self.getToken(SQLParser.LOOP_CONTINUE, 0)

        def LOOP_SEMICOLON(self):
            return self.getToken(SQLParser.LOOP_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def LOOP_BEGIN(self):
            return self.getToken(SQLParser.LOOP_BEGIN, 0)

        def LOOP_UNTIL(self):
            return self.getToken(SQLParser.LOOP_UNTIL, 0)

        def LOOP_EXPRESSION(self):
            return self.getToken(SQLParser.LOOP_EXPRESSION, 0)

        def LOOP_INTERVAL(self):
            return self.getToken(SQLParser.LOOP_INTERVAL, 0)

        def LOOP_INT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.LOOP_INT)
            else:
                return self.getToken(SQLParser.LOOP_INT, i)

        def getRuleIndex(self):
            return SQLParser.RULE_loop

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitLoop" ):
                return visitor.visitLoop(self)
            else:
                return visitor.visitChildren(self)




    def loop(self):

        localctx = SQLParser.LoopContext(self, self._ctx, self.state)
        self.enterRule(localctx, 82, self.RULE_loop)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 421
            self.match(SQLParser.LOOP)
            self.state = 435
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [139]:
                self.state = 422
                self.match(SQLParser.LOOP_BREAK)
                pass
            elif token in [140]:
                self.state = 423
                self.match(SQLParser.LOOP_END)
                pass
            elif token in [141]:
                self.state = 424
                self.match(SQLParser.LOOP_CONTINUE)
                pass
            elif token in [133]:
                self.state = 425
                self.match(SQLParser.LOOP_BEGIN)
                self.state = 426
                self.match(SQLParser.LOOP_UNTIL)
                self.state = 427
                self.match(SQLParser.LOOP_EXPRESSION)
                pass
            elif token in [134, 136]:
                self.state = 429
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==136:
                    self.state = 428
                    self.match(SQLParser.LOOP_INT)


                self.state = 431
                self.match(SQLParser.LOOP_UNTIL)
                self.state = 432
                self.match(SQLParser.LOOP_EXPRESSION)
                self.state = 433
                self.match(SQLParser.LOOP_INTERVAL)
                self.state = 434
                self.match(SQLParser.LOOP_INT)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 438
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==131:
                self.state = 437
                self.match(SQLParser.LOOP_SEMICOLON)


            self.state = 441
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 440
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class IfContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def IF(self):
            return self.getToken(SQLParser.IF, 0)

        def IF_EXPRESSION(self):
            return self.getToken(SQLParser.IF_EXPRESSION, 0)

        def SEMICOLON(self):
            return self.getToken(SQLParser.SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_if

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitIf" ):
                return visitor.visitIf(self)
            else:
                return visitor.visitChildren(self)




    def if_(self):

        localctx = SQLParser.IfContext(self, self._ctx, self.state)
        self.enterRule(localctx, 84, self.RULE_if)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 443
            self.match(SQLParser.IF)
            self.state = 444
            self.match(SQLParser.IF_EXPRESSION)
            self.state = 446
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 445
                self.match(SQLParser.SEMICOLON)


            self.state = 449
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 448
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EndifContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ENDIF(self):
            return self.getToken(SQLParser.ENDIF, 0)

        def SEMICOLON(self):
            return self.getToken(SQLParser.SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_endif

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEndif" ):
                return visitor.visitEndif(self)
            else:
                return visitor.visitChildren(self)




    def endif(self):

        localctx = SQLParser.EndifContext(self, self._ctx, self.state)
        self.enterRule(localctx, 86, self.RULE_endif)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 451
            self.match(SQLParser.ENDIF)
            self.state = 453
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==19:
                self.state = 452
                self.match(SQLParser.SEMICOLON)


            self.state = 456
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 455
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class WheneverContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def WHENEVER(self):
            return self.getToken(SQLParser.WHENEVER, 0)

        def WHENEVER_ERROR(self):
            return self.getToken(SQLParser.WHENEVER_ERROR, 0)

        def WHENEVER_CONTINUE(self):
            return self.getToken(SQLParser.WHENEVER_CONTINUE, 0)

        def WHENEVER_SEMICOLON(self):
            return self.getToken(SQLParser.WHENEVER_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def WHENEVER_EXIT(self):
            return self.getToken(SQLParser.WHENEVER_EXIT, 0)

        def WHENEVER_EXITCODE(self):
            return self.getToken(SQLParser.WHENEVER_EXITCODE, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_whenever

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitWhenever" ):
                return visitor.visitWhenever(self)
            else:
                return visitor.visitChildren(self)




    def whenever(self):

        localctx = SQLParser.WheneverContext(self, self._ctx, self.state)
        self.enterRule(localctx, 88, self.RULE_whenever)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 458
            self.match(SQLParser.WHENEVER)
            self.state = 459
            self.match(SQLParser.WHENEVER_ERROR)
            self.state = 463
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [148]:
                self.state = 460
                self.match(SQLParser.WHENEVER_CONTINUE)
                pass
            elif token in [149]:
                self.state = 461
                self.match(SQLParser.WHENEVER_EXIT)
                self.state = 462
                self.match(SQLParser.WHENEVER_EXITCODE)
                pass
            else:
                raise NoViableAltException(self)

            self.state = 466
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==147:
                self.state = 465
                self.match(SQLParser.WHENEVER_SEMICOLON)


            self.state = 469
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 468
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SpoolContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SPOOL(self):
            return self.getToken(SQLParser.SPOOL, 0)

        def SPOOL_OFF(self):
            return self.getToken(SQLParser.SPOOL_OFF, 0)

        def SPOOL_EXPRESSION(self):
            return self.getToken(SQLParser.SPOOL_EXPRESSION, 0)

        def SPOOL_SEMICOLON(self):
            return self.getToken(SQLParser.SPOOL_SEMICOLON, 0)

        def SPOOL_CRLF(self):
            return self.getToken(SQLParser.SPOOL_CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_spool

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSpool" ):
                return visitor.visitSpool(self)
            else:
                return visitor.visitChildren(self)




    def spool(self):

        localctx = SQLParser.SpoolContext(self, self._ctx, self.state)
        self.enterRule(localctx, 90, self.RULE_spool)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 471
            self.match(SQLParser.SPOOL)
            self.state = 472
            _la = self._input.LA(1)
            if not(_la==152 or _la==154):
                self._errHandler.recoverInline(self)
            else:
                self._errHandler.reportMatch(self)
                self.consume()
            self.state = 474
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==153:
                self.state = 473
                self.match(SQLParser.SPOOL_SEMICOLON)


            self.state = 477
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==155:
                self.state = 476
                self.match(SQLParser.SPOOL_CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class EchoContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def ECHO(self):
            return self.getToken(SQLParser.ECHO, 0)

        def EchoBlock(self):
            return self.getToken(SQLParser.EchoBlock, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def EOF(self):
            return self.getToken(SQLParser.EOF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_echo

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitEcho" ):
                return visitor.visitEcho(self)
            else:
                return visitor.visitChildren(self)




    def echo(self):

        localctx = SQLParser.EchoContext(self, self._ctx, self.state)
        self.enterRule(localctx, 92, self.RULE_echo)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 479
            self.match(SQLParser.ECHO)
            self.state = 480
            self.match(SQLParser.EchoBlock)
            self.state = 482
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,68,self._ctx)
            if la_ == 1:
                self.state = 481
                _la = self._input.LA(1)
                if not(_la==-1 or _la==17):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class ScriptContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SCRIPT(self):
            return self.getToken(SQLParser.SCRIPT, 0)

        def ScriptBlock(self):
            return self.getToken(SQLParser.ScriptBlock, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_script

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitScript" ):
                return visitor.visitScript(self)
            else:
                return visitor.visitChildren(self)




    def script(self):

        localctx = SQLParser.ScriptContext(self, self._ctx, self.state)
        self.enterRule(localctx, 94, self.RULE_script)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 484
            self.match(SQLParser.SCRIPT)
            self.state = 485
            self.match(SQLParser.ScriptBlock)
            self.state = 487
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 486
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SetContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SET(self):
            return self.getToken(SQLParser.SET, 0)

        def SET_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SET_EXPRESSION)
            else:
                return self.getToken(SQLParser.SET_EXPRESSION, i)

        def SET_SEMICOLON(self):
            return self.getToken(SQLParser.SET_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_set

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSet" ):
                return visitor.visitSet(self)
            else:
                return visitor.visitChildren(self)




    def set_(self):

        localctx = SQLParser.SetContext(self, self._ctx, self.state)
        self.enterRule(localctx, 96, self.RULE_set)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 489
            self.match(SQLParser.SET)
            self.state = 493
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while _la==157:
                self.state = 490
                self.match(SQLParser.SET_EXPRESSION)
                self.state = 495
                self._errHandler.sync(self)
                _la = self._input.LA(1)

            self.state = 497
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==158:
                self.state = 496
                self.match(SQLParser.SET_SEMICOLON)


            self.state = 500
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 499
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class SshContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def SSH(self):
            return self.getToken(SQLParser.SSH, 0)

        def SSH_SEMICOLON(self):
            return self.getToken(SQLParser.SSH_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def SSH_CONNECT(self):
            return self.getToken(SQLParser.SSH_CONNECT, 0)

        def SSH_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.SSH_EXPRESSION)
            else:
                return self.getToken(SQLParser.SSH_EXPRESSION, i)

        def SSH_WITH(self):
            return self.getToken(SQLParser.SSH_WITH, 0)

        def SSH_USER(self):
            return self.getToken(SQLParser.SSH_USER, 0)

        def SSH_KEYFILE(self):
            return self.getToken(SQLParser.SSH_KEYFILE, 0)

        def SSH_SET(self):
            return self.getToken(SQLParser.SSH_SET, 0)

        def SSH_EQUAL(self):
            return self.getToken(SQLParser.SSH_EQUAL, 0)

        def SSH_EXECUTE(self):
            return self.getToken(SQLParser.SSH_EXECUTE, 0)

        def SSH_DISCONNECT(self):
            return self.getToken(SQLParser.SSH_DISCONNECT, 0)

        def SSH_SAVE(self):
            return self.getToken(SQLParser.SSH_SAVE, 0)

        def SSH_RESTORE(self):
            return self.getToken(SQLParser.SSH_RESTORE, 0)

        def SFTP(self):
            return self.getToken(SQLParser.SFTP, 0)

        def SSH_PASSWORD(self):
            return self.getToken(SQLParser.SSH_PASSWORD, 0)

        def SFTP_CHMOD(self):
            return self.getToken(SQLParser.SFTP_CHMOD, 0)

        def INT(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.INT)
            else:
                return self.getToken(SQLParser.INT, i)

        def SFTP_GETCWD(self):
            return self.getToken(SQLParser.SFTP_GETCWD, 0)

        def SFTP_CHDIR(self):
            return self.getToken(SQLParser.SFTP_CHDIR, 0)

        def SFTP_CHOWN(self):
            return self.getToken(SQLParser.SFTP_CHOWN, 0)

        def SFTP_MKDIR(self):
            return self.getToken(SQLParser.SFTP_MKDIR, 0)

        def SFTP_GET(self):
            return self.getToken(SQLParser.SFTP_GET, 0)

        def SFTP_PUT(self):
            return self.getToken(SQLParser.SFTP_PUT, 0)

        def SFTP_REMOVE(self):
            return self.getToken(SQLParser.SFTP_REMOVE, 0)

        def SFTP_RENAME(self):
            return self.getToken(SQLParser.SFTP_RENAME, 0)

        def SFTP_LISTDIR(self):
            return self.getToken(SQLParser.SFTP_LISTDIR, 0)

        def SFTP_TRUNCATE(self):
            return self.getToken(SQLParser.SFTP_TRUNCATE, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_ssh

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitSsh" ):
                return visitor.visitSsh(self)
            else:
                return visitor.visitChildren(self)




    def ssh(self):

        localctx = SQLParser.SshContext(self, self._ctx, self.state)
        self.enterRule(localctx, 98, self.RULE_ssh)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 502
            self.match(SQLParser.SSH)
            self.state = 566
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,76,self._ctx)
            if la_ == 1:
                self.state = 503
                self.match(SQLParser.SSH_CONNECT)
                self.state = 504
                self.match(SQLParser.SSH_EXPRESSION)
                self.state = 505
                self.match(SQLParser.SSH_WITH)
                self.state = 506
                self.match(SQLParser.SSH_USER)
                self.state = 507
                self.match(SQLParser.SSH_EXPRESSION)
                self.state = 508
                self.match(SQLParser.SSH_KEYFILE)
                self.state = 509
                self.match(SQLParser.SSH_EXPRESSION)
                pass

            elif la_ == 2:
                self.state = 510
                self.match(SQLParser.SSH_SET)
                self.state = 511
                self.match(SQLParser.SSH_EXPRESSION)
                self.state = 512
                self.match(SQLParser.SSH_EQUAL)
                self.state = 513
                self.match(SQLParser.SSH_EXPRESSION)
                pass

            elif la_ == 3:
                self.state = 514
                self.match(SQLParser.SSH_CONNECT)
                self.state = 515
                self.match(SQLParser.SSH_EXPRESSION)
                self.state = 516
                self.match(SQLParser.SSH_WITH)
                self.state = 517
                self.match(SQLParser.SSH_USER)
                self.state = 518
                self.match(SQLParser.SSH_EXPRESSION)
                self.state = 521
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==170:
                    self.state = 519
                    self.match(SQLParser.SSH_PASSWORD)
                    self.state = 520
                    self.match(SQLParser.SSH_EXPRESSION)


                pass

            elif la_ == 4:
                self.state = 523
                self.match(SQLParser.SSH_EXECUTE)
                self.state = 525 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 524
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 527 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==191):
                        break

                pass

            elif la_ == 5:
                self.state = 529
                self.match(SQLParser.SSH_DISCONNECT)
                pass

            elif la_ == 6:
                self.state = 530
                self.match(SQLParser.SSH_SAVE)
                self.state = 531
                self.match(SQLParser.SSH_EXPRESSION)
                pass

            elif la_ == 7:
                self.state = 532
                self.match(SQLParser.SSH_RESTORE)
                self.state = 533
                self.match(SQLParser.SSH_EXPRESSION)
                pass

            elif la_ == 8:
                self.state = 534
                self.match(SQLParser.SFTP)
                self.state = 564
                self._errHandler.sync(self)
                token = self._input.LA(1)
                if token in [176]:
                    self.state = 535
                    self.match(SQLParser.SFTP_CHMOD)
                    self.state = 536
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 537
                    self.match(SQLParser.INT)
                    pass
                elif token in [177]:
                    self.state = 538
                    self.match(SQLParser.SFTP_GETCWD)
                    pass
                elif token in [178]:
                    self.state = 539
                    self.match(SQLParser.SFTP_CHDIR)
                    self.state = 540
                    self.match(SQLParser.SSH_EXPRESSION)
                    pass
                elif token in [179]:
                    self.state = 541
                    self.match(SQLParser.SFTP_CHOWN)
                    self.state = 542
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 543
                    self.match(SQLParser.INT)
                    self.state = 544
                    self.match(SQLParser.INT)
                    pass
                elif token in [180]:
                    self.state = 545
                    self.match(SQLParser.SFTP_MKDIR)
                    self.state = 546
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 547
                    self.match(SQLParser.INT)
                    pass
                elif token in [181]:
                    self.state = 548
                    self.match(SQLParser.SFTP_GET)
                    self.state = 549
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 550
                    self.match(SQLParser.SSH_EXPRESSION)
                    pass
                elif token in [182]:
                    self.state = 551
                    self.match(SQLParser.SFTP_PUT)
                    self.state = 552
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 553
                    self.match(SQLParser.SSH_EXPRESSION)
                    pass
                elif token in [183]:
                    self.state = 554
                    self.match(SQLParser.SFTP_REMOVE)
                    self.state = 555
                    self.match(SQLParser.SSH_EXPRESSION)
                    pass
                elif token in [184]:
                    self.state = 556
                    self.match(SQLParser.SFTP_RENAME)
                    self.state = 557
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 558
                    self.match(SQLParser.SSH_EXPRESSION)
                    pass
                elif token in [185]:
                    self.state = 559
                    self.match(SQLParser.SFTP_LISTDIR)
                    self.state = 560
                    self.match(SQLParser.SSH_EXPRESSION)
                    pass
                elif token in [186]:
                    self.state = 561
                    self.match(SQLParser.SFTP_TRUNCATE)
                    self.state = 562
                    self.match(SQLParser.SSH_EXPRESSION)
                    self.state = 563
                    self.match(SQLParser.INT)
                    pass
                else:
                    raise NoViableAltException(self)

                pass


            self.state = 569
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==189:
                self.state = 568
                self.match(SQLParser.SSH_SEMICOLON)


            self.state = 572
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 571
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class JobContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def JOB(self):
            return self.getToken(SQLParser.JOB, 0)

        def JOB_SEMICOLON(self):
            return self.getToken(SQLParser.JOB_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def JOB_MANGER(self):
            return self.getToken(SQLParser.JOB_MANGER, 0)

        def JOB_WAIT(self):
            return self.getToken(SQLParser.JOB_WAIT, 0)

        def JOB_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.JOB_EXPRESSION)
            else:
                return self.getToken(SQLParser.JOB_EXPRESSION, i)

        def JOB_SHOW(self):
            return self.getToken(SQLParser.JOB_SHOW, 0)

        def JOB_ABORT(self):
            return self.getToken(SQLParser.JOB_ABORT, 0)

        def JOB_SHUTDOWN(self):
            return self.getToken(SQLParser.JOB_SHUTDOWN, 0)

        def JOB_TIMER(self):
            return self.getToken(SQLParser.JOB_TIMER, 0)

        def JOB_START(self):
            return self.getToken(SQLParser.JOB_START, 0)

        def JOB_DEREGISTER(self):
            return self.getToken(SQLParser.JOB_DEREGISTER, 0)

        def JOB_WORKER(self):
            return self.getToken(SQLParser.JOB_WORKER, 0)

        def JOB_REGISTER(self):
            return self.getToken(SQLParser.JOB_REGISTER, 0)

        def JOB_TO(self):
            return self.getToken(SQLParser.JOB_TO, 0)

        def JOB_SET(self):
            return self.getToken(SQLParser.JOB_SET, 0)

        def JOB_CREATE(self):
            return self.getToken(SQLParser.JOB_CREATE, 0)

        def JOB_ON(self):
            return self.getToken(SQLParser.JOB_ON, 0)

        def JOB_OFF(self):
            return self.getToken(SQLParser.JOB_OFF, 0)

        def JOB_EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.JOB_EQUAL)
            else:
                return self.getToken(SQLParser.JOB_EQUAL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_job

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitJob" ):
                return visitor.visitJob(self)
            else:
                return visitor.visitChildren(self)




    def job(self):

        localctx = SQLParser.JobContext(self, self._ctx, self.state)
        self.enterRule(localctx, 100, self.RULE_job)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 574
            self.match(SQLParser.JOB)
            self.state = 619
            self._errHandler.sync(self)
            token = self._input.LA(1)
            if token in [207]:
                self.state = 575
                self.match(SQLParser.JOB_MANGER)
                self.state = 576
                _la = self._input.LA(1)
                if not(_la==208 or _la==209):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass
            elif token in [200]:
                self.state = 577
                self.match(SQLParser.JOB_WAIT)
                self.state = 578
                self.match(SQLParser.JOB_EXPRESSION)
                self.state = 582
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==211:
                    self.state = 579
                    self.match(SQLParser.JOB_EXPRESSION)
                    self.state = 580
                    self.match(SQLParser.JOB_EQUAL)
                    self.state = 581
                    self.match(SQLParser.JOB_EXPRESSION)


                pass
            elif token in [197]:
                self.state = 584
                self.match(SQLParser.JOB_SHOW)
                self.state = 585
                self.match(SQLParser.JOB_EXPRESSION)
                pass
            elif token in [202]:
                self.state = 586
                self.match(SQLParser.JOB_ABORT)
                self.state = 587
                self.match(SQLParser.JOB_EXPRESSION)
                pass
            elif token in [201]:
                self.state = 588
                self.match(SQLParser.JOB_SHUTDOWN)
                self.state = 589
                self.match(SQLParser.JOB_EXPRESSION)
                pass
            elif token in [203]:
                self.state = 590
                self.match(SQLParser.JOB_TIMER)
                self.state = 591
                self.match(SQLParser.JOB_EXPRESSION)
                pass
            elif token in [199]:
                self.state = 592
                self.match(SQLParser.JOB_START)
                self.state = 593
                self.match(SQLParser.JOB_EXPRESSION)
                pass
            elif token in [205]:
                self.state = 594
                self.match(SQLParser.JOB_DEREGISTER)
                self.state = 595
                self.match(SQLParser.JOB_WORKER)
                pass
            elif token in [204]:
                self.state = 596
                self.match(SQLParser.JOB_REGISTER)
                self.state = 597
                self.match(SQLParser.JOB_WORKER)
                self.state = 598
                self.match(SQLParser.JOB_TO)
                self.state = 599
                self.match(SQLParser.JOB_EXPRESSION)
                pass
            elif token in [198]:
                self.state = 600
                self.match(SQLParser.JOB_SET)
                self.state = 601
                self.match(SQLParser.JOB_EXPRESSION)
                self.state = 605 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 602
                    self.match(SQLParser.JOB_EXPRESSION)
                    self.state = 603
                    self.match(SQLParser.JOB_EQUAL)
                    self.state = 604
                    self.match(SQLParser.JOB_EXPRESSION)
                    self.state = 607 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==211):
                        break

                pass
            elif token in [196]:
                self.state = 609
                self.match(SQLParser.JOB_CREATE)
                self.state = 610
                self.match(SQLParser.JOB_EXPRESSION)
                self.state = 616
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while _la==211:
                    self.state = 611
                    self.match(SQLParser.JOB_EXPRESSION)
                    self.state = 612
                    self.match(SQLParser.JOB_EQUAL)
                    self.state = 613
                    self.match(SQLParser.JOB_EXPRESSION)
                    self.state = 618
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass
            else:
                raise NoViableAltException(self)

            self.state = 622
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==193:
                self.state = 621
                self.match(SQLParser.JOB_SEMICOLON)


            self.state = 625
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 624
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class CompareContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def COMPARE(self):
            return self.getToken(SQLParser.COMPARE, 0)

        def COMPARE_RESET(self):
            return self.getToken(SQLParser.COMPARE_RESET, 0)

        def COMPARE_SEMICOLON(self):
            return self.getToken(SQLParser.COMPARE_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def COMPARE_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_EXPRESSION)
            else:
                return self.getToken(SQLParser.COMPARE_EXPRESSION, i)

        def COMPARE_MASKLINE(self):
            return self.getToken(SQLParser.COMPARE_MASKLINE, 0)

        def COMPARE_EQUAL(self):
            return self.getToken(SQLParser.COMPARE_EQUAL, 0)

        def COMPARE_NOMASKLINE(self):
            return self.getToken(SQLParser.COMPARE_NOMASKLINE, 0)

        def COMPARE_SET(self):
            return self.getToken(SQLParser.COMPARE_SET, 0)

        def COMPARE_OUTPUT(self):
            return self.getToken(SQLParser.COMPARE_OUTPUT, 0)

        def COMPARE_ALGORITHM(self):
            return self.getToken(SQLParser.COMPARE_ALGORITHM, 0)

        def COMPARE_ENCODING(self):
            return self.getToken(SQLParser.COMPARE_ENCODING, 0)

        def COMPARE_SKIPLINE(self):
            return self.getToken(SQLParser.COMPARE_SKIPLINE, 0)

        def COMPARE_NOSKIPLINE(self):
            return self.getToken(SQLParser.COMPARE_NOSKIPLINE, 0)

        def COMPARE_LCS(self):
            return self.getToken(SQLParser.COMPARE_LCS, 0)

        def COMPARE_MYERS(self):
            return self.getToken(SQLParser.COMPARE_MYERS, 0)

        def COMPARE_WORK(self):
            return self.getToken(SQLParser.COMPARE_WORK, 0)

        def COMPARE_REFERENCE(self):
            return self.getToken(SQLParser.COMPARE_REFERENCE, 0)

        def COMPARE_MASK(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_MASK)
            else:
                return self.getToken(SQLParser.COMPARE_MASK, i)

        def COMPARE_NOMASK(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_NOMASK)
            else:
                return self.getToken(SQLParser.COMPARE_NOMASK, i)

        def COMPARE_CASE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_CASE)
            else:
                return self.getToken(SQLParser.COMPARE_CASE, i)

        def COMPARE_NOCASE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_NOCASE)
            else:
                return self.getToken(SQLParser.COMPARE_NOCASE, i)

        def COMPARE_IGBLANK(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_IGBLANK)
            else:
                return self.getToken(SQLParser.COMPARE_IGBLANK, i)

        def COMPARE_NOIGBLANK(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_NOIGBLANK)
            else:
                return self.getToken(SQLParser.COMPARE_NOIGBLANK, i)

        def COMPARE_TRIM(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_TRIM)
            else:
                return self.getToken(SQLParser.COMPARE_TRIM, i)

        def COMPARE_NOTRIM(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_NOTRIM)
            else:
                return self.getToken(SQLParser.COMPARE_NOTRIM, i)

        def COMPARE_CONSOLE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_CONSOLE)
            else:
                return self.getToken(SQLParser.COMPARE_CONSOLE, i)

        def COMPARE_DIFFFILE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_DIFFFILE)
            else:
                return self.getToken(SQLParser.COMPARE_DIFFFILE, i)

        def COMPARE_HTMLFILE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.COMPARE_HTMLFILE)
            else:
                return self.getToken(SQLParser.COMPARE_HTMLFILE, i)

        def getRuleIndex(self):
            return SQLParser.RULE_compare

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitCompare" ):
                return visitor.visitCompare(self)
            else:
                return visitor.visitChildren(self)




    def compare(self):

        localctx = SQLParser.CompareContext(self, self._ctx, self.state)
        self.enterRule(localctx, 102, self.RULE_compare)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 627
            self.match(SQLParser.COMPARE)
            self.state = 666
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,88,self._ctx)
            if la_ == 1:
                self.state = 628
                self.match(SQLParser.COMPARE_EXPRESSION)
                self.state = 629
                self.match(SQLParser.COMPARE_EXPRESSION)
                self.state = 633
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la - 218)) & ~0x3f) == 0 and ((1 << (_la - 218)) & 1011) != 0:
                    self.state = 630
                    _la = self._input.LA(1)
                    if not((((_la - 218)) & ~0x3f) == 0 and ((1 << (_la - 218)) & 1011) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 635
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 2:
                self.state = 636
                _la = self._input.LA(1)
                if not(_la==232 or _la==233):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 637
                self.match(SQLParser.COMPARE_EXPRESSION)
                pass

            elif la_ == 3:
                self.state = 638
                self.match(SQLParser.COMPARE_MASKLINE)
                self.state = 639
                self.match(SQLParser.COMPARE_EXPRESSION)
                self.state = 640
                self.match(SQLParser.COMPARE_EQUAL)
                self.state = 641
                self.match(SQLParser.COMPARE_EXPRESSION)
                pass

            elif la_ == 4:
                self.state = 642
                self.match(SQLParser.COMPARE_NOMASKLINE)
                self.state = 643
                self.match(SQLParser.COMPARE_EXPRESSION)
                pass

            elif la_ == 5:
                self.state = 644
                self.match(SQLParser.COMPARE_RESET)
                pass

            elif la_ == 6:
                self.state = 645
                self.match(SQLParser.COMPARE_SET)
                self.state = 649
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while (((_la - 218)) & ~0x3f) == 0 and ((1 << (_la - 218)) & 1011) != 0:
                    self.state = 646
                    _la = self._input.LA(1)
                    if not((((_la - 218)) & ~0x3f) == 0 and ((1 << (_la - 218)) & 1011) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 651
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)

                pass

            elif la_ == 7:
                self.state = 652
                self.match(SQLParser.COMPARE_SET)
                self.state = 653
                self.match(SQLParser.COMPARE_OUTPUT)
                self.state = 655 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 654
                    _la = self._input.LA(1)
                    if not((((_la - 229)) & ~0x3f) == 0 and ((1 << (_la - 229)) & 7) != 0):
                        self._errHandler.recoverInline(self)
                    else:
                        self._errHandler.reportMatch(self)
                        self.consume()
                    self.state = 657 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not ((((_la - 229)) & ~0x3f) == 0 and ((1 << (_la - 229)) & 7) != 0):
                        break

                pass

            elif la_ == 8:
                self.state = 659
                self.match(SQLParser.COMPARE_SET)
                self.state = 660
                self.match(SQLParser.COMPARE_ALGORITHM)
                self.state = 661
                _la = self._input.LA(1)
                if not(_la==239 or _la==240):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                pass

            elif la_ == 9:
                self.state = 662
                self.match(SQLParser.COMPARE_SET)
                self.state = 663
                _la = self._input.LA(1)
                if not(_la==237 or _la==238):
                    self._errHandler.recoverInline(self)
                else:
                    self._errHandler.reportMatch(self)
                    self.consume()
                self.state = 664
                self.match(SQLParser.COMPARE_ENCODING)
                self.state = 665
                self.match(SQLParser.COMPARE_EXPRESSION)
                pass


            self.state = 669
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==213:
                self.state = 668
                self.match(SQLParser.COMPARE_SEMICOLON)


            self.state = 672
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 671
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class DataContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def DATA(self):
            return self.getToken(SQLParser.DATA, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def DATA_SET(self):
            return self.getToken(SQLParser.DATA_SET, 0)

        def DATA_SEEDFILE(self):
            return self.getToken(SQLParser.DATA_SEEDFILE, 0)

        def DATA_DIR(self):
            return self.getToken(SQLParser.DATA_DIR, 0)

        def DATA_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.DATA_EXPRESSION)
            else:
                return self.getToken(SQLParser.DATA_EXPRESSION, i)

        def DATA_HDFSUSER(self):
            return self.getToken(SQLParser.DATA_HDFSUSER, 0)

        def DATA_CREATE(self):
            return self.getToken(SQLParser.DATA_CREATE, 0)

        def DATA_FILETYPE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.DATA_FILETYPE)
            else:
                return self.getToken(SQLParser.DATA_FILETYPE, i)

        def DATA_FILE(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.DATA_FILE)
            else:
                return self.getToken(SQLParser.DATA_FILE, i)

        def DATACOLUMN_OPEN(self):
            return self.getToken(SQLParser.DATACOLUMN_OPEN, 0)

        def DATA_CONVERT(self):
            return self.getToken(SQLParser.DATA_CONVERT, 0)

        def DATA_TO(self):
            return self.getToken(SQLParser.DATA_TO, 0)

        def DATA_SEMICOLON(self):
            return self.getToken(SQLParser.DATA_SEMICOLON, 0)

        def DATACOLUMN_CONTENT(self):
            return self.getToken(SQLParser.DATACOLUMN_CONTENT, 0)

        def DATA_ROWS(self):
            return self.getToken(SQLParser.DATA_ROWS, 0)

        def DATA_INT(self):
            return self.getToken(SQLParser.DATA_INT, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_data

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitData" ):
                return visitor.visitData(self)
            else:
                return visitor.visitChildren(self)




    def data(self):

        localctx = SQLParser.DataContext(self, self._ctx, self.state)
        self.enterRule(localctx, 104, self.RULE_data)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 674
            self.match(SQLParser.DATA)
            self.state = 712
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,96,self._ctx)
            if la_ == 1:
                self.state = 675
                self.match(SQLParser.DATA_SET)
                self.state = 676
                self.match(SQLParser.DATA_SEEDFILE)
                self.state = 677
                self.match(SQLParser.DATA_DIR)
                self.state = 678
                self.match(SQLParser.DATA_EXPRESSION)
                self.state = 680
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==243:
                    self.state = 679
                    self.match(SQLParser.DATA_SEMICOLON)


                pass

            elif la_ == 2:
                self.state = 682
                self.match(SQLParser.DATA_SET)
                self.state = 683
                self.match(SQLParser.DATA_HDFSUSER)
                self.state = 684
                self.match(SQLParser.DATA_EXPRESSION)
                self.state = 686
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==243:
                    self.state = 685
                    self.match(SQLParser.DATA_SEMICOLON)


                pass

            elif la_ == 3:
                self.state = 688
                self.match(SQLParser.DATA_CREATE)
                self.state = 689
                self.match(SQLParser.DATA_FILETYPE)
                self.state = 690
                self.match(SQLParser.DATA_FILE)
                self.state = 691
                self.match(SQLParser.DATA_EXPRESSION)
                self.state = 692
                self.match(SQLParser.DATACOLUMN_OPEN)
                self.state = 694
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==260:
                    self.state = 693
                    self.match(SQLParser.DATACOLUMN_CONTENT)


                self.state = 698
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==251:
                    self.state = 696
                    self.match(SQLParser.DATA_ROWS)
                    self.state = 697
                    self.match(SQLParser.DATA_INT)


                self.state = 700
                self.match(SQLParser.DATA_SEMICOLON)
                pass

            elif la_ == 4:
                self.state = 701
                self.match(SQLParser.DATA_CONVERT)
                self.state = 702
                self.match(SQLParser.DATA_FILETYPE)
                self.state = 703
                self.match(SQLParser.DATA_FILE)
                self.state = 704
                self.match(SQLParser.DATA_EXPRESSION)
                self.state = 705
                self.match(SQLParser.DATA_TO)
                self.state = 706
                self.match(SQLParser.DATA_FILETYPE)
                self.state = 707
                self.match(SQLParser.DATA_FILE)
                self.state = 708
                self.match(SQLParser.DATA_EXPRESSION)
                self.state = 710
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==243:
                    self.state = 709
                    self.match(SQLParser.DATA_SEMICOLON)


                pass


            self.state = 715
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 714
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class HelpContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def HELP(self):
            return self.getToken(SQLParser.HELP, 0)

        def HELP_COMMAND(self):
            return self.getToken(SQLParser.HELP_COMMAND, 0)

        def HELP_SEMICOLON(self):
            return self.getToken(SQLParser.HELP_SEMICOLON, 0)

        def CRLF(self):
            return self.getToken(SQLParser.CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_help

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitHelp" ):
                return visitor.visitHelp(self)
            else:
                return visitor.visitChildren(self)




    def help_(self):

        localctx = SQLParser.HelpContext(self, self._ctx, self.state)
        self.enterRule(localctx, 106, self.RULE_help)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 717
            self.match(SQLParser.HELP)
            self.state = 719
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==262:
                self.state = 718
                self.match(SQLParser.HELP_COMMAND)


            self.state = 722
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==264:
                self.state = 721
                self.match(SQLParser.HELP_SEMICOLON)


            self.state = 725
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==17:
                self.state = 724
                self.match(SQLParser.CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class MonitorContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def MONITOR(self):
            return self.getToken(SQLParser.MONITOR, 0)

        def MONITOR_SEMICOLON(self):
            return self.getToken(SQLParser.MONITOR_SEMICOLON, 0)

        def MONITOR_CRLF(self):
            return self.getToken(SQLParser.MONITOR_CRLF, 0)

        def MONITOR_MANAGER(self):
            return self.getToken(SQLParser.MONITOR_MANAGER, 0)

        def MONITOR_ON(self):
            return self.getToken(SQLParser.MONITOR_ON, 0)

        def MONITOR_OFF(self):
            return self.getToken(SQLParser.MONITOR_OFF, 0)

        def MONITOR_CREATE(self):
            return self.getToken(SQLParser.MONITOR_CREATE, 0)

        def MONITOR_TASK(self):
            return self.getToken(SQLParser.MONITOR_TASK, 0)

        def MONITOR_START(self):
            return self.getToken(SQLParser.MONITOR_START, 0)

        def MONITOR_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.MONITOR_EXPRESSION)
            else:
                return self.getToken(SQLParser.MONITOR_EXPRESSION, i)

        def MONITOR_STOP(self):
            return self.getToken(SQLParser.MONITOR_STOP, 0)

        def MONITOR_REPORT(self):
            return self.getToken(SQLParser.MONITOR_REPORT, 0)

        def MONITOR_LIST(self):
            return self.getToken(SQLParser.MONITOR_LIST, 0)

        def MONITOR_WORKERS(self):
            return self.getToken(SQLParser.MONITOR_WORKERS, 0)

        def MONITOR_EQUAL(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.MONITOR_EQUAL)
            else:
                return self.getToken(SQLParser.MONITOR_EQUAL, i)

        def getRuleIndex(self):
            return SQLParser.RULE_monitor

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitMonitor" ):
                return visitor.visitMonitor(self)
            else:
                return visitor.visitChildren(self)




    def monitor(self):

        localctx = SQLParser.MonitorContext(self, self._ctx, self.state)
        self.enterRule(localctx, 108, self.RULE_monitor)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 727
            self.match(SQLParser.MONITOR)
            self.state = 759
            self._errHandler.sync(self)
            la_ = self._interp.adaptivePredict(self._input,104,self._ctx)
            if la_ == 1:
                self.state = 728
                self.match(SQLParser.MONITOR_MANAGER)
                self.state = 729
                self.match(SQLParser.MONITOR_ON)
                self.state = 732
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if _la==267:
                    self.state = 730
                    self.match(SQLParser.MONITOR_WORKERS)
                    self.state = 731
                    self.match(SQLParser.MONITOR_EXPRESSION)


                pass

            elif la_ == 2:
                self.state = 734
                self.match(SQLParser.MONITOR_MANAGER)
                self.state = 735
                self.match(SQLParser.MONITOR_OFF)
                pass

            elif la_ == 3:
                self.state = 736
                self.match(SQLParser.MONITOR_CREATE)
                self.state = 737
                self.match(SQLParser.MONITOR_TASK)

                self.state = 739
                self._errHandler.sync(self)
                la_ = self._interp.adaptivePredict(self._input,102,self._ctx)
                if la_ == 1:
                    self.state = 738
                    self.match(SQLParser.MONITOR_EXPRESSION)


                self.state = 744 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                while True:
                    self.state = 741
                    self.match(SQLParser.MONITOR_EXPRESSION)
                    self.state = 742
                    self.match(SQLParser.MONITOR_EQUAL)
                    self.state = 743
                    self.match(SQLParser.MONITOR_EXPRESSION)
                    self.state = 746 
                    self._errHandler.sync(self)
                    _la = self._input.LA(1)
                    if not (_la==277):
                        break

                pass

            elif la_ == 4:
                self.state = 748
                self.match(SQLParser.MONITOR_START)
                self.state = 749
                self.match(SQLParser.MONITOR_TASK)
                self.state = 750
                self.match(SQLParser.MONITOR_EXPRESSION)
                pass

            elif la_ == 5:
                self.state = 751
                self.match(SQLParser.MONITOR_STOP)
                self.state = 752
                self.match(SQLParser.MONITOR_TASK)
                self.state = 753
                self.match(SQLParser.MONITOR_EXPRESSION)
                pass

            elif la_ == 6:
                self.state = 754
                self.match(SQLParser.MONITOR_REPORT)
                self.state = 755
                self.match(SQLParser.MONITOR_TASK)
                self.state = 756
                self.match(SQLParser.MONITOR_EXPRESSION)
                pass

            elif la_ == 7:
                self.state = 757
                self.match(SQLParser.MONITOR_LIST)
                self.state = 758
                self.match(SQLParser.MONITOR_TASK)
                pass


            self.state = 762
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==279:
                self.state = 761
                self.match(SQLParser.MONITOR_SEMICOLON)


            self.state = 765
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==278:
                self.state = 764
                self.match(SQLParser.MONITOR_CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx


    class PluginContext(ParserRuleContext):
        __slots__ = 'parser'

        def __init__(self, parser, parent:ParserRuleContext=None, invokingState:int=-1):
            super().__init__(parent, invokingState)
            self.parser = parser

        def PLUGIN(self):
            return self.getToken(SQLParser.PLUGIN, 0)

        def PLUGIN_EXPRESSION(self, i:int=None):
            if i is None:
                return self.getTokens(SQLParser.PLUGIN_EXPRESSION)
            else:
                return self.getToken(SQLParser.PLUGIN_EXPRESSION, i)

        def PLUGIN_SEMICOLON(self):
            return self.getToken(SQLParser.PLUGIN_SEMICOLON, 0)

        def PLUGIN_CRLF(self):
            return self.getToken(SQLParser.PLUGIN_CRLF, 0)

        def getRuleIndex(self):
            return SQLParser.RULE_plugin

        def accept(self, visitor:ParseTreeVisitor):
            if hasattr( visitor, "visitPlugin" ):
                return visitor.visitPlugin(self)
            else:
                return visitor.visitChildren(self)




    def plugin(self):

        localctx = SQLParser.PluginContext(self, self._ctx, self.state)
        self.enterRule(localctx, 110, self.RULE_plugin)
        self._la = 0 # Token type
        try:
            self.enterOuterAlt(localctx, 1)
            self.state = 767
            self.match(SQLParser.PLUGIN)
            self.state = 769 
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            while True:
                self.state = 768
                self.match(SQLParser.PLUGIN_EXPRESSION)
                self.state = 771 
                self._errHandler.sync(self)
                _la = self._input.LA(1)
                if not (_la==281):
                    break

            self.state = 774
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==283:
                self.state = 773
                self.match(SQLParser.PLUGIN_SEMICOLON)


            self.state = 777
            self._errHandler.sync(self)
            _la = self._input.LA(1)
            if _la==282:
                self.state = 776
                self.match(SQLParser.PLUGIN_CRLF)


        except RecognitionException as re:
            localctx.exception = re
            self._errHandler.reportError(self, re)
            self._errHandler.recover(self, re)
        finally:
            self.exitRule()
        return localctx





